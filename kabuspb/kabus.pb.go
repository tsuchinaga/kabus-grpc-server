// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: kabuspb/kabus.proto

package kabuspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 市場
type Exchange int32

const (
	Exchange_EXCHANGE_UNSPECIFIED Exchange = 0 // 指定なし
	// 株式
	Exchange_EXCHANGE_TOUSHOU   Exchange = 1 // 東証
	Exchange_EXCHANGE_MEISHOU   Exchange = 3 // 名証
	Exchange_EXCHANGE_FUKUSHOU  Exchange = 5 // 福証
	Exchange_EXCHANGE_SATSUSHOU Exchange = 6 // 札証
	// 先物・オプション
	Exchange_EXCHANGE_ALL_SESSION   Exchange = 2  // 日通し
	Exchange_EXCHANGE_DAY_SESSION   Exchange = 23 // 日中場
	Exchange_EXCHANGE_NIGHT_SESSION Exchange = 24 // 夕場
)

// Enum value maps for Exchange.
var (
	Exchange_name = map[int32]string{
		0:  "EXCHANGE_UNSPECIFIED",
		1:  "EXCHANGE_TOUSHOU",
		3:  "EXCHANGE_MEISHOU",
		5:  "EXCHANGE_FUKUSHOU",
		6:  "EXCHANGE_SATSUSHOU",
		2:  "EXCHANGE_ALL_SESSION",
		23: "EXCHANGE_DAY_SESSION",
		24: "EXCHANGE_NIGHT_SESSION",
	}
	Exchange_value = map[string]int32{
		"EXCHANGE_UNSPECIFIED":   0,
		"EXCHANGE_TOUSHOU":       1,
		"EXCHANGE_MEISHOU":       3,
		"EXCHANGE_FUKUSHOU":      5,
		"EXCHANGE_SATSUSHOU":     6,
		"EXCHANGE_ALL_SESSION":   2,
		"EXCHANGE_DAY_SESSION":   23,
		"EXCHANGE_NIGHT_SESSION": 24,
	}
)

func (x Exchange) Enum() *Exchange {
	p := new(Exchange)
	*p = x
	return p
}

func (x Exchange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Exchange) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[0].Descriptor()
}

func (Exchange) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[0]
}

func (x Exchange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Exchange.Descriptor instead.
func (Exchange) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{0}
}

// 株式市場
type StockExchange int32

const (
	StockExchange_STOCK_EXCHANGE_UNSPECIFIED StockExchange = 0 // 指定なし
	StockExchange_STOCK_EXCHANGE_TOUSHOU     StockExchange = 1 // 東証
	StockExchange_STOCK_EXCHANGE_MEISHOU     StockExchange = 3 // 名証
	StockExchange_STOCK_EXCHANGE_FUKUSHOU    StockExchange = 5 // 福証
	StockExchange_STOCK_EXCHANGE_SATSUSHOU   StockExchange = 6 // 札証
)

// Enum value maps for StockExchange.
var (
	StockExchange_name = map[int32]string{
		0: "STOCK_EXCHANGE_UNSPECIFIED",
		1: "STOCK_EXCHANGE_TOUSHOU",
		3: "STOCK_EXCHANGE_MEISHOU",
		5: "STOCK_EXCHANGE_FUKUSHOU",
		6: "STOCK_EXCHANGE_SATSUSHOU",
	}
	StockExchange_value = map[string]int32{
		"STOCK_EXCHANGE_UNSPECIFIED": 0,
		"STOCK_EXCHANGE_TOUSHOU":     1,
		"STOCK_EXCHANGE_MEISHOU":     3,
		"STOCK_EXCHANGE_FUKUSHOU":    5,
		"STOCK_EXCHANGE_SATSUSHOU":   6,
	}
)

func (x StockExchange) Enum() *StockExchange {
	p := new(StockExchange)
	*p = x
	return p
}

func (x StockExchange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StockExchange) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[1].Descriptor()
}

func (StockExchange) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[1]
}

func (x StockExchange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StockExchange.Descriptor instead.
func (StockExchange) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{1}
}

// 先物市場
type FutureExchange int32

const (
	FutureExchange_FUTURE_EXCHANGE_UNSPECIFIED   FutureExchange = 0  // 指定なし
	FutureExchange_FUTURE_EXCHANGE_ALL_SESSION   FutureExchange = 2  // 日通し
	FutureExchange_FUTURE_EXCHANGE_DAY_SESSION   FutureExchange = 23 // 日中場
	FutureExchange_FUTURE_EXCHANGE_NIGHT_SESSION FutureExchange = 24 // 夕場
)

// Enum value maps for FutureExchange.
var (
	FutureExchange_name = map[int32]string{
		0:  "FUTURE_EXCHANGE_UNSPECIFIED",
		2:  "FUTURE_EXCHANGE_ALL_SESSION",
		23: "FUTURE_EXCHANGE_DAY_SESSION",
		24: "FUTURE_EXCHANGE_NIGHT_SESSION",
	}
	FutureExchange_value = map[string]int32{
		"FUTURE_EXCHANGE_UNSPECIFIED":   0,
		"FUTURE_EXCHANGE_ALL_SESSION":   2,
		"FUTURE_EXCHANGE_DAY_SESSION":   23,
		"FUTURE_EXCHANGE_NIGHT_SESSION": 24,
	}
)

func (x FutureExchange) Enum() *FutureExchange {
	p := new(FutureExchange)
	*p = x
	return p
}

func (x FutureExchange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FutureExchange) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[2].Descriptor()
}

func (FutureExchange) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[2]
}

func (x FutureExchange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FutureExchange.Descriptor instead.
func (FutureExchange) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{2}
}

// オプション市場
type OptionExchange int32

const (
	OptionExchange_OPTION_EXCHANGE_UNSPECIFIED   OptionExchange = 0  // 指定なし
	OptionExchange_OPTION_EXCHANGE_ALL_SESSION   OptionExchange = 2  // 日通し
	OptionExchange_OPTION_EXCHANGE_DAY_SESSION   OptionExchange = 23 // 日中場
	OptionExchange_OPTION_EXCHANGE_NIGHT_SESSION OptionExchange = 24 // 夕場
)

// Enum value maps for OptionExchange.
var (
	OptionExchange_name = map[int32]string{
		0:  "OPTION_EXCHANGE_UNSPECIFIED",
		2:  "OPTION_EXCHANGE_ALL_SESSION",
		23: "OPTION_EXCHANGE_DAY_SESSION",
		24: "OPTION_EXCHANGE_NIGHT_SESSION",
	}
	OptionExchange_value = map[string]int32{
		"OPTION_EXCHANGE_UNSPECIFIED":   0,
		"OPTION_EXCHANGE_ALL_SESSION":   2,
		"OPTION_EXCHANGE_DAY_SESSION":   23,
		"OPTION_EXCHANGE_NIGHT_SESSION": 24,
	}
)

func (x OptionExchange) Enum() *OptionExchange {
	p := new(OptionExchange)
	*p = x
	return p
}

func (x OptionExchange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionExchange) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[3].Descriptor()
}

func (OptionExchange) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[3]
}

func (x OptionExchange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptionExchange.Descriptor instead.
func (OptionExchange) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{3}
}

// 先物コード
type FutureCode int32

const (
	FutureCode_FUTURE_CODE_UNSPECIFIED FutureCode = 0  // 指定なし
	FutureCode_FUTURE_CODE_NK225       FutureCode = 1  // 日経平均先物
	FutureCode_FUTURE_CODE_NK225_MINI  FutureCode = 2  // 日経225mini先物
	FutureCode_FUTURE_CODE_TOPIX       FutureCode = 3  // TOPIX先物
	FutureCode_FUTURE_CODE_TOPIX_MINI  FutureCode = 4  // ミニTOPIX先物
	FutureCode_FUTURE_CODE_MOTHERS     FutureCode = 5  // 東証マザーズ先物
	FutureCode_FUTURE_CODE_JPX400      FutureCode = 6  // JPX日経400先物
	FutureCode_FUTURE_CODE_DOW         FutureCode = 7  // NYダウ先物
	FutureCode_FUTURE_CODE_VI          FutureCode = 8  // 日経平均VI先物
	FutureCode_FUTURE_CODE_CORE30      FutureCode = 9  // TOPIX Core30先物
	FutureCode_FUTURE_CODE_REIT        FutureCode = 10 // 東証REIT指数先物
)

// Enum value maps for FutureCode.
var (
	FutureCode_name = map[int32]string{
		0:  "FUTURE_CODE_UNSPECIFIED",
		1:  "FUTURE_CODE_NK225",
		2:  "FUTURE_CODE_NK225_MINI",
		3:  "FUTURE_CODE_TOPIX",
		4:  "FUTURE_CODE_TOPIX_MINI",
		5:  "FUTURE_CODE_MOTHERS",
		6:  "FUTURE_CODE_JPX400",
		7:  "FUTURE_CODE_DOW",
		8:  "FUTURE_CODE_VI",
		9:  "FUTURE_CODE_CORE30",
		10: "FUTURE_CODE_REIT",
	}
	FutureCode_value = map[string]int32{
		"FUTURE_CODE_UNSPECIFIED": 0,
		"FUTURE_CODE_NK225":       1,
		"FUTURE_CODE_NK225_MINI":  2,
		"FUTURE_CODE_TOPIX":       3,
		"FUTURE_CODE_TOPIX_MINI":  4,
		"FUTURE_CODE_MOTHERS":     5,
		"FUTURE_CODE_JPX400":      6,
		"FUTURE_CODE_DOW":         7,
		"FUTURE_CODE_VI":          8,
		"FUTURE_CODE_CORE30":      9,
		"FUTURE_CODE_REIT":        10,
	}
)

func (x FutureCode) Enum() *FutureCode {
	p := new(FutureCode)
	*p = x
	return p
}

func (x FutureCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FutureCode) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[4].Descriptor()
}

func (FutureCode) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[4]
}

func (x FutureCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FutureCode.Descriptor instead.
func (FutureCode) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{4}
}

// コール or プット
type CallPut int32

const (
	CallPut_CALL_PUT_UNSPECIFIED CallPut = 0 // 未指定
	CallPut_CALL_PUT_CALL        CallPut = 1 // CALL
	CallPut_CALL_PUT_PUT         CallPut = 2 // PUT
)

// Enum value maps for CallPut.
var (
	CallPut_name = map[int32]string{
		0: "CALL_PUT_UNSPECIFIED",
		1: "CALL_PUT_CALL",
		2: "CALL_PUT_PUT",
	}
	CallPut_value = map[string]int32{
		"CALL_PUT_UNSPECIFIED": 0,
		"CALL_PUT_CALL":        1,
		"CALL_PUT_PUT":         2,
	}
)

func (x CallPut) Enum() *CallPut {
	p := new(CallPut)
	*p = x
	return p
}

func (x CallPut) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallPut) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[5].Descriptor()
}

func (CallPut) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[5]
}

func (x CallPut) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallPut.Descriptor instead.
func (CallPut) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{5}
}

// 商品
type Product int32

const (
	Product_PRODUCT_UNSPECIFIED Product = 0 // 未指定
	Product_PRODUCT_ALL         Product = 1 // すべて
	Product_PRODUCT_STOCK       Product = 2 // 現物
	Product_PRODUCT_MARGIN      Product = 3 // 信用
	Product_PRODUCT_FUTURE      Product = 4 // 先物
	Product_PRODUCT_OPTION      Product = 5 // オプション
)

// Enum value maps for Product.
var (
	Product_name = map[int32]string{
		0: "PRODUCT_UNSPECIFIED",
		1: "PRODUCT_ALL",
		2: "PRODUCT_STOCK",
		3: "PRODUCT_MARGIN",
		4: "PRODUCT_FUTURE",
		5: "PRODUCT_OPTION",
	}
	Product_value = map[string]int32{
		"PRODUCT_UNSPECIFIED": 0,
		"PRODUCT_ALL":         1,
		"PRODUCT_STOCK":       2,
		"PRODUCT_MARGIN":      3,
		"PRODUCT_FUTURE":      4,
		"PRODUCT_OPTION":      5,
	}
)

func (x Product) Enum() *Product {
	p := new(Product)
	*p = x
	return p
}

func (x Product) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Product) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[6].Descriptor()
}

func (Product) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[6]
}

func (x Product) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Product.Descriptor instead.
func (Product) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{6}
}

// 状態
type State int32

const (
	State_STATE_UNSPECIFIED State = 0 // 未指定
	State_STATE_WAIT        State = 1 // 待機（発注待機）
	State_STATE_PROCESSING  State = 2 // 処理中（発注送信中）
	State_STATE_PROCESSED   State = 3 // 処理済（発注済・訂正済）
	State_STATE_IN_MODIFY   State = 4 // 訂正取消送信中
	State_STATE_DONE        State = 5 // 終了（発注エラー・取消済・全約定・失効・期限切れ）
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_WAIT",
		2: "STATE_PROCESSING",
		3: "STATE_PROCESSED",
		4: "STATE_IN_MODIFY",
		5: "STATE_DONE",
	}
	State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_WAIT":        1,
		"STATE_PROCESSING":  2,
		"STATE_PROCESSED":   3,
		"STATE_IN_MODIFY":   4,
		"STATE_DONE":        5,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[7].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[7]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{7}
}

// 注文状態
type OrderState int32

const (
	OrderState_ORDER_STATE_UNSPECIFIED OrderState = 0 // 未指定
	OrderState_ORDER_STATE_WAIT        OrderState = 1 // 待機（発注待機）
	OrderState_ORDER_STATE_PROCESSING  OrderState = 2 // 処理中（発注送信中）
	OrderState_ORDER_STATE_PROCESSED   OrderState = 3 // 処理済（発注済・訂正済）
	OrderState_ORDER_STATE_IN_MODIFY   OrderState = 4 // 訂正取消送信中
	OrderState_ORDER_STATE_DONE        OrderState = 5 // 終了（発注エラー・取消済・全約定・失効・期限切れ）
)

// Enum value maps for OrderState.
var (
	OrderState_name = map[int32]string{
		0: "ORDER_STATE_UNSPECIFIED",
		1: "ORDER_STATE_WAIT",
		2: "ORDER_STATE_PROCESSING",
		3: "ORDER_STATE_PROCESSED",
		4: "ORDER_STATE_IN_MODIFY",
		5: "ORDER_STATE_DONE",
	}
	OrderState_value = map[string]int32{
		"ORDER_STATE_UNSPECIFIED": 0,
		"ORDER_STATE_WAIT":        1,
		"ORDER_STATE_PROCESSING":  2,
		"ORDER_STATE_PROCESSED":   3,
		"ORDER_STATE_IN_MODIFY":   4,
		"ORDER_STATE_DONE":        5,
	}
)

func (x OrderState) Enum() *OrderState {
	p := new(OrderState)
	*p = x
	return p
}

func (x OrderState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderState) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[8].Descriptor()
}

func (OrderState) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[8]
}

func (x OrderState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderState.Descriptor instead.
func (OrderState) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{8}
}

// 売買区分
type Side int32

const (
	Side_SIDE_UNSPECIFIED Side = 0 // 未指定
	Side_SIDE_BUY         Side = 1 // 買い
	Side_SIDE_SELL        Side = 2 // 売り
)

// Enum value maps for Side.
var (
	Side_name = map[int32]string{
		0: "SIDE_UNSPECIFIED",
		1: "SIDE_BUY",
		2: "SIDE_SELL",
	}
	Side_value = map[string]int32{
		"SIDE_UNSPECIFIED": 0,
		"SIDE_BUY":         1,
		"SIDE_SELL":        2,
	}
)

func (x Side) Enum() *Side {
	p := new(Side)
	*p = x
	return p
}

func (x Side) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Side) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[9].Descriptor()
}

func (Side) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[9]
}

func (x Side) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Side.Descriptor instead.
func (Side) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{9}
}

// 取引区分
type TradeType int32

const (
	TradeType_TRADE_TYPE_UNSPECIFIED TradeType = 0 // 未指定
	TradeType_TRADE_TYPE_ENTRY       TradeType = 1 // 新規
	TradeType_TRADE_TYPE_EXIT        TradeType = 2 // 返済
)

// Enum value maps for TradeType.
var (
	TradeType_name = map[int32]string{
		0: "TRADE_TYPE_UNSPECIFIED",
		1: "TRADE_TYPE_ENTRY",
		2: "TRADE_TYPE_EXIT",
	}
	TradeType_value = map[string]int32{
		"TRADE_TYPE_UNSPECIFIED": 0,
		"TRADE_TYPE_ENTRY":       1,
		"TRADE_TYPE_EXIT":        2,
	}
)

func (x TradeType) Enum() *TradeType {
	p := new(TradeType)
	*p = x
	return p
}

func (x TradeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeType) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[10].Descriptor()
}

func (TradeType) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[10]
}

func (x TradeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeType.Descriptor instead.
func (TradeType) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{10}
}

// 執行条件
type OrderType int32

const (
	OrderType_ORDER_TYPE_UNSPECIFIED OrderType = 0 // 未指定
	OrderType_ORDER_TYPE_ZARABA      OrderType = 1 // ザラバ
	OrderType_ORDER_TYPE_OPEN        OrderType = 2 // 寄り
	OrderType_ORDER_TYPE_CLOSE       OrderType = 3 // 引け
	OrderType_ORDER_TYPE_FUNARI      OrderType = 4 // 不成
	OrderType_ORDER_TYPE_MTLO        OrderType = 5 // 対等指値(対当値段条件付注文 Market To Limit Order)
	OrderType_ORDER_TYPE_IOC         OrderType = 6 // IOC
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "ORDER_TYPE_UNSPECIFIED",
		1: "ORDER_TYPE_ZARABA",
		2: "ORDER_TYPE_OPEN",
		3: "ORDER_TYPE_CLOSE",
		4: "ORDER_TYPE_FUNARI",
		5: "ORDER_TYPE_MTLO",
		6: "ORDER_TYPE_IOC",
	}
	OrderType_value = map[string]int32{
		"ORDER_TYPE_UNSPECIFIED": 0,
		"ORDER_TYPE_ZARABA":      1,
		"ORDER_TYPE_OPEN":        2,
		"ORDER_TYPE_CLOSE":       3,
		"ORDER_TYPE_FUNARI":      4,
		"ORDER_TYPE_MTLO":        5,
		"ORDER_TYPE_IOC":         6,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[11].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[11]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{11}
}

// 注文の市場
type OrderExchange int32

const (
	OrderExchange_ORDER_EXCHANGE_UNSPECIFIED   OrderExchange = 0  // 未指定
	OrderExchange_ORDER_EXCHANGE_TOUSHOU       OrderExchange = 1  // 東証
	OrderExchange_ORDER_EXCHANGE_MEISHOU       OrderExchange = 3  // 名証
	OrderExchange_ORDER_EXCHANGE_FUKUSHOU      OrderExchange = 5  // 福証
	OrderExchange_ORDER_EXCHANGE_SATSUSHOU     OrderExchange = 6  // 札証
	OrderExchange_ORDER_EXCHANGE_SOR           OrderExchange = 9  // SOR
	OrderExchange_ORDER_EXCHANGE_ALL_SESSION   OrderExchange = 2  // 日通し
	OrderExchange_ORDER_EXCHANGE_DAY_SESSION   OrderExchange = 23 // 日中場
	OrderExchange_ORDER_EXCHANGE_NIGHT_SESSION OrderExchange = 24 // 夕場
)

// Enum value maps for OrderExchange.
var (
	OrderExchange_name = map[int32]string{
		0:  "ORDER_EXCHANGE_UNSPECIFIED",
		1:  "ORDER_EXCHANGE_TOUSHOU",
		3:  "ORDER_EXCHANGE_MEISHOU",
		5:  "ORDER_EXCHANGE_FUKUSHOU",
		6:  "ORDER_EXCHANGE_SATSUSHOU",
		9:  "ORDER_EXCHANGE_SOR",
		2:  "ORDER_EXCHANGE_ALL_SESSION",
		23: "ORDER_EXCHANGE_DAY_SESSION",
		24: "ORDER_EXCHANGE_NIGHT_SESSION",
	}
	OrderExchange_value = map[string]int32{
		"ORDER_EXCHANGE_UNSPECIFIED":   0,
		"ORDER_EXCHANGE_TOUSHOU":       1,
		"ORDER_EXCHANGE_MEISHOU":       3,
		"ORDER_EXCHANGE_FUKUSHOU":      5,
		"ORDER_EXCHANGE_SATSUSHOU":     6,
		"ORDER_EXCHANGE_SOR":           9,
		"ORDER_EXCHANGE_ALL_SESSION":   2,
		"ORDER_EXCHANGE_DAY_SESSION":   23,
		"ORDER_EXCHANGE_NIGHT_SESSION": 24,
	}
)

func (x OrderExchange) Enum() *OrderExchange {
	p := new(OrderExchange)
	*p = x
	return p
}

func (x OrderExchange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderExchange) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[12].Descriptor()
}

func (OrderExchange) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[12]
}

func (x OrderExchange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderExchange.Descriptor instead.
func (OrderExchange) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{12}
}

// 口座種別
type AccountType int32

const (
	AccountType_ACCOUNT_TYPE_UNSPECIFIED AccountType = 0  // 未指定
	AccountType_ACCOUNT_TYPE_GENERAL     AccountType = 2  // 一般
	AccountType_ACCOUNT_TYPE_SPECIFIC    AccountType = 4  // 特定
	AccountType_ACCOUNT_TYPE_CORPORATION AccountType = 12 // 法人
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0:  "ACCOUNT_TYPE_UNSPECIFIED",
		2:  "ACCOUNT_TYPE_GENERAL",
		4:  "ACCOUNT_TYPE_SPECIFIC",
		12: "ACCOUNT_TYPE_CORPORATION",
	}
	AccountType_value = map[string]int32{
		"ACCOUNT_TYPE_UNSPECIFIED": 0,
		"ACCOUNT_TYPE_GENERAL":     2,
		"ACCOUNT_TYPE_SPECIFIC":    4,
		"ACCOUNT_TYPE_CORPORATION": 12,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[13].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[13]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{13}
}

// 受渡区分
type DeliveryType int32

const (
	DeliveryType_DELIVERY_TYPE_UNSPECIFIED DeliveryType = 0 // 未指定
	DeliveryType_DELIVERY_TYPE_AUTO        DeliveryType = 1 // 自動振替
	DeliveryType_DELIVERY_TYPE_CASH        DeliveryType = 2 // お預かり金
)

// Enum value maps for DeliveryType.
var (
	DeliveryType_name = map[int32]string{
		0: "DELIVERY_TYPE_UNSPECIFIED",
		1: "DELIVERY_TYPE_AUTO",
		2: "DELIVERY_TYPE_CASH",
	}
	DeliveryType_value = map[string]int32{
		"DELIVERY_TYPE_UNSPECIFIED": 0,
		"DELIVERY_TYPE_AUTO":        1,
		"DELIVERY_TYPE_CASH":        2,
	}
)

func (x DeliveryType) Enum() *DeliveryType {
	p := new(DeliveryType)
	*p = x
	return p
}

func (x DeliveryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliveryType) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[14].Descriptor()
}

func (DeliveryType) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[14]
}

func (x DeliveryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliveryType.Descriptor instead.
func (DeliveryType) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{14}
}

// 信用取引区分
type MarginTradeType int32

const (
	MarginTradeType_MARGIN_TRADE_TYPE_UNSPECIFIED  MarginTradeType = 0 // 未指定
	MarginTradeType_MARGIN_TRADE_TYPE_SYSTEM       MarginTradeType = 1 // 制度信用
	MarginTradeType_MARGIN_TRADE_TYPE_GENERAL_LONG MarginTradeType = 2 // 一般信用(長期)
	MarginTradeType_MARGIN_TRADE_TYPE_GENERAL_DAY  MarginTradeType = 4 // 一般信用(デイトレ)
)

// Enum value maps for MarginTradeType.
var (
	MarginTradeType_name = map[int32]string{
		0: "MARGIN_TRADE_TYPE_UNSPECIFIED",
		1: "MARGIN_TRADE_TYPE_SYSTEM",
		2: "MARGIN_TRADE_TYPE_GENERAL_LONG",
		4: "MARGIN_TRADE_TYPE_GENERAL_DAY",
	}
	MarginTradeType_value = map[string]int32{
		"MARGIN_TRADE_TYPE_UNSPECIFIED":  0,
		"MARGIN_TRADE_TYPE_SYSTEM":       1,
		"MARGIN_TRADE_TYPE_GENERAL_LONG": 2,
		"MARGIN_TRADE_TYPE_GENERAL_DAY":  4,
	}
)

func (x MarginTradeType) Enum() *MarginTradeType {
	p := new(MarginTradeType)
	*p = x
	return p
}

func (x MarginTradeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarginTradeType) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[15].Descriptor()
}

func (MarginTradeType) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[15]
}

func (x MarginTradeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarginTradeType.Descriptor instead.
func (MarginTradeType) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{15}
}

// 有効期間条件
type TimeInForce int32

const (
	TimeInForce_TIME_IN_FORCE_UNSPECIFIED TimeInForce = 0
	TimeInForce_TIME_IN_FORCE_FAS         TimeInForce = 1 // FAS (Fill And Store)
	TimeInForce_TIME_IN_FORCE_FAK         TimeInForce = 2 // FAK (Fill And Kill)
	TimeInForce_TIME_IN_FORCE_FOK         TimeInForce = 3 // FOK (Fill Or Kill)
)

// Enum value maps for TimeInForce.
var (
	TimeInForce_name = map[int32]string{
		0: "TIME_IN_FORCE_UNSPECIFIED",
		1: "TIME_IN_FORCE_FAS",
		2: "TIME_IN_FORCE_FAK",
		3: "TIME_IN_FORCE_FOK",
	}
	TimeInForce_value = map[string]int32{
		"TIME_IN_FORCE_UNSPECIFIED": 0,
		"TIME_IN_FORCE_FAS":         1,
		"TIME_IN_FORCE_FAK":         2,
		"TIME_IN_FORCE_FOK":         3,
	}
)

func (x TimeInForce) Enum() *TimeInForce {
	p := new(TimeInForce)
	*p = x
	return p
}

func (x TimeInForce) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeInForce) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[16].Descriptor()
}

func (TimeInForce) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[16]
}

func (x TimeInForce) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeInForce.Descriptor instead.
func (TimeInForce) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{16}
}

// 注文明細種別
type RecordType int32

const (
	RecordType_RECORD_TYPE_UNSPECIFIED RecordType = 0 // 指定なし
	RecordType_RECORD_TYPE_RECEIVE     RecordType = 1 // 受付
	RecordType_RECORD_TYPE_CARRIED     RecordType = 2 // 繰越
	RecordType_RECORD_TYPE_EXPIRED     RecordType = 3 // 期限切れ
	RecordType_RECORD_TYPE_ORDERED     RecordType = 4 // 発注
	RecordType_RECORD_TYPE_MODIFIED    RecordType = 5 // 訂正
	RecordType_RECORD_TYPE_CANCELED    RecordType = 6 // 取消
	RecordType_RECORD_TYPE_REVOCATION  RecordType = 7 // 失効
	RecordType_RECORD_TYPE_CONTRACTED  RecordType = 8 // 約定
)

// Enum value maps for RecordType.
var (
	RecordType_name = map[int32]string{
		0: "RECORD_TYPE_UNSPECIFIED",
		1: "RECORD_TYPE_RECEIVE",
		2: "RECORD_TYPE_CARRIED",
		3: "RECORD_TYPE_EXPIRED",
		4: "RECORD_TYPE_ORDERED",
		5: "RECORD_TYPE_MODIFIED",
		6: "RECORD_TYPE_CANCELED",
		7: "RECORD_TYPE_REVOCATION",
		8: "RECORD_TYPE_CONTRACTED",
	}
	RecordType_value = map[string]int32{
		"RECORD_TYPE_UNSPECIFIED": 0,
		"RECORD_TYPE_RECEIVE":     1,
		"RECORD_TYPE_CARRIED":     2,
		"RECORD_TYPE_EXPIRED":     3,
		"RECORD_TYPE_ORDERED":     4,
		"RECORD_TYPE_MODIFIED":    5,
		"RECORD_TYPE_CANCELED":    6,
		"RECORD_TYPE_REVOCATION":  7,
		"RECORD_TYPE_CONTRACTED":  8,
	}
)

func (x RecordType) Enum() *RecordType {
	p := new(RecordType)
	*p = x
	return p
}

func (x RecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[17].Descriptor()
}

func (RecordType) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[17]
}

func (x RecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordType.Descriptor instead.
func (RecordType) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{17}
}

// 注文状態ステータス
type OrderDetailState int32

const (
	OrderDetailState_ORDER_DETAIL_STATE_UNSPECIFIED OrderDetailState = 0 // 未指定
	OrderDetailState_ORDER_DETAIL_STATE_WAIT        OrderDetailState = 1 // 待機（発注待機）
	OrderDetailState_ORDER_DETAIL_STATE_PROCESSING  OrderDetailState = 2 // 処理中（発注送信中・訂正送信中・取消送信中）
	OrderDetailState_ORDER_DETAIL_STATE_PROCESSED   OrderDetailState = 3 // 処理済（発注済・訂正済・取消済・全約定・期限切れ）
	OrderDetailState_ORDER_DETAIL_STATE_ERROR       OrderDetailState = 4 // エラー
	OrderDetailState_ORDER_DETAIL_STATE_DELETED     OrderDetailState = 5 // 削除済み
)

// Enum value maps for OrderDetailState.
var (
	OrderDetailState_name = map[int32]string{
		0: "ORDER_DETAIL_STATE_UNSPECIFIED",
		1: "ORDER_DETAIL_STATE_WAIT",
		2: "ORDER_DETAIL_STATE_PROCESSING",
		3: "ORDER_DETAIL_STATE_PROCESSED",
		4: "ORDER_DETAIL_STATE_ERROR",
		5: "ORDER_DETAIL_STATE_DELETED",
	}
	OrderDetailState_value = map[string]int32{
		"ORDER_DETAIL_STATE_UNSPECIFIED": 0,
		"ORDER_DETAIL_STATE_WAIT":        1,
		"ORDER_DETAIL_STATE_PROCESSING":  2,
		"ORDER_DETAIL_STATE_PROCESSED":   3,
		"ORDER_DETAIL_STATE_ERROR":       4,
		"ORDER_DETAIL_STATE_DELETED":     5,
	}
)

func (x OrderDetailState) Enum() *OrderDetailState {
	p := new(OrderDetailState)
	*p = x
	return p
}

func (x OrderDetailState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderDetailState) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[18].Descriptor()
}

func (OrderDetailState) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[18]
}

func (x OrderDetailState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderDetailState.Descriptor instead.
func (OrderDetailState) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{18}
}

// 銘柄種別
type SecurityType int32

const (
	SecurityType_SECURITY_TYPE_UNSPECIFIED SecurityType = 0   // 未指定
	SecurityType_SECURITY_TYPE_STOCK       SecurityType = 1   // 株式
	SecurityType_SECURITY_TYPE_NK225       SecurityType = 101 // 日経225先物
	SecurityType_SECURITY_TYPE_NK225_MINI  SecurityType = 901 // 日経225mini先物
	SecurityType_SECURITY_TYPE_JPX400      SecurityType = 121 // JPX日経インデックス400先物
	SecurityType_SECURITY_TYPE_TOPIX       SecurityType = 107 // TOPIX先物
	SecurityType_SECURITY_TYPE_TOPIX_MINI  SecurityType = 907 // ミニTOPIX先物
	SecurityType_SECURITY_TYPE_MOTHERS     SecurityType = 154 // 東証マザーズ指数先物
	SecurityType_SECURITY_TYPE_REIT        SecurityType = 155 // 東証REIT指数先物
	SecurityType_SECURITY_TYPE_DOW         SecurityType = 144 // NYダウ先物
	SecurityType_SECURITY_TYPE_VI          SecurityType = 145 // 日経平均VI先物
	SecurityType_SECURITY_TYPE_CODE30      SecurityType = 171 // TOPIX Core30先物
	SecurityType_SECURITY_TYPE_NK225_OP    SecurityType = 103 // 日経225OP
)

// Enum value maps for SecurityType.
var (
	SecurityType_name = map[int32]string{
		0:   "SECURITY_TYPE_UNSPECIFIED",
		1:   "SECURITY_TYPE_STOCK",
		101: "SECURITY_TYPE_NK225",
		901: "SECURITY_TYPE_NK225_MINI",
		121: "SECURITY_TYPE_JPX400",
		107: "SECURITY_TYPE_TOPIX",
		907: "SECURITY_TYPE_TOPIX_MINI",
		154: "SECURITY_TYPE_MOTHERS",
		155: "SECURITY_TYPE_REIT",
		144: "SECURITY_TYPE_DOW",
		145: "SECURITY_TYPE_VI",
		171: "SECURITY_TYPE_CODE30",
		103: "SECURITY_TYPE_NK225_OP",
	}
	SecurityType_value = map[string]int32{
		"SECURITY_TYPE_UNSPECIFIED": 0,
		"SECURITY_TYPE_STOCK":       1,
		"SECURITY_TYPE_NK225":       101,
		"SECURITY_TYPE_NK225_MINI":  901,
		"SECURITY_TYPE_JPX400":      121,
		"SECURITY_TYPE_TOPIX":       107,
		"SECURITY_TYPE_TOPIX_MINI":  907,
		"SECURITY_TYPE_MOTHERS":     154,
		"SECURITY_TYPE_REIT":        155,
		"SECURITY_TYPE_DOW":         144,
		"SECURITY_TYPE_VI":          145,
		"SECURITY_TYPE_CODE30":      171,
		"SECURITY_TYPE_NK225_OP":    103,
	}
)

func (x SecurityType) Enum() *SecurityType {
	p := new(SecurityType)
	*p = x
	return p
}

func (x SecurityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityType) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[19].Descriptor()
}

func (SecurityType) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[19]
}

func (x SecurityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityType.Descriptor instead.
func (SecurityType) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{19}
}

// 市場・上場部
type ExchangeDivision int32

const (
	ExchangeDivision_EXCHANGE_DIVISION_UNSPECIFIED      ExchangeDivision = 0  // 未指定
	ExchangeDivision_EXCHANGE_DIVISION_ALL              ExchangeDivision = 1  // 全市場
	ExchangeDivision_EXCHANGE_DIVISION_TOUSHOU_ALL      ExchangeDivision = 2  // 東証全体
	ExchangeDivision_EXCHANGE_DIVISION_TOUSHOU_PRIME    ExchangeDivision = 10 // 東証プライム
	ExchangeDivision_EXCHANGE_DIVISION_TOUSHOU_STANDARD ExchangeDivision = 11 // 東証スタンダード
	ExchangeDivision_EXCHANGE_DIVISION_TOUSHOU_GROWTH   ExchangeDivision = 12 // 東証グロース
	ExchangeDivision_EXCHANGE_DIVISION_TOUSHOU_1        ExchangeDivision = 3  // 東証一部
	ExchangeDivision_EXCHANGE_DIVISION_TOUSHOU_2        ExchangeDivision = 4  // 東証二部
	ExchangeDivision_EXCHANGE_DIVISION_MOTHERS          ExchangeDivision = 5  // 東証マザーズ
	ExchangeDivision_EXCHANGE_DIVISION_JASDAQ           ExchangeDivision = 6  // JASDAQ
	ExchangeDivision_EXCHANGE_DIVISION_MEISHOU          ExchangeDivision = 7  // 名証
	ExchangeDivision_EXCHANGE_DIVISION_FUKUSHOU         ExchangeDivision = 8  // 福証
	ExchangeDivision_EXCHANGE_DIVISION_SATSUSHOU        ExchangeDivision = 9  // 札証
)

// Enum value maps for ExchangeDivision.
var (
	ExchangeDivision_name = map[int32]string{
		0:  "EXCHANGE_DIVISION_UNSPECIFIED",
		1:  "EXCHANGE_DIVISION_ALL",
		2:  "EXCHANGE_DIVISION_TOUSHOU_ALL",
		10: "EXCHANGE_DIVISION_TOUSHOU_PRIME",
		11: "EXCHANGE_DIVISION_TOUSHOU_STANDARD",
		12: "EXCHANGE_DIVISION_TOUSHOU_GROWTH",
		3:  "EXCHANGE_DIVISION_TOUSHOU_1",
		4:  "EXCHANGE_DIVISION_TOUSHOU_2",
		5:  "EXCHANGE_DIVISION_MOTHERS",
		6:  "EXCHANGE_DIVISION_JASDAQ",
		7:  "EXCHANGE_DIVISION_MEISHOU",
		8:  "EXCHANGE_DIVISION_FUKUSHOU",
		9:  "EXCHANGE_DIVISION_SATSUSHOU",
	}
	ExchangeDivision_value = map[string]int32{
		"EXCHANGE_DIVISION_UNSPECIFIED":      0,
		"EXCHANGE_DIVISION_ALL":              1,
		"EXCHANGE_DIVISION_TOUSHOU_ALL":      2,
		"EXCHANGE_DIVISION_TOUSHOU_PRIME":    10,
		"EXCHANGE_DIVISION_TOUSHOU_STANDARD": 11,
		"EXCHANGE_DIVISION_TOUSHOU_GROWTH":   12,
		"EXCHANGE_DIVISION_TOUSHOU_1":        3,
		"EXCHANGE_DIVISION_TOUSHOU_2":        4,
		"EXCHANGE_DIVISION_MOTHERS":          5,
		"EXCHANGE_DIVISION_JASDAQ":           6,
		"EXCHANGE_DIVISION_MEISHOU":          7,
		"EXCHANGE_DIVISION_FUKUSHOU":         8,
		"EXCHANGE_DIVISION_SATSUSHOU":        9,
	}
)

func (x ExchangeDivision) Enum() *ExchangeDivision {
	p := new(ExchangeDivision)
	*p = x
	return p
}

func (x ExchangeDivision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeDivision) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[20].Descriptor()
}

func (ExchangeDivision) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[20]
}

func (x ExchangeDivision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExchangeDivision.Descriptor instead.
func (ExchangeDivision) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{20}
}

// 株価ランキング種別
type PriceRankingType int32

const (
	PriceRankingType_PRICE_RANKING_TYPE_UNSPECIFIED   PriceRankingType = 0 // 未指定
	PriceRankingType_PRICE_RANKING_TYPE_INCREASE_RATE PriceRankingType = 1 // 値上がり率
	PriceRankingType_PRICE_RANKING_TYPE_DECREASE_RATE PriceRankingType = 2 // 値下がり率
	PriceRankingType_PRICE_RANKING_TYPE_VOLUME        PriceRankingType = 3 // 売買高上位
	PriceRankingType_PRICE_RANKING_TYPE_VALUE         PriceRankingType = 4 // 売買代金上位
)

// Enum value maps for PriceRankingType.
var (
	PriceRankingType_name = map[int32]string{
		0: "PRICE_RANKING_TYPE_UNSPECIFIED",
		1: "PRICE_RANKING_TYPE_INCREASE_RATE",
		2: "PRICE_RANKING_TYPE_DECREASE_RATE",
		3: "PRICE_RANKING_TYPE_VOLUME",
		4: "PRICE_RANKING_TYPE_VALUE",
	}
	PriceRankingType_value = map[string]int32{
		"PRICE_RANKING_TYPE_UNSPECIFIED":   0,
		"PRICE_RANKING_TYPE_INCREASE_RATE": 1,
		"PRICE_RANKING_TYPE_DECREASE_RATE": 2,
		"PRICE_RANKING_TYPE_VOLUME":        3,
		"PRICE_RANKING_TYPE_VALUE":         4,
	}
)

func (x PriceRankingType) Enum() *PriceRankingType {
	p := new(PriceRankingType)
	*p = x
	return p
}

func (x PriceRankingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriceRankingType) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[21].Descriptor()
}

func (PriceRankingType) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[21]
}

func (x PriceRankingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PriceRankingType.Descriptor instead.
func (PriceRankingType) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{21}
}

// 信用ランキング種別
type MarginRankingType int32

const (
	MarginRankingType_MARGIN_RANKING_TYPE_UNSPECIFIED           MarginRankingType = 0 // 未指定
	MarginRankingType_MARGIN_RANKING_TYPE_SELL_BALANCE_INCREASE MarginRankingType = 1 // 信用売残増
	MarginRankingType_MARGIN_RANKING_TYPE_SELL_BALANCE_DECREASE MarginRankingType = 2 // 信用売残減
	MarginRankingType_MARGIN_RANKING_TYPE_BUY_BALANCE_INCREASE  MarginRankingType = 3 // 信用買残増
	MarginRankingType_MARGIN_RANKING_TYPE_BUY_BALANCE_DECREASE  MarginRankingType = 4 // 信用買残減
	MarginRankingType_MARGIN_RANKING_TYPE_HIGH_MAGNIFICATION    MarginRankingType = 5 // 信用高倍率
	MarginRankingType_MARGIN_RANKING_TYPE_LOW_MAGNIFICATION     MarginRankingType = 6 // 信用低倍率
)

// Enum value maps for MarginRankingType.
var (
	MarginRankingType_name = map[int32]string{
		0: "MARGIN_RANKING_TYPE_UNSPECIFIED",
		1: "MARGIN_RANKING_TYPE_SELL_BALANCE_INCREASE",
		2: "MARGIN_RANKING_TYPE_SELL_BALANCE_DECREASE",
		3: "MARGIN_RANKING_TYPE_BUY_BALANCE_INCREASE",
		4: "MARGIN_RANKING_TYPE_BUY_BALANCE_DECREASE",
		5: "MARGIN_RANKING_TYPE_HIGH_MAGNIFICATION",
		6: "MARGIN_RANKING_TYPE_LOW_MAGNIFICATION",
	}
	MarginRankingType_value = map[string]int32{
		"MARGIN_RANKING_TYPE_UNSPECIFIED":           0,
		"MARGIN_RANKING_TYPE_SELL_BALANCE_INCREASE": 1,
		"MARGIN_RANKING_TYPE_SELL_BALANCE_DECREASE": 2,
		"MARGIN_RANKING_TYPE_BUY_BALANCE_INCREASE":  3,
		"MARGIN_RANKING_TYPE_BUY_BALANCE_DECREASE":  4,
		"MARGIN_RANKING_TYPE_HIGH_MAGNIFICATION":    5,
		"MARGIN_RANKING_TYPE_LOW_MAGNIFICATION":     6,
	}
)

func (x MarginRankingType) Enum() *MarginRankingType {
	p := new(MarginRankingType)
	*p = x
	return p
}

func (x MarginRankingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarginRankingType) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[22].Descriptor()
}

func (MarginRankingType) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[22]
}

func (x MarginRankingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarginRankingType.Descriptor instead.
func (MarginRankingType) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{22}
}

// 業種別ランキング種別
type IndustryRankingType int32

const (
	IndustryRankingType_INDUSTRY_RANKING_TYPE_UNSPECIFIED   IndustryRankingType = 0 // 未指定
	IndustryRankingType_INDUSTRY_RANKING_TYPE_INCREASE_RATE IndustryRankingType = 1 // 値上がり率
	IndustryRankingType_INDUSTRY_RANKING_TYPE_DECREASE_RATE IndustryRankingType = 2 // 値下がり率
)

// Enum value maps for IndustryRankingType.
var (
	IndustryRankingType_name = map[int32]string{
		0: "INDUSTRY_RANKING_TYPE_UNSPECIFIED",
		1: "INDUSTRY_RANKING_TYPE_INCREASE_RATE",
		2: "INDUSTRY_RANKING_TYPE_DECREASE_RATE",
	}
	IndustryRankingType_value = map[string]int32{
		"INDUSTRY_RANKING_TYPE_UNSPECIFIED":   0,
		"INDUSTRY_RANKING_TYPE_INCREASE_RATE": 1,
		"INDUSTRY_RANKING_TYPE_DECREASE_RATE": 2,
	}
)

func (x IndustryRankingType) Enum() *IndustryRankingType {
	p := new(IndustryRankingType)
	*p = x
	return p
}

func (x IndustryRankingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndustryRankingType) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[23].Descriptor()
}

func (IndustryRankingType) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[23]
}

func (x IndustryRankingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndustryRankingType.Descriptor instead.
func (IndustryRankingType) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{23}
}

// トレンド
type RankingTrend int32

const (
	RankingTrend_RANKING_TREND_UNSPECIFIED     RankingTrend = 0 // 未指定
	RankingTrend_RANKING_TREND_NO_DATA         RankingTrend = 1 // 対象データ無し
	RankingTrend_RANKING_TREND_RISE_OVER_20    RankingTrend = 2 // 過去10営業日より20位以上上昇
	RankingTrend_RANKING_TREND_RISE            RankingTrend = 3 // 過去10営業日より1～19位上昇
	RankingTrend_RANKING_TREND_NO_CHANGE       RankingTrend = 4 // 過去10営業日と変わらず
	RankingTrend_RANKING_TREND_DESCENT         RankingTrend = 5 // 過去10営業日より1～19位下落
	RankingTrend_RANKING_TREND_DESCENT_OVER_20 RankingTrend = 6 // 過去10営業日より20位以上下落
)

// Enum value maps for RankingTrend.
var (
	RankingTrend_name = map[int32]string{
		0: "RANKING_TREND_UNSPECIFIED",
		1: "RANKING_TREND_NO_DATA",
		2: "RANKING_TREND_RISE_OVER_20",
		3: "RANKING_TREND_RISE",
		4: "RANKING_TREND_NO_CHANGE",
		5: "RANKING_TREND_DESCENT",
		6: "RANKING_TREND_DESCENT_OVER_20",
	}
	RankingTrend_value = map[string]int32{
		"RANKING_TREND_UNSPECIFIED":     0,
		"RANKING_TREND_NO_DATA":         1,
		"RANKING_TREND_RISE_OVER_20":    2,
		"RANKING_TREND_RISE":            3,
		"RANKING_TREND_NO_CHANGE":       4,
		"RANKING_TREND_DESCENT":         5,
		"RANKING_TREND_DESCENT_OVER_20": 6,
	}
)

func (x RankingTrend) Enum() *RankingTrend {
	p := new(RankingTrend)
	*p = x
	return p
}

func (x RankingTrend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RankingTrend) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[24].Descriptor()
}

func (RankingTrend) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[24]
}

func (x RankingTrend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RankingTrend.Descriptor instead.
func (RankingTrend) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{24}
}

// 預かり区分
type FundType int32

const (
	FundType_FUND_TYPE_UNSPECIFIED       FundType = 0 // 未指定
	FundType_FUND_TYPE_PROTECTED         FundType = 1 // 保護
	FundType_FUND_TYPE_SUBSTITUTE_MARGIN FundType = 2 // 信用代用
	FundType_FUND_TYPE_MARGIN_TRADING    FundType = 3 // 信用取引
)

// Enum value maps for FundType.
var (
	FundType_name = map[int32]string{
		0: "FUND_TYPE_UNSPECIFIED",
		1: "FUND_TYPE_PROTECTED",
		2: "FUND_TYPE_SUBSTITUTE_MARGIN",
		3: "FUND_TYPE_MARGIN_TRADING",
	}
	FundType_value = map[string]int32{
		"FUND_TYPE_UNSPECIFIED":       0,
		"FUND_TYPE_PROTECTED":         1,
		"FUND_TYPE_SUBSTITUTE_MARGIN": 2,
		"FUND_TYPE_MARGIN_TRADING":    3,
	}
)

func (x FundType) Enum() *FundType {
	p := new(FundType)
	*p = x
	return p
}

func (x FundType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FundType) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[25].Descriptor()
}

func (FundType) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[25]
}

func (x FundType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FundType.Descriptor instead.
func (FundType) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{25}
}

// 株式執行条件
type StockOrderType int32

const (
	StockOrderType_STOCK_ORDER_TYPE_UNSPECIFIED StockOrderType = 0  // 未指定
	StockOrderType_STOCK_ORDER_TYPE_MO          StockOrderType = 10 // 成行 Market Order
	StockOrderType_STOCK_ORDER_TYPE_MOMO        StockOrderType = 13 // 寄成（前場） Market Order on Morning Opening
	StockOrderType_STOCK_ORDER_TYPE_MOAO        StockOrderType = 14 // 寄成（後場） Market Order on Afternoon Opening
	StockOrderType_STOCK_ORDER_TYPE_MOMC        StockOrderType = 15 // 引成（前場） Market Order on Morning Closing
	StockOrderType_STOCK_ORDER_TYPE_MOAC        StockOrderType = 16 // 引成（後場） Market Order on Afternoon Closing
	StockOrderType_STOCK_ORDER_TYPE_IOC_MO      StockOrderType = 17 // IOC成行 Immediate Or Cancel Market Order
	StockOrderType_STOCK_ORDER_TYPE_LO          StockOrderType = 20 // 指値 Limit Order
	StockOrderType_STOCK_ORDER_TYPE_LOMO        StockOrderType = 21 // 寄指（前場） Limit Order on Morning Opening
	StockOrderType_STOCK_ORDER_TYPE_LOAO        StockOrderType = 22 // 寄指（後場） Limit Order on Afternoon Opening
	StockOrderType_STOCK_ORDER_TYPE_LOMC        StockOrderType = 23 // 引指（前場） Limit Order on Morning Closing
	StockOrderType_STOCK_ORDER_TYPE_LOAC        StockOrderType = 24 // 引指（後場） Limit Order on Afternoon Closing
	StockOrderType_STOCK_ORDER_TYPE_FUNARI_M    StockOrderType = 25 // 不成（前場） Funari Mooning
	StockOrderType_STOCK_ORDER_TYPE_FUNARI_A    StockOrderType = 26 // 不成（後場） Funari Afternoon
	StockOrderType_STOCK_ORDER_TYPE_IOC_LO      StockOrderType = 27 // IOC指値 Immediate Or Cancel Limit Order
	StockOrderType_STOCK_ORDER_TYPE_STOP        StockOrderType = 30 // 逆指値 Stop Order
)

// Enum value maps for StockOrderType.
var (
	StockOrderType_name = map[int32]string{
		0:  "STOCK_ORDER_TYPE_UNSPECIFIED",
		10: "STOCK_ORDER_TYPE_MO",
		13: "STOCK_ORDER_TYPE_MOMO",
		14: "STOCK_ORDER_TYPE_MOAO",
		15: "STOCK_ORDER_TYPE_MOMC",
		16: "STOCK_ORDER_TYPE_MOAC",
		17: "STOCK_ORDER_TYPE_IOC_MO",
		20: "STOCK_ORDER_TYPE_LO",
		21: "STOCK_ORDER_TYPE_LOMO",
		22: "STOCK_ORDER_TYPE_LOAO",
		23: "STOCK_ORDER_TYPE_LOMC",
		24: "STOCK_ORDER_TYPE_LOAC",
		25: "STOCK_ORDER_TYPE_FUNARI_M",
		26: "STOCK_ORDER_TYPE_FUNARI_A",
		27: "STOCK_ORDER_TYPE_IOC_LO",
		30: "STOCK_ORDER_TYPE_STOP",
	}
	StockOrderType_value = map[string]int32{
		"STOCK_ORDER_TYPE_UNSPECIFIED": 0,
		"STOCK_ORDER_TYPE_MO":          10,
		"STOCK_ORDER_TYPE_MOMO":        13,
		"STOCK_ORDER_TYPE_MOAO":        14,
		"STOCK_ORDER_TYPE_MOMC":        15,
		"STOCK_ORDER_TYPE_MOAC":        16,
		"STOCK_ORDER_TYPE_IOC_MO":      17,
		"STOCK_ORDER_TYPE_LO":          20,
		"STOCK_ORDER_TYPE_LOMO":        21,
		"STOCK_ORDER_TYPE_LOAO":        22,
		"STOCK_ORDER_TYPE_LOMC":        23,
		"STOCK_ORDER_TYPE_LOAC":        24,
		"STOCK_ORDER_TYPE_FUNARI_M":    25,
		"STOCK_ORDER_TYPE_FUNARI_A":    26,
		"STOCK_ORDER_TYPE_IOC_LO":      27,
		"STOCK_ORDER_TYPE_STOP":        30,
	}
)

func (x StockOrderType) Enum() *StockOrderType {
	p := new(StockOrderType)
	*p = x
	return p
}

func (x StockOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StockOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[26].Descriptor()
}

func (StockOrderType) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[26]
}

func (x StockOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StockOrderType.Descriptor instead.
func (StockOrderType) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{26}
}

// 先物執行条件
type FutureOrderType int32

const (
	FutureOrderType_FUTURE_ORDER_TYPE_UNSPECIFIED FutureOrderType = 0   // 未指定
	FutureOrderType_FUTURE_ORDER_TYPE_MO          FutureOrderType = 120 // 成行（マーケットオーダー） Market Order
	FutureOrderType_FUTURE_ORDER_TYPE_MOC         FutureOrderType = 18  // 引成（派生） Market Order on Closing FAKのみ有効
	FutureOrderType_FUTURE_ORDER_TYPE_LO          FutureOrderType = 20  // 指値 Limit Order
	FutureOrderType_FUTURE_ORDER_TYPE_LOC         FutureOrderType = 28  // 引指（派生） Limit Order on Closing
	FutureOrderType_FUTURE_ORDER_TYPE_STOP        FutureOrderType = 30  // 逆指値 Stop
)

// Enum value maps for FutureOrderType.
var (
	FutureOrderType_name = map[int32]string{
		0:   "FUTURE_ORDER_TYPE_UNSPECIFIED",
		120: "FUTURE_ORDER_TYPE_MO",
		18:  "FUTURE_ORDER_TYPE_MOC",
		20:  "FUTURE_ORDER_TYPE_LO",
		28:  "FUTURE_ORDER_TYPE_LOC",
		30:  "FUTURE_ORDER_TYPE_STOP",
	}
	FutureOrderType_value = map[string]int32{
		"FUTURE_ORDER_TYPE_UNSPECIFIED": 0,
		"FUTURE_ORDER_TYPE_MO":          120,
		"FUTURE_ORDER_TYPE_MOC":         18,
		"FUTURE_ORDER_TYPE_LO":          20,
		"FUTURE_ORDER_TYPE_LOC":         28,
		"FUTURE_ORDER_TYPE_STOP":        30,
	}
)

func (x FutureOrderType) Enum() *FutureOrderType {
	p := new(FutureOrderType)
	*p = x
	return p
}

func (x FutureOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FutureOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[27].Descriptor()
}

func (FutureOrderType) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[27]
}

func (x FutureOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FutureOrderType.Descriptor instead.
func (FutureOrderType) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{27}
}

// オプション執行条件
type OptionOrderType int32

const (
	OptionOrderType_OPTION_ORDER_TYPE_UNSPECIFIED OptionOrderType = 0   // 未指定
	OptionOrderType_OPTION_ORDER_TYPE_MO          OptionOrderType = 120 // 成行（マーケットオーダー） Market Order
	OptionOrderType_OPTION_ORDER_TYPE_MOC         OptionOrderType = 18  // 引成（派生） Market Order on Closing FAKのみ有効
	OptionOrderType_OPTION_ORDER_TYPE_LO          OptionOrderType = 20  // 指値 Limit Order
	OptionOrderType_OPTION_ORDER_TYPE_LOC         OptionOrderType = 28  // 引指（派生） Limit Order on Closing
	OptionOrderType_OPTION_ORDER_TYPE_STOP        OptionOrderType = 30  // 逆指値 Stop
)

// Enum value maps for OptionOrderType.
var (
	OptionOrderType_name = map[int32]string{
		0:   "OPTION_ORDER_TYPE_UNSPECIFIED",
		120: "OPTION_ORDER_TYPE_MO",
		18:  "OPTION_ORDER_TYPE_MOC",
		20:  "OPTION_ORDER_TYPE_LO",
		28:  "OPTION_ORDER_TYPE_LOC",
		30:  "OPTION_ORDER_TYPE_STOP",
	}
	OptionOrderType_value = map[string]int32{
		"OPTION_ORDER_TYPE_UNSPECIFIED": 0,
		"OPTION_ORDER_TYPE_MO":          120,
		"OPTION_ORDER_TYPE_MOC":         18,
		"OPTION_ORDER_TYPE_LO":          20,
		"OPTION_ORDER_TYPE_LOC":         28,
		"OPTION_ORDER_TYPE_STOP":        30,
	}
)

func (x OptionOrderType) Enum() *OptionOrderType {
	p := new(OptionOrderType)
	*p = x
	return p
}

func (x OptionOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[28].Descriptor()
}

func (OptionOrderType) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[28]
}

func (x OptionOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptionOrderType.Descriptor instead.
func (OptionOrderType) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{28}
}

// 通貨
type Currency int32

const (
	Currency_CURRENCY_UNSPECIFIED Currency = 0  // 未指定
	Currency_CURRENCY_USD_JPY     Currency = 1  // USD/JPY
	Currency_CURRENCY_EUR_JPY     Currency = 2  // EUR/JPY
	Currency_CURRENCY_GBP_JPY     Currency = 3  // GBP/JPY
	Currency_CURRENCY_AUD_JPY     Currency = 4  // AUD/JPY
	Currency_CURRENCY_CHF_JPY     Currency = 5  // CHF/JPY
	Currency_CURRENCY_CAD_JPY     Currency = 6  // CAD/JPY
	Currency_CURRENCY_NZD_JPY     Currency = 7  // NZD/JPY
	Currency_CURRENCY_ZAR_JPY     Currency = 8  // ZAR/JPY
	Currency_CURRENCY_EUR_USD     Currency = 9  // EUR/USD
	Currency_CURRENCY_GBP_USD     Currency = 10 // GBP/USD
	Currency_CURRENCY_AUD_USD     Currency = 11 // AUD/USD
)

// Enum value maps for Currency.
var (
	Currency_name = map[int32]string{
		0:  "CURRENCY_UNSPECIFIED",
		1:  "CURRENCY_USD_JPY",
		2:  "CURRENCY_EUR_JPY",
		3:  "CURRENCY_GBP_JPY",
		4:  "CURRENCY_AUD_JPY",
		5:  "CURRENCY_CHF_JPY",
		6:  "CURRENCY_CAD_JPY",
		7:  "CURRENCY_NZD_JPY",
		8:  "CURRENCY_ZAR_JPY",
		9:  "CURRENCY_EUR_USD",
		10: "CURRENCY_GBP_USD",
		11: "CURRENCY_AUD_USD",
	}
	Currency_value = map[string]int32{
		"CURRENCY_UNSPECIFIED": 0,
		"CURRENCY_USD_JPY":     1,
		"CURRENCY_EUR_JPY":     2,
		"CURRENCY_GBP_JPY":     3,
		"CURRENCY_AUD_JPY":     4,
		"CURRENCY_CHF_JPY":     5,
		"CURRENCY_CAD_JPY":     6,
		"CURRENCY_NZD_JPY":     7,
		"CURRENCY_ZAR_JPY":     8,
		"CURRENCY_EUR_USD":     9,
		"CURRENCY_GBP_USD":     10,
		"CURRENCY_AUD_USD":     11,
	}
)

func (x Currency) Enum() *Currency {
	p := new(Currency)
	*p = x
	return p
}

func (x Currency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Currency) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[29].Descriptor()
}

func (Currency) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[29]
}

func (x Currency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Currency.Descriptor instead.
func (Currency) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{29}
}

// 規制市場
type RegulationExchange int32

const (
	RegulationExchange_REGULATION_EXCHANGE_UNSPECIFIED RegulationExchange = 0  // 未指定
	RegulationExchange_REGULATION_EXCHANGE_TOUSHOU     RegulationExchange = 1  // 東証
	RegulationExchange_REGULATION_EXCHANGE_MEISHOU     RegulationExchange = 3  // 名証
	RegulationExchange_REGULATION_EXCHANGE_FUKUSHOU    RegulationExchange = 5  // 福証
	RegulationExchange_REGULATION_EXCHANGE_SATSUSHOU   RegulationExchange = 6  // 札証
	RegulationExchange_REGULATION_EXCHANGE_SOR         RegulationExchange = 9  // SOR
	RegulationExchange_REGULATION_EXCHANGE_CXJ         RegulationExchange = 10 // CXJ
	RegulationExchange_REGULATION_EXCHANGE_JNX         RegulationExchange = 21 // JNX
)

// Enum value maps for RegulationExchange.
var (
	RegulationExchange_name = map[int32]string{
		0:  "REGULATION_EXCHANGE_UNSPECIFIED",
		1:  "REGULATION_EXCHANGE_TOUSHOU",
		3:  "REGULATION_EXCHANGE_MEISHOU",
		5:  "REGULATION_EXCHANGE_FUKUSHOU",
		6:  "REGULATION_EXCHANGE_SATSUSHOU",
		9:  "REGULATION_EXCHANGE_SOR",
		10: "REGULATION_EXCHANGE_CXJ",
		21: "REGULATION_EXCHANGE_JNX",
	}
	RegulationExchange_value = map[string]int32{
		"REGULATION_EXCHANGE_UNSPECIFIED": 0,
		"REGULATION_EXCHANGE_TOUSHOU":     1,
		"REGULATION_EXCHANGE_MEISHOU":     3,
		"REGULATION_EXCHANGE_FUKUSHOU":    5,
		"REGULATION_EXCHANGE_SATSUSHOU":   6,
		"REGULATION_EXCHANGE_SOR":         9,
		"REGULATION_EXCHANGE_CXJ":         10,
		"REGULATION_EXCHANGE_JNX":         21,
	}
)

func (x RegulationExchange) Enum() *RegulationExchange {
	p := new(RegulationExchange)
	*p = x
	return p
}

func (x RegulationExchange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegulationExchange) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[30].Descriptor()
}

func (RegulationExchange) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[30]
}

func (x RegulationExchange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegulationExchange.Descriptor instead.
func (RegulationExchange) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{30}
}

// 規制取引区分
type RegulationProduct int32

const (
	RegulationProduct_REGULATION_PRODUCT_UNSPECIFIED          RegulationProduct = 0  // 未指定
	RegulationProduct_REGULATION_PRODUCT_ALL                  RegulationProduct = 1  // 全対象
	RegulationProduct_REGULATION_PRODUCT_STOCK                RegulationProduct = 2  // 現物
	RegulationProduct_REGULATION_PRODUCT_MARGIN_ENTRY_SYSTEM  RegulationProduct = 3  // 信用新規（制度）
	RegulationProduct_REGULATION_PRODUCT_MARGIN_ENTRY_GENERAL RegulationProduct = 4  // 信用新規（一般）
	RegulationProduct_REGULATION_PRODUCT_ENTRY                RegulationProduct = 5  // 新規
	RegulationProduct_REGULATION_PRODUCT_MARGIN_EXIT_SYSTEM   RegulationProduct = 6  // 信用返済（制度）
	RegulationProduct_REGULATION_PRODUCT_MARGIN_EXIT_GENERAL  RegulationProduct = 7  // 信用返済（一般）
	RegulationProduct_REGULATION_PRODUCT_EXIT                 RegulationProduct = 8  // 返済
	RegulationProduct_REGULATION_PRODUCT_RECEIPT              RegulationProduct = 9  // 品受
	RegulationProduct_REGULATION_PRODUCT_DELIVERY             RegulationProduct = 10 // 品渡
)

// Enum value maps for RegulationProduct.
var (
	RegulationProduct_name = map[int32]string{
		0:  "REGULATION_PRODUCT_UNSPECIFIED",
		1:  "REGULATION_PRODUCT_ALL",
		2:  "REGULATION_PRODUCT_STOCK",
		3:  "REGULATION_PRODUCT_MARGIN_ENTRY_SYSTEM",
		4:  "REGULATION_PRODUCT_MARGIN_ENTRY_GENERAL",
		5:  "REGULATION_PRODUCT_ENTRY",
		6:  "REGULATION_PRODUCT_MARGIN_EXIT_SYSTEM",
		7:  "REGULATION_PRODUCT_MARGIN_EXIT_GENERAL",
		8:  "REGULATION_PRODUCT_EXIT",
		9:  "REGULATION_PRODUCT_RECEIPT",
		10: "REGULATION_PRODUCT_DELIVERY",
	}
	RegulationProduct_value = map[string]int32{
		"REGULATION_PRODUCT_UNSPECIFIED":          0,
		"REGULATION_PRODUCT_ALL":                  1,
		"REGULATION_PRODUCT_STOCK":                2,
		"REGULATION_PRODUCT_MARGIN_ENTRY_SYSTEM":  3,
		"REGULATION_PRODUCT_MARGIN_ENTRY_GENERAL": 4,
		"REGULATION_PRODUCT_ENTRY":                5,
		"REGULATION_PRODUCT_MARGIN_EXIT_SYSTEM":   6,
		"REGULATION_PRODUCT_MARGIN_EXIT_GENERAL":  7,
		"REGULATION_PRODUCT_EXIT":                 8,
		"REGULATION_PRODUCT_RECEIPT":              9,
		"REGULATION_PRODUCT_DELIVERY":             10,
	}
)

func (x RegulationProduct) Enum() *RegulationProduct {
	p := new(RegulationProduct)
	*p = x
	return p
}

func (x RegulationProduct) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegulationProduct) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[31].Descriptor()
}

func (RegulationProduct) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[31]
}

func (x RegulationProduct) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegulationProduct.Descriptor instead.
func (RegulationProduct) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{31}
}

// 規制売買
type RegulationSide int32

const (
	RegulationSide_REGULATION_SIDE_UNSPECIFIED RegulationSide = 0 // 未指定
	RegulationSide_REGULATION_SIDE_ALL         RegulationSide = 1 // 全対象
	RegulationSide_REGULATION_SIDE_BUY         RegulationSide = 2 // 買い
	RegulationSide_REGULATION_SIDE_SELL        RegulationSide = 3 // 売り
)

// Enum value maps for RegulationSide.
var (
	RegulationSide_name = map[int32]string{
		0: "REGULATION_SIDE_UNSPECIFIED",
		1: "REGULATION_SIDE_ALL",
		2: "REGULATION_SIDE_BUY",
		3: "REGULATION_SIDE_SELL",
	}
	RegulationSide_value = map[string]int32{
		"REGULATION_SIDE_UNSPECIFIED": 0,
		"REGULATION_SIDE_ALL":         1,
		"REGULATION_SIDE_BUY":         2,
		"REGULATION_SIDE_SELL":        3,
	}
)

func (x RegulationSide) Enum() *RegulationSide {
	p := new(RegulationSide)
	*p = x
	return p
}

func (x RegulationSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegulationSide) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[32].Descriptor()
}

func (RegulationSide) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[32]
}

func (x RegulationSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegulationSide.Descriptor instead.
func (RegulationSide) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{32}
}

// コンプライアンスレベル
type RegulationLevel int32

const (
	RegulationLevel_REGULATION_LEVEL_UNSPECIFIED RegulationLevel = 0 // 未指定
	RegulationLevel_REGULATION_LEVEL_WARNING     RegulationLevel = 1 // ワーニング
	RegulationLevel_REGULATION_LEVEL_ERROR       RegulationLevel = 2 // エラー
)

// Enum value maps for RegulationLevel.
var (
	RegulationLevel_name = map[int32]string{
		0: "REGULATION_LEVEL_UNSPECIFIED",
		1: "REGULATION_LEVEL_WARNING",
		2: "REGULATION_LEVEL_ERROR",
	}
	RegulationLevel_value = map[string]int32{
		"REGULATION_LEVEL_UNSPECIFIED": 0,
		"REGULATION_LEVEL_WARNING":     1,
		"REGULATION_LEVEL_ERROR":       2,
	}
)

func (x RegulationLevel) Enum() *RegulationLevel {
	p := new(RegulationLevel)
	*p = x
	return p
}

func (x RegulationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegulationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[33].Descriptor()
}

func (RegulationLevel) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[33]
}

func (x RegulationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegulationLevel.Descriptor instead.
func (RegulationLevel) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{33}
}

// トリガ種別
type TriggerType int32

const (
	TriggerType_TRIGGER_TYPE_UNSPECIFIED  TriggerType = 0 // 未指定
	TriggerType_TRIGGER_TYPE_ORDER_SYMBOL TriggerType = 1 // 発注銘柄
	TriggerType_TRIGGER_TYPE_NK225        TriggerType = 2 // NK225指数
	TriggerType_TRIGGER_TYPE_TOPIX        TriggerType = 3 // TOPIX指数
)

// Enum value maps for TriggerType.
var (
	TriggerType_name = map[int32]string{
		0: "TRIGGER_TYPE_UNSPECIFIED",
		1: "TRIGGER_TYPE_ORDER_SYMBOL",
		2: "TRIGGER_TYPE_NK225",
		3: "TRIGGER_TYPE_TOPIX",
	}
	TriggerType_value = map[string]int32{
		"TRIGGER_TYPE_UNSPECIFIED":  0,
		"TRIGGER_TYPE_ORDER_SYMBOL": 1,
		"TRIGGER_TYPE_NK225":        2,
		"TRIGGER_TYPE_TOPIX":        3,
	}
)

func (x TriggerType) Enum() *TriggerType {
	p := new(TriggerType)
	*p = x
	return p
}

func (x TriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[34].Descriptor()
}

func (TriggerType) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[34]
}

func (x TriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerType.Descriptor instead.
func (TriggerType) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{34}
}

// 以上・以下
type UnderOver int32

const (
	UnderOver_UNDER_OVER_UNSPECIFIED UnderOver = 0 // 未指定
	UnderOver_UNDER_OVER_UNDER       UnderOver = 1 // 以下
	UnderOver_UNDER_OVER_OVER        UnderOver = 2 // 以上
)

// Enum value maps for UnderOver.
var (
	UnderOver_name = map[int32]string{
		0: "UNDER_OVER_UNSPECIFIED",
		1: "UNDER_OVER_UNDER",
		2: "UNDER_OVER_OVER",
	}
	UnderOver_value = map[string]int32{
		"UNDER_OVER_UNSPECIFIED": 0,
		"UNDER_OVER_UNDER":       1,
		"UNDER_OVER_OVER":        2,
	}
)

func (x UnderOver) Enum() *UnderOver {
	p := new(UnderOver)
	*p = x
	return p
}

func (x UnderOver) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnderOver) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[35].Descriptor()
}

func (UnderOver) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[35]
}

func (x UnderOver) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnderOver.Descriptor instead.
func (UnderOver) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{35}
}

// ヒット後執行条件(現物)
type StockAfterHitOrderType int32

const (
	StockAfterHitOrderType_STOCK_AFTER_HIT_ORDER_TYPE_UNSPECIFIED StockAfterHitOrderType = 0 // 未指定
	StockAfterHitOrderType_STOCK_AFTER_HIT_ORDER_TYPE_MO          StockAfterHitOrderType = 1 // 成行
	StockAfterHitOrderType_STOCK_AFTER_HIT_ORDER_TYPE_LO          StockAfterHitOrderType = 2 // 指値
	StockAfterHitOrderType_STOCK_AFTER_HIT_ORDER_TYPE_FUNARI      StockAfterHitOrderType = 3 // 不成
)

// Enum value maps for StockAfterHitOrderType.
var (
	StockAfterHitOrderType_name = map[int32]string{
		0: "STOCK_AFTER_HIT_ORDER_TYPE_UNSPECIFIED",
		1: "STOCK_AFTER_HIT_ORDER_TYPE_MO",
		2: "STOCK_AFTER_HIT_ORDER_TYPE_LO",
		3: "STOCK_AFTER_HIT_ORDER_TYPE_FUNARI",
	}
	StockAfterHitOrderType_value = map[string]int32{
		"STOCK_AFTER_HIT_ORDER_TYPE_UNSPECIFIED": 0,
		"STOCK_AFTER_HIT_ORDER_TYPE_MO":          1,
		"STOCK_AFTER_HIT_ORDER_TYPE_LO":          2,
		"STOCK_AFTER_HIT_ORDER_TYPE_FUNARI":      3,
	}
)

func (x StockAfterHitOrderType) Enum() *StockAfterHitOrderType {
	p := new(StockAfterHitOrderType)
	*p = x
	return p
}

func (x StockAfterHitOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StockAfterHitOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[36].Descriptor()
}

func (StockAfterHitOrderType) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[36]
}

func (x StockAfterHitOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StockAfterHitOrderType.Descriptor instead.
func (StockAfterHitOrderType) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{36}
}

// ヒット後執行条件(先物)
type FutureAfterHitOrderType int32

const (
	FutureAfterHitOrderType_FUTURE_AFTER_HIT_ORDER_TYPE_UNSPECIFIED FutureAfterHitOrderType = 0 // 未指定
	FutureAfterHitOrderType_FUTURE_AFTER_HIT_ORDER_TYPE_MO          FutureAfterHitOrderType = 1 // 成行
	FutureAfterHitOrderType_FUTURE_AFTER_HIT_ORDER_TYPE_LO          FutureAfterHitOrderType = 2 // 指値
)

// Enum value maps for FutureAfterHitOrderType.
var (
	FutureAfterHitOrderType_name = map[int32]string{
		0: "FUTURE_AFTER_HIT_ORDER_TYPE_UNSPECIFIED",
		1: "FUTURE_AFTER_HIT_ORDER_TYPE_MO",
		2: "FUTURE_AFTER_HIT_ORDER_TYPE_LO",
	}
	FutureAfterHitOrderType_value = map[string]int32{
		"FUTURE_AFTER_HIT_ORDER_TYPE_UNSPECIFIED": 0,
		"FUTURE_AFTER_HIT_ORDER_TYPE_MO":          1,
		"FUTURE_AFTER_HIT_ORDER_TYPE_LO":          2,
	}
)

func (x FutureAfterHitOrderType) Enum() *FutureAfterHitOrderType {
	p := new(FutureAfterHitOrderType)
	*p = x
	return p
}

func (x FutureAfterHitOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FutureAfterHitOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[37].Descriptor()
}

func (FutureAfterHitOrderType) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[37]
}

func (x FutureAfterHitOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FutureAfterHitOrderType.Descriptor instead.
func (FutureAfterHitOrderType) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{37}
}

// ヒット後執行条件(オプション)
type OptionAfterHitOrderType int32

const (
	OptionAfterHitOrderType_OPTION_AFTER_HIT_ORDER_TYPE_UNSPECIFIED OptionAfterHitOrderType = 0 // 未指定
	OptionAfterHitOrderType_OPTION_AFTER_HIT_ORDER_TYPE_MO          OptionAfterHitOrderType = 1 // 成行
	OptionAfterHitOrderType_OPTION_AFTER_HIT_ORDER_TYPE_LO          OptionAfterHitOrderType = 2 // 指値
)

// Enum value maps for OptionAfterHitOrderType.
var (
	OptionAfterHitOrderType_name = map[int32]string{
		0: "OPTION_AFTER_HIT_ORDER_TYPE_UNSPECIFIED",
		1: "OPTION_AFTER_HIT_ORDER_TYPE_MO",
		2: "OPTION_AFTER_HIT_ORDER_TYPE_LO",
	}
	OptionAfterHitOrderType_value = map[string]int32{
		"OPTION_AFTER_HIT_ORDER_TYPE_UNSPECIFIED": 0,
		"OPTION_AFTER_HIT_ORDER_TYPE_MO":          1,
		"OPTION_AFTER_HIT_ORDER_TYPE_LO":          2,
	}
)

func (x OptionAfterHitOrderType) Enum() *OptionAfterHitOrderType {
	p := new(OptionAfterHitOrderType)
	*p = x
	return p
}

func (x OptionAfterHitOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionAfterHitOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[38].Descriptor()
}

func (OptionAfterHitOrderType) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[38]
}

func (x OptionAfterHitOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptionAfterHitOrderType.Descriptor instead.
func (OptionAfterHitOrderType) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{38}
}

// プレミアム料入力区分
type MarginPremiumType int32

const (
	MarginPremiumType_MARGIN_PREMIUM_TYPE_UNSPECIFIED MarginPremiumType = 0 // 未指定
	MarginPremiumType_MARGIN_PREMIUM_TYPE_NOTHING     MarginPremiumType = 1 // プレミアム料がない銘柄
	MarginPremiumType_MARGIN_PREMIUM_TYPE_FIXED       MarginPremiumType = 2 // プレミアム料が固定の銘柄
	MarginPremiumType_MARGIN_PREMIUM_TYPE_AUCTION     MarginPremiumType = 3 // プレミアム料が入札で決定する銘柄
)

// Enum value maps for MarginPremiumType.
var (
	MarginPremiumType_name = map[int32]string{
		0: "MARGIN_PREMIUM_TYPE_UNSPECIFIED",
		1: "MARGIN_PREMIUM_TYPE_NOTHING",
		2: "MARGIN_PREMIUM_TYPE_FIXED",
		3: "MARGIN_PREMIUM_TYPE_AUCTION",
	}
	MarginPremiumType_value = map[string]int32{
		"MARGIN_PREMIUM_TYPE_UNSPECIFIED": 0,
		"MARGIN_PREMIUM_TYPE_NOTHING":     1,
		"MARGIN_PREMIUM_TYPE_FIXED":       2,
		"MARGIN_PREMIUM_TYPE_AUCTION":     3,
	}
)

func (x MarginPremiumType) Enum() *MarginPremiumType {
	p := new(MarginPremiumType)
	*p = x
	return p
}

func (x MarginPremiumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarginPremiumType) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[39].Descriptor()
}

func (MarginPremiumType) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[39]
}

func (x MarginPremiumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarginPremiumType.Descriptor instead.
func (MarginPremiumType) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{39}
}

// トークン取得リクエスト
type GetTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTokenRequest) Reset() {
	*x = GetTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenRequest) ProtoMessage() {}

func (x *GetTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenRequest.ProtoReflect.Descriptor instead.
func (*GetTokenRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{0}
}

// トークン再取得リクエスト
type RefreshTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshTokenRequest) Reset() {
	*x = RefreshTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenRequest) ProtoMessage() {}

func (x *RefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*RefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{1}
}

// 注文発注（現物）リクエスト
type SendStockOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// パスワード
	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	// 銘柄コード
	SymbolCode string `protobuf:"bytes,2,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 市場コード
	Exchange StockExchange `protobuf:"varint,3,opt,name=exchange,proto3,enum=kabuspb.StockExchange" json:"exchange,omitempty"`
	// 売買区分
	Side Side `protobuf:"varint,4,opt,name=side,proto3,enum=kabuspb.Side" json:"side,omitempty"`
	// 受渡区分
	DeliveryType DeliveryType `protobuf:"varint,5,opt,name=delivery_type,json=deliveryType,proto3,enum=kabuspb.DeliveryType" json:"delivery_type,omitempty"`
	// 資産区分（預り区分）
	FundType FundType `protobuf:"varint,6,opt,name=fund_type,json=fundType,proto3,enum=kabuspb.FundType" json:"fund_type,omitempty"`
	// 口座種別
	AccountType AccountType `protobuf:"varint,7,opt,name=account_type,json=accountType,proto3,enum=kabuspb.AccountType" json:"account_type,omitempty"`
	// 注文数量
	Quantity float64 `protobuf:"fixed64,8,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// 執行条件
	OrderType StockOrderType `protobuf:"varint,9,opt,name=order_type,json=orderType,proto3,enum=kabuspb.StockOrderType" json:"order_type,omitempty"`
	// 注文価格
	Price float64 `protobuf:"fixed64,10,opt,name=price,proto3" json:"price,omitempty"`
	// 注文有効期限
	//   ゼロ値なら当日
	//   引けまでの間 : 当日
	//   引け後 : 翌取引所営業日
	//   休前日 : 休日明けの取引所営業日
	ExpireDay *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=expire_day,json=expireDay,proto3" json:"expire_day,omitempty"`
	// 逆指値条件
	StopOrder *StockStopOrder `protobuf:"bytes,12,opt,name=stop_order,json=stopOrder,proto3" json:"stop_order,omitempty"`
	// 仮想売買
	IsVirtual bool `protobuf:"varint,99,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual,omitempty"`
}

func (x *SendStockOrderRequest) Reset() {
	*x = SendStockOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendStockOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendStockOrderRequest) ProtoMessage() {}

func (x *SendStockOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendStockOrderRequest.ProtoReflect.Descriptor instead.
func (*SendStockOrderRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{2}
}

func (x *SendStockOrderRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SendStockOrderRequest) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *SendStockOrderRequest) GetExchange() StockExchange {
	if x != nil {
		return x.Exchange
	}
	return StockExchange_STOCK_EXCHANGE_UNSPECIFIED
}

func (x *SendStockOrderRequest) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (x *SendStockOrderRequest) GetDeliveryType() DeliveryType {
	if x != nil {
		return x.DeliveryType
	}
	return DeliveryType_DELIVERY_TYPE_UNSPECIFIED
}

func (x *SendStockOrderRequest) GetFundType() FundType {
	if x != nil {
		return x.FundType
	}
	return FundType_FUND_TYPE_UNSPECIFIED
}

func (x *SendStockOrderRequest) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *SendStockOrderRequest) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *SendStockOrderRequest) GetOrderType() StockOrderType {
	if x != nil {
		return x.OrderType
	}
	return StockOrderType_STOCK_ORDER_TYPE_UNSPECIFIED
}

func (x *SendStockOrderRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SendStockOrderRequest) GetExpireDay() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireDay
	}
	return nil
}

func (x *SendStockOrderRequest) GetStopOrder() *StockStopOrder {
	if x != nil {
		return x.StopOrder
	}
	return nil
}

func (x *SendStockOrderRequest) GetIsVirtual() bool {
	if x != nil {
		return x.IsVirtual
	}
	return false
}

// 逆指値条件(現物)
type StockStopOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// トリガ銘柄
	TriggerType TriggerType `protobuf:"varint,1,opt,name=trigger_type,json=triggerType,proto3,enum=kabuspb.TriggerType" json:"trigger_type,omitempty"`
	// トリガ価格
	TriggerPrice float64 `protobuf:"fixed64,2,opt,name=trigger_price,json=triggerPrice,proto3" json:"trigger_price,omitempty"`
	// 以上・以下
	UnderOver UnderOver `protobuf:"varint,3,opt,name=under_over,json=underOver,proto3,enum=kabuspb.UnderOver" json:"under_over,omitempty"`
	// ヒット後執行条件
	AfterHitOrderType StockAfterHitOrderType `protobuf:"varint,4,opt,name=after_hit_order_type,json=afterHitOrderType,proto3,enum=kabuspb.StockAfterHitOrderType" json:"after_hit_order_type,omitempty"`
	// ヒット後注文価格
	AfterHitPrice float64 `protobuf:"fixed64,5,opt,name=after_hit_price,json=afterHitPrice,proto3" json:"after_hit_price,omitempty"`
}

func (x *StockStopOrder) Reset() {
	*x = StockStopOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockStopOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockStopOrder) ProtoMessage() {}

func (x *StockStopOrder) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockStopOrder.ProtoReflect.Descriptor instead.
func (*StockStopOrder) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{3}
}

func (x *StockStopOrder) GetTriggerType() TriggerType {
	if x != nil {
		return x.TriggerType
	}
	return TriggerType_TRIGGER_TYPE_UNSPECIFIED
}

func (x *StockStopOrder) GetTriggerPrice() float64 {
	if x != nil {
		return x.TriggerPrice
	}
	return 0
}

func (x *StockStopOrder) GetUnderOver() UnderOver {
	if x != nil {
		return x.UnderOver
	}
	return UnderOver_UNDER_OVER_UNSPECIFIED
}

func (x *StockStopOrder) GetAfterHitOrderType() StockAfterHitOrderType {
	if x != nil {
		return x.AfterHitOrderType
	}
	return StockAfterHitOrderType_STOCK_AFTER_HIT_ORDER_TYPE_UNSPECIFIED
}

func (x *StockStopOrder) GetAfterHitPrice() float64 {
	if x != nil {
		return x.AfterHitPrice
	}
	return 0
}

// 注文発注（信用）リクエスト
type SendMarginOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// パスワード
	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	// 銘柄コード
	SymbolCode string `protobuf:"bytes,2,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 市場コード
	Exchange StockExchange `protobuf:"varint,3,opt,name=exchange,proto3,enum=kabuspb.StockExchange" json:"exchange,omitempty"`
	// 売買区分
	Side Side `protobuf:"varint,4,opt,name=side,proto3,enum=kabuspb.Side" json:"side,omitempty"`
	// 取引区分
	TradeType TradeType `protobuf:"varint,5,opt,name=trade_type,json=tradeType,proto3,enum=kabuspb.TradeType" json:"trade_type,omitempty"`
	// 信用取引区分
	MarginTradeType MarginTradeType `protobuf:"varint,6,opt,name=margin_trade_type,json=marginTradeType,proto3,enum=kabuspb.MarginTradeType" json:"margin_trade_type,omitempty"`
	// プレミアム料(円)
	MarginPremiumUnit float64 `protobuf:"fixed64,15,opt,name=margin_premium_unit,json=marginPremiumUnit,proto3" json:"margin_premium_unit,omitempty"`
	// 受渡区分
	DeliveryType DeliveryType `protobuf:"varint,7,opt,name=delivery_type,json=deliveryType,proto3,enum=kabuspb.DeliveryType" json:"delivery_type,omitempty"`
	// 口座種別
	AccountType AccountType `protobuf:"varint,8,opt,name=account_type,json=accountType,proto3,enum=kabuspb.AccountType" json:"account_type,omitempty"`
	// 注文数量
	Quantity float64 `protobuf:"fixed64,9,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// 返済建玉指定
	ClosePositions []*ClosePosition `protobuf:"bytes,10,rep,name=close_positions,json=closePositions,proto3" json:"close_positions,omitempty"`
	// 執行条件
	OrderType StockOrderType `protobuf:"varint,11,opt,name=order_type,json=orderType,proto3,enum=kabuspb.StockOrderType" json:"order_type,omitempty"`
	// 注文価格
	Price float64 `protobuf:"fixed64,12,opt,name=price,proto3" json:"price,omitempty"`
	// 注文有効期限
	//   ゼロ値なら当日
	//   引けまでの間 : 当日
	//   引け後 : 翌取引所営業日
	//   休前日 : 休日明けの取引所営業日
	ExpireDay *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=expire_day,json=expireDay,proto3" json:"expire_day,omitempty"`
	// 逆指値条件
	StopOrder *MarginStopOrder `protobuf:"bytes,14,opt,name=stop_order,json=stopOrder,proto3" json:"stop_order,omitempty"`
	// 仮想売買
	IsVirtual bool `protobuf:"varint,99,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual,omitempty"`
}

func (x *SendMarginOrderRequest) Reset() {
	*x = SendMarginOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMarginOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMarginOrderRequest) ProtoMessage() {}

func (x *SendMarginOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMarginOrderRequest.ProtoReflect.Descriptor instead.
func (*SendMarginOrderRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{4}
}

func (x *SendMarginOrderRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SendMarginOrderRequest) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *SendMarginOrderRequest) GetExchange() StockExchange {
	if x != nil {
		return x.Exchange
	}
	return StockExchange_STOCK_EXCHANGE_UNSPECIFIED
}

func (x *SendMarginOrderRequest) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (x *SendMarginOrderRequest) GetTradeType() TradeType {
	if x != nil {
		return x.TradeType
	}
	return TradeType_TRADE_TYPE_UNSPECIFIED
}

func (x *SendMarginOrderRequest) GetMarginTradeType() MarginTradeType {
	if x != nil {
		return x.MarginTradeType
	}
	return MarginTradeType_MARGIN_TRADE_TYPE_UNSPECIFIED
}

func (x *SendMarginOrderRequest) GetMarginPremiumUnit() float64 {
	if x != nil {
		return x.MarginPremiumUnit
	}
	return 0
}

func (x *SendMarginOrderRequest) GetDeliveryType() DeliveryType {
	if x != nil {
		return x.DeliveryType
	}
	return DeliveryType_DELIVERY_TYPE_UNSPECIFIED
}

func (x *SendMarginOrderRequest) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *SendMarginOrderRequest) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *SendMarginOrderRequest) GetClosePositions() []*ClosePosition {
	if x != nil {
		return x.ClosePositions
	}
	return nil
}

func (x *SendMarginOrderRequest) GetOrderType() StockOrderType {
	if x != nil {
		return x.OrderType
	}
	return StockOrderType_STOCK_ORDER_TYPE_UNSPECIFIED
}

func (x *SendMarginOrderRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SendMarginOrderRequest) GetExpireDay() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireDay
	}
	return nil
}

func (x *SendMarginOrderRequest) GetStopOrder() *MarginStopOrder {
	if x != nil {
		return x.StopOrder
	}
	return nil
}

func (x *SendMarginOrderRequest) GetIsVirtual() bool {
	if x != nil {
		return x.IsVirtual
	}
	return false
}

// 逆指値条件(信用)
type MarginStopOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// トリガ銘柄
	TriggerType TriggerType `protobuf:"varint,1,opt,name=trigger_type,json=triggerType,proto3,enum=kabuspb.TriggerType" json:"trigger_type,omitempty"`
	// トリガ価格
	TriggerPrice float64 `protobuf:"fixed64,2,opt,name=trigger_price,json=triggerPrice,proto3" json:"trigger_price,omitempty"`
	// 以上・以下
	UnderOver UnderOver `protobuf:"varint,3,opt,name=under_over,json=underOver,proto3,enum=kabuspb.UnderOver" json:"under_over,omitempty"`
	// ヒット後執行条件
	AfterHitOrderType StockAfterHitOrderType `protobuf:"varint,4,opt,name=after_hit_order_type,json=afterHitOrderType,proto3,enum=kabuspb.StockAfterHitOrderType" json:"after_hit_order_type,omitempty"`
	// ヒット後注文価格
	AfterHitPrice float64 `protobuf:"fixed64,5,opt,name=after_hit_price,json=afterHitPrice,proto3" json:"after_hit_price,omitempty"`
}

func (x *MarginStopOrder) Reset() {
	*x = MarginStopOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginStopOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginStopOrder) ProtoMessage() {}

func (x *MarginStopOrder) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginStopOrder.ProtoReflect.Descriptor instead.
func (*MarginStopOrder) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{5}
}

func (x *MarginStopOrder) GetTriggerType() TriggerType {
	if x != nil {
		return x.TriggerType
	}
	return TriggerType_TRIGGER_TYPE_UNSPECIFIED
}

func (x *MarginStopOrder) GetTriggerPrice() float64 {
	if x != nil {
		return x.TriggerPrice
	}
	return 0
}

func (x *MarginStopOrder) GetUnderOver() UnderOver {
	if x != nil {
		return x.UnderOver
	}
	return UnderOver_UNDER_OVER_UNSPECIFIED
}

func (x *MarginStopOrder) GetAfterHitOrderType() StockAfterHitOrderType {
	if x != nil {
		return x.AfterHitOrderType
	}
	return StockAfterHitOrderType_STOCK_AFTER_HIT_ORDER_TYPE_UNSPECIFIED
}

func (x *MarginStopOrder) GetAfterHitPrice() float64 {
	if x != nil {
		return x.AfterHitPrice
	}
	return 0
}

// 注文発注（先物）リクエスト
type SendFutureOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// パスワード
	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	// 銘柄コード
	SymbolCode string `protobuf:"bytes,2,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 市場コード
	Exchange FutureExchange `protobuf:"varint,3,opt,name=exchange,proto3,enum=kabuspb.FutureExchange" json:"exchange,omitempty"`
	// 取引区分
	TradeType TradeType `protobuf:"varint,4,opt,name=trade_type,json=tradeType,proto3,enum=kabuspb.TradeType" json:"trade_type,omitempty"`
	// 有効期間条件
	TimeInForce TimeInForce `protobuf:"varint,5,opt,name=time_in_force,json=timeInForce,proto3,enum=kabuspb.TimeInForce" json:"time_in_force,omitempty"`
	// 売買区分
	Side Side `protobuf:"varint,6,opt,name=side,proto3,enum=kabuspb.Side" json:"side,omitempty"`
	// 注文数量
	Quantity float64 `protobuf:"fixed64,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// 返済建玉指定
	ClosePositions []*ClosePosition `protobuf:"bytes,8,rep,name=close_positions,json=closePositions,proto3" json:"close_positions,omitempty"`
	// 執行条件
	OrderType FutureOrderType `protobuf:"varint,9,opt,name=order_type,json=orderType,proto3,enum=kabuspb.FutureOrderType" json:"order_type,omitempty"`
	// 注文価格
	Price float64 `protobuf:"fixed64,10,opt,name=price,proto3" json:"price,omitempty"`
	// 注文有効期限
	//   ゼロ値なら当日
	//   引けまでの間 : 当日
	//   引け後 : 翌取引所営業日
	//   休前日 : 休日明けの取引所営業日
	ExpireDay *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=expire_day,json=expireDay,proto3" json:"expire_day,omitempty"`
	// 逆指値条件
	StopOrder *FutureStopOrder `protobuf:"bytes,12,opt,name=stop_order,json=stopOrder,proto3" json:"stop_order,omitempty"`
}

func (x *SendFutureOrderRequest) Reset() {
	*x = SendFutureOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendFutureOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFutureOrderRequest) ProtoMessage() {}

func (x *SendFutureOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFutureOrderRequest.ProtoReflect.Descriptor instead.
func (*SendFutureOrderRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{6}
}

func (x *SendFutureOrderRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SendFutureOrderRequest) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *SendFutureOrderRequest) GetExchange() FutureExchange {
	if x != nil {
		return x.Exchange
	}
	return FutureExchange_FUTURE_EXCHANGE_UNSPECIFIED
}

func (x *SendFutureOrderRequest) GetTradeType() TradeType {
	if x != nil {
		return x.TradeType
	}
	return TradeType_TRADE_TYPE_UNSPECIFIED
}

func (x *SendFutureOrderRequest) GetTimeInForce() TimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForce_TIME_IN_FORCE_UNSPECIFIED
}

func (x *SendFutureOrderRequest) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (x *SendFutureOrderRequest) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *SendFutureOrderRequest) GetClosePositions() []*ClosePosition {
	if x != nil {
		return x.ClosePositions
	}
	return nil
}

func (x *SendFutureOrderRequest) GetOrderType() FutureOrderType {
	if x != nil {
		return x.OrderType
	}
	return FutureOrderType_FUTURE_ORDER_TYPE_UNSPECIFIED
}

func (x *SendFutureOrderRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SendFutureOrderRequest) GetExpireDay() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireDay
	}
	return nil
}

func (x *SendFutureOrderRequest) GetStopOrder() *FutureStopOrder {
	if x != nil {
		return x.StopOrder
	}
	return nil
}

// 逆指値条件(先物)
type FutureStopOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// トリガ価格
	TriggerPrice float64 `protobuf:"fixed64,1,opt,name=trigger_price,json=triggerPrice,proto3" json:"trigger_price,omitempty"`
	// 以上・以下
	UnderOver UnderOver `protobuf:"varint,2,opt,name=under_over,json=underOver,proto3,enum=kabuspb.UnderOver" json:"under_over,omitempty"`
	// ヒット後執行条件
	AfterHitOrderType FutureAfterHitOrderType `protobuf:"varint,3,opt,name=after_hit_order_type,json=afterHitOrderType,proto3,enum=kabuspb.FutureAfterHitOrderType" json:"after_hit_order_type,omitempty"`
	// ヒット後注文価格
	AfterHitPrice float64 `protobuf:"fixed64,4,opt,name=after_hit_price,json=afterHitPrice,proto3" json:"after_hit_price,omitempty"`
}

func (x *FutureStopOrder) Reset() {
	*x = FutureStopOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureStopOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureStopOrder) ProtoMessage() {}

func (x *FutureStopOrder) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureStopOrder.ProtoReflect.Descriptor instead.
func (*FutureStopOrder) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{7}
}

func (x *FutureStopOrder) GetTriggerPrice() float64 {
	if x != nil {
		return x.TriggerPrice
	}
	return 0
}

func (x *FutureStopOrder) GetUnderOver() UnderOver {
	if x != nil {
		return x.UnderOver
	}
	return UnderOver_UNDER_OVER_UNSPECIFIED
}

func (x *FutureStopOrder) GetAfterHitOrderType() FutureAfterHitOrderType {
	if x != nil {
		return x.AfterHitOrderType
	}
	return FutureAfterHitOrderType_FUTURE_AFTER_HIT_ORDER_TYPE_UNSPECIFIED
}

func (x *FutureStopOrder) GetAfterHitPrice() float64 {
	if x != nil {
		return x.AfterHitPrice
	}
	return 0
}

// 注文発注（オプション）リクエスト
type SendOptionOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// パスワード
	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	// 銘柄コード
	SymbolCode string `protobuf:"bytes,2,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 市場コード
	Exchange OptionExchange `protobuf:"varint,3,opt,name=exchange,proto3,enum=kabuspb.OptionExchange" json:"exchange,omitempty"`
	// 取引区分
	TradeType TradeType `protobuf:"varint,4,opt,name=trade_type,json=tradeType,proto3,enum=kabuspb.TradeType" json:"trade_type,omitempty"`
	// 有効期間条件
	TimeInForce TimeInForce `protobuf:"varint,5,opt,name=time_in_force,json=timeInForce,proto3,enum=kabuspb.TimeInForce" json:"time_in_force,omitempty"`
	// 売買区分
	Side Side `protobuf:"varint,6,opt,name=side,proto3,enum=kabuspb.Side" json:"side,omitempty"`
	// 注文数量
	Quantity float64 `protobuf:"fixed64,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// 返済建玉指定
	ClosePositions []*ClosePosition `protobuf:"bytes,8,rep,name=close_positions,json=closePositions,proto3" json:"close_positions,omitempty"`
	// 執行条件
	OrderType OptionOrderType `protobuf:"varint,9,opt,name=order_type,json=orderType,proto3,enum=kabuspb.OptionOrderType" json:"order_type,omitempty"`
	// 注文価格
	Price float64 `protobuf:"fixed64,10,opt,name=price,proto3" json:"price,omitempty"`
	// 注文有効期限
	//   ゼロ値なら当日
	//   引けまでの間 : 当日
	//   引け後 : 翌取引所営業日
	//   休前日 : 休日明けの取引所営業日
	ExpireDay *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=expire_day,json=expireDay,proto3" json:"expire_day,omitempty"`
	// 逆指値条件
	StopOrder *OptionStopOrder `protobuf:"bytes,12,opt,name=stop_order,json=stopOrder,proto3" json:"stop_order,omitempty"`
}

func (x *SendOptionOrderRequest) Reset() {
	*x = SendOptionOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendOptionOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendOptionOrderRequest) ProtoMessage() {}

func (x *SendOptionOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendOptionOrderRequest.ProtoReflect.Descriptor instead.
func (*SendOptionOrderRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{8}
}

func (x *SendOptionOrderRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SendOptionOrderRequest) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *SendOptionOrderRequest) GetExchange() OptionExchange {
	if x != nil {
		return x.Exchange
	}
	return OptionExchange_OPTION_EXCHANGE_UNSPECIFIED
}

func (x *SendOptionOrderRequest) GetTradeType() TradeType {
	if x != nil {
		return x.TradeType
	}
	return TradeType_TRADE_TYPE_UNSPECIFIED
}

func (x *SendOptionOrderRequest) GetTimeInForce() TimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForce_TIME_IN_FORCE_UNSPECIFIED
}

func (x *SendOptionOrderRequest) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (x *SendOptionOrderRequest) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *SendOptionOrderRequest) GetClosePositions() []*ClosePosition {
	if x != nil {
		return x.ClosePositions
	}
	return nil
}

func (x *SendOptionOrderRequest) GetOrderType() OptionOrderType {
	if x != nil {
		return x.OrderType
	}
	return OptionOrderType_OPTION_ORDER_TYPE_UNSPECIFIED
}

func (x *SendOptionOrderRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SendOptionOrderRequest) GetExpireDay() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireDay
	}
	return nil
}

func (x *SendOptionOrderRequest) GetStopOrder() *OptionStopOrder {
	if x != nil {
		return x.StopOrder
	}
	return nil
}

// 逆指値条件(オプション)
type OptionStopOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// トリガ価格
	TriggerPrice float64 `protobuf:"fixed64,1,opt,name=trigger_price,json=triggerPrice,proto3" json:"trigger_price,omitempty"`
	// 以上・以下
	UnderOver UnderOver `protobuf:"varint,2,opt,name=under_over,json=underOver,proto3,enum=kabuspb.UnderOver" json:"under_over,omitempty"`
	// ヒット後執行条件
	AfterHitOrderType OptionAfterHitOrderType `protobuf:"varint,3,opt,name=after_hit_order_type,json=afterHitOrderType,proto3,enum=kabuspb.OptionAfterHitOrderType" json:"after_hit_order_type,omitempty"`
	// ヒット後注文価格
	AfterHitPrice float64 `protobuf:"fixed64,4,opt,name=after_hit_price,json=afterHitPrice,proto3" json:"after_hit_price,omitempty"`
}

func (x *OptionStopOrder) Reset() {
	*x = OptionStopOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionStopOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionStopOrder) ProtoMessage() {}

func (x *OptionStopOrder) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionStopOrder.ProtoReflect.Descriptor instead.
func (*OptionStopOrder) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{9}
}

func (x *OptionStopOrder) GetTriggerPrice() float64 {
	if x != nil {
		return x.TriggerPrice
	}
	return 0
}

func (x *OptionStopOrder) GetUnderOver() UnderOver {
	if x != nil {
		return x.UnderOver
	}
	return UnderOver_UNDER_OVER_UNSPECIFIED
}

func (x *OptionStopOrder) GetAfterHitOrderType() OptionAfterHitOrderType {
	if x != nil {
		return x.AfterHitOrderType
	}
	return OptionAfterHitOrderType_OPTION_AFTER_HIT_ORDER_TYPE_UNSPECIFIED
}

func (x *OptionStopOrder) GetAfterHitPrice() float64 {
	if x != nil {
		return x.AfterHitPrice
	}
	return 0
}

// 返済建玉指定
type ClosePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返済建玉ID
	ExecutionId string `protobuf:"bytes,1,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	// 返済建玉数量
	Quantity float64 `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *ClosePosition) Reset() {
	*x = ClosePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClosePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosePosition) ProtoMessage() {}

func (x *ClosePosition) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosePosition.ProtoReflect.Descriptor instead.
func (*ClosePosition) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{10}
}

func (x *ClosePosition) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *ClosePosition) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// 注文取消
type CancelOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// パスワード
	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	// 注文番号
	OrderId string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// 仮想売買
	IsVirtual bool `protobuf:"varint,99,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual,omitempty"`
}

func (x *CancelOrderRequest) Reset() {
	*x = CancelOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderRequest) ProtoMessage() {}

func (x *CancelOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderRequest.ProtoReflect.Descriptor instead.
func (*CancelOrderRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{11}
}

func (x *CancelOrderRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CancelOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *CancelOrderRequest) GetIsVirtual() bool {
	if x != nil {
		return x.IsVirtual
	}
	return false
}

// 取引余力（現物）リクエスト
type GetStockWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 銘柄コード
	//   銘柄コードが空なら銘柄指定せずに取得する
	SymbolCode string `protobuf:"bytes,1,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 市場コード
	Exchange StockExchange `protobuf:"varint,2,opt,name=exchange,proto3,enum=kabuspb.StockExchange" json:"exchange,omitempty"`
}

func (x *GetStockWalletRequest) Reset() {
	*x = GetStockWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStockWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStockWalletRequest) ProtoMessage() {}

func (x *GetStockWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStockWalletRequest.ProtoReflect.Descriptor instead.
func (*GetStockWalletRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{12}
}

func (x *GetStockWalletRequest) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *GetStockWalletRequest) GetExchange() StockExchange {
	if x != nil {
		return x.Exchange
	}
	return StockExchange_STOCK_EXCHANGE_UNSPECIFIED
}

// 取引余力（信用）リクエスト
type GetMarginWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 銘柄コード
	//   銘柄コードが空なら銘柄指定せずに取得する
	SymbolCode string `protobuf:"bytes,1,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 市場コード
	Exchange StockExchange `protobuf:"varint,2,opt,name=exchange,proto3,enum=kabuspb.StockExchange" json:"exchange,omitempty"`
}

func (x *GetMarginWalletRequest) Reset() {
	*x = GetMarginWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarginWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarginWalletRequest) ProtoMessage() {}

func (x *GetMarginWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarginWalletRequest.ProtoReflect.Descriptor instead.
func (*GetMarginWalletRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{13}
}

func (x *GetMarginWalletRequest) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *GetMarginWalletRequest) GetExchange() StockExchange {
	if x != nil {
		return x.Exchange
	}
	return StockExchange_STOCK_EXCHANGE_UNSPECIFIED
}

// 取引余力（先物）リクエスト
type GetFutureWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 銘柄コード
	//   銘柄コードが空なら銘柄指定せずに取得する
	SymbolCode string `protobuf:"bytes,1,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 市場コード
	Exchange FutureExchange `protobuf:"varint,2,opt,name=exchange,proto3,enum=kabuspb.FutureExchange" json:"exchange,omitempty"`
}

func (x *GetFutureWalletRequest) Reset() {
	*x = GetFutureWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFutureWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFutureWalletRequest) ProtoMessage() {}

func (x *GetFutureWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFutureWalletRequest.ProtoReflect.Descriptor instead.
func (*GetFutureWalletRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{14}
}

func (x *GetFutureWalletRequest) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *GetFutureWalletRequest) GetExchange() FutureExchange {
	if x != nil {
		return x.Exchange
	}
	return FutureExchange_FUTURE_EXCHANGE_UNSPECIFIED
}

// 取引余力（オプション）リクエスト
type GetOptionWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 銘柄コード
	//   銘柄コードが空なら銘柄指定せずに取得する
	SymbolCode string `protobuf:"bytes,1,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 市場コード
	Exchange OptionExchange `protobuf:"varint,2,opt,name=exchange,proto3,enum=kabuspb.OptionExchange" json:"exchange,omitempty"`
}

func (x *GetOptionWalletRequest) Reset() {
	*x = GetOptionWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOptionWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOptionWalletRequest) ProtoMessage() {}

func (x *GetOptionWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOptionWalletRequest.ProtoReflect.Descriptor instead.
func (*GetOptionWalletRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{15}
}

func (x *GetOptionWalletRequest) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *GetOptionWalletRequest) GetExchange() OptionExchange {
	if x != nil {
		return x.Exchange
	}
	return OptionExchange_OPTION_EXCHANGE_UNSPECIFIED
}

// 時価情報・板情報リクエスト
type GetBoardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolCode string   `protobuf:"bytes,1,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	Exchange   Exchange `protobuf:"varint,2,opt,name=exchange,proto3,enum=kabuspb.Exchange" json:"exchange,omitempty"`
}

func (x *GetBoardRequest) Reset() {
	*x = GetBoardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBoardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBoardRequest) ProtoMessage() {}

func (x *GetBoardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBoardRequest.ProtoReflect.Descriptor instead.
func (*GetBoardRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{16}
}

func (x *GetBoardRequest) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *GetBoardRequest) GetExchange() Exchange {
	if x != nil {
		return x.Exchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

// 銘柄情報リクエスト
type GetSymbolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 銘柄コード
	SymbolCode string `protobuf:"bytes,1,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 市場
	Exchange Exchange `protobuf:"varint,2,opt,name=exchange,proto3,enum=kabuspb.Exchange" json:"exchange,omitempty"`
	// 追加情報出力フラグ
	GetInfo bool `protobuf:"varint,3,opt,name=get_info,json=getInfo,proto3" json:"get_info,omitempty"`
}

func (x *GetSymbolRequest) Reset() {
	*x = GetSymbolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSymbolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSymbolRequest) ProtoMessage() {}

func (x *GetSymbolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSymbolRequest.ProtoReflect.Descriptor instead.
func (*GetSymbolRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{17}
}

func (x *GetSymbolRequest) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *GetSymbolRequest) GetExchange() Exchange {
	if x != nil {
		return x.Exchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

func (x *GetSymbolRequest) GetGetInfo() bool {
	if x != nil {
		return x.GetInfo
	}
	return false
}

// 注文約定照会リクエスト
type GetOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取得する商品
	Product Product `protobuf:"varint,1,opt,name=product,proto3,enum=kabuspb.Product" json:"product,omitempty"`
	// 注文番号
	//   指定された注文番号と一致する注文のみレスポンスします
	//   指定された注文番号との比較では大文字小文字を区別しません
	//   複数の注文番号を指定することはできません
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// 更新日時
	//   指定された更新日時以降（指定日時含む）に更新された注文のみレスポンスします
	//   複数の更新日時を指定することはできません
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// 注文詳細抑止
	GetDetails bool `protobuf:"varint,4,opt,name=get_details,json=getDetails,proto3" json:"get_details,omitempty"`
	// 銘柄コード
	//   指定された銘柄コードと一致する注文のみレスポンスします
	//   複数の銘柄コードを指定することができません
	SymbolCode string `protobuf:"bytes,5,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 状態
	//   指定された状態と一致する注文のみレスポンスします
	//   複数の状態を指定することはできません
	State OrderState `protobuf:"varint,6,opt,name=state,proto3,enum=kabuspb.OrderState" json:"state,omitempty"`
	// 売買区分
	//   指定された売買区分と一致する注文のみレスポンスします
	//   複数の売買区分を指定することができません
	Side Side `protobuf:"varint,7,opt,name=side,proto3,enum=kabuspb.Side" json:"side,omitempty"`
	// 取引区分
	//   指定された取引区分と一致する注文のみレスポンスします
	//   複数の取引区分を指定することができません
	TradeType TradeType `protobuf:"varint,8,opt,name=tradeType,proto3,enum=kabuspb.TradeType" json:"tradeType,omitempty"`
	// 仮想売買
	IsVirtual bool `protobuf:"varint,99,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual,omitempty"`
}

func (x *GetOrdersRequest) Reset() {
	*x = GetOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersRequest) ProtoMessage() {}

func (x *GetOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersRequest.ProtoReflect.Descriptor instead.
func (*GetOrdersRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{18}
}

func (x *GetOrdersRequest) GetProduct() Product {
	if x != nil {
		return x.Product
	}
	return Product_PRODUCT_UNSPECIFIED
}

func (x *GetOrdersRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetOrdersRequest) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *GetOrdersRequest) GetGetDetails() bool {
	if x != nil {
		return x.GetDetails
	}
	return false
}

func (x *GetOrdersRequest) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *GetOrdersRequest) GetState() OrderState {
	if x != nil {
		return x.State
	}
	return OrderState_ORDER_STATE_UNSPECIFIED
}

func (x *GetOrdersRequest) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (x *GetOrdersRequest) GetTradeType() TradeType {
	if x != nil {
		return x.TradeType
	}
	return TradeType_TRADE_TYPE_UNSPECIFIED
}

func (x *GetOrdersRequest) GetIsVirtual() bool {
	if x != nil {
		return x.IsVirtual
	}
	return false
}

// 残高照会リクエスト
type GetPositionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取得する商品
	Product Product `protobuf:"varint,1,opt,name=product,proto3,enum=kabuspb.Product" json:"product,omitempty"`
	// 銘柄コード
	SymbolCode string `protobuf:"bytes,2,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 売買区分フィルタ
	Side Side `protobuf:"varint,3,opt,name=side,proto3,enum=kabuspb.Side" json:"side,omitempty"`
	// 追加情報出力フラグ
	GetInfo bool `protobuf:"varint,4,opt,name=get_info,json=getInfo,proto3" json:"get_info,omitempty"`
	// 仮想売買
	IsVirtual bool `protobuf:"varint,99,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual,omitempty"`
}

func (x *GetPositionsRequest) Reset() {
	*x = GetPositionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPositionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPositionsRequest) ProtoMessage() {}

func (x *GetPositionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPositionsRequest.ProtoReflect.Descriptor instead.
func (*GetPositionsRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{19}
}

func (x *GetPositionsRequest) GetProduct() Product {
	if x != nil {
		return x.Product
	}
	return Product_PRODUCT_UNSPECIFIED
}

func (x *GetPositionsRequest) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *GetPositionsRequest) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (x *GetPositionsRequest) GetGetInfo() bool {
	if x != nil {
		return x.GetInfo
	}
	return false
}

func (x *GetPositionsRequest) GetIsVirtual() bool {
	if x != nil {
		return x.IsVirtual
	}
	return false
}

// 先物銘柄コード取得リクエスト
type GetFutureSymbolCodeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 先物コード
	FutureCode FutureCode `protobuf:"varint,1,opt,name=future_code,json=futureCode,proto3,enum=kabuspb.FutureCode" json:"future_code,omitempty"`
	// 限月
	//   年月の値だけを使います
	//   ゼロ値なら直近の限月と同義
	DerivativeMonth *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=derivative_month,json=derivativeMonth,proto3" json:"derivative_month,omitempty"`
}

func (x *GetFutureSymbolCodeInfoRequest) Reset() {
	*x = GetFutureSymbolCodeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFutureSymbolCodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFutureSymbolCodeInfoRequest) ProtoMessage() {}

func (x *GetFutureSymbolCodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFutureSymbolCodeInfoRequest.ProtoReflect.Descriptor instead.
func (*GetFutureSymbolCodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{20}
}

func (x *GetFutureSymbolCodeInfoRequest) GetFutureCode() FutureCode {
	if x != nil {
		return x.FutureCode
	}
	return FutureCode_FUTURE_CODE_UNSPECIFIED
}

func (x *GetFutureSymbolCodeInfoRequest) GetDerivativeMonth() *timestamppb.Timestamp {
	if x != nil {
		return x.DerivativeMonth
	}
	return nil
}

// オプション銘柄コード取得リクエスト
type GetOptionSymbolCodeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 限月
	//   年月の値だけを使います
	//   ゼロ値なら直近の限月と同義
	DerivativeMonth *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=derivative_month,json=derivativeMonth,proto3" json:"derivative_month,omitempty"`
	// コール or プット
	CallOrPut CallPut `protobuf:"varint,2,opt,name=call_or_put,json=callOrPut,proto3,enum=kabuspb.CallPut" json:"call_or_put,omitempty"`
	// 権利行使価格
	//   ゼロ値ならATMと同義
	StrikePrice int32 `protobuf:"varint,3,opt,name=strike_price,json=strikePrice,proto3" json:"strike_price,omitempty"`
}

func (x *GetOptionSymbolCodeInfoRequest) Reset() {
	*x = GetOptionSymbolCodeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOptionSymbolCodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOptionSymbolCodeInfoRequest) ProtoMessage() {}

func (x *GetOptionSymbolCodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOptionSymbolCodeInfoRequest.ProtoReflect.Descriptor instead.
func (*GetOptionSymbolCodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{21}
}

func (x *GetOptionSymbolCodeInfoRequest) GetDerivativeMonth() *timestamppb.Timestamp {
	if x != nil {
		return x.DerivativeMonth
	}
	return nil
}

func (x *GetOptionSymbolCodeInfoRequest) GetCallOrPut() CallPut {
	if x != nil {
		return x.CallOrPut
	}
	return CallPut_CALL_PUT_UNSPECIFIED
}

func (x *GetOptionSymbolCodeInfoRequest) GetStrikePrice() int32 {
	if x != nil {
		return x.StrikePrice
	}
	return 0
}

// 株価ランキングリクエスト
type GetPriceRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 株価ランキング種別
	RankingType PriceRankingType `protobuf:"varint,1,opt,name=ranking_type,json=rankingType,proto3,enum=kabuspb.PriceRankingType" json:"ranking_type,omitempty"`
	// 市場・上場部
	ExchangeDivision ExchangeDivision `protobuf:"varint,2,opt,name=exchange_division,json=exchangeDivision,proto3,enum=kabuspb.ExchangeDivision" json:"exchange_division,omitempty"`
}

func (x *GetPriceRankingRequest) Reset() {
	*x = GetPriceRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPriceRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPriceRankingRequest) ProtoMessage() {}

func (x *GetPriceRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPriceRankingRequest.ProtoReflect.Descriptor instead.
func (*GetPriceRankingRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{22}
}

func (x *GetPriceRankingRequest) GetRankingType() PriceRankingType {
	if x != nil {
		return x.RankingType
	}
	return PriceRankingType_PRICE_RANKING_TYPE_UNSPECIFIED
}

func (x *GetPriceRankingRequest) GetExchangeDivision() ExchangeDivision {
	if x != nil {
		return x.ExchangeDivision
	}
	return ExchangeDivision_EXCHANGE_DIVISION_UNSPECIFIED
}

// TICK回数ランキングリクエスト
type GetTickRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 市場・上場部
	ExchangeDivision ExchangeDivision `protobuf:"varint,2,opt,name=exchange_division,json=exchangeDivision,proto3,enum=kabuspb.ExchangeDivision" json:"exchange_division,omitempty"`
}

func (x *GetTickRankingRequest) Reset() {
	*x = GetTickRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTickRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTickRankingRequest) ProtoMessage() {}

func (x *GetTickRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTickRankingRequest.ProtoReflect.Descriptor instead.
func (*GetTickRankingRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{23}
}

func (x *GetTickRankingRequest) GetExchangeDivision() ExchangeDivision {
	if x != nil {
		return x.ExchangeDivision
	}
	return ExchangeDivision_EXCHANGE_DIVISION_UNSPECIFIED
}

// 売買高ランキングリクエスト
type GetVolumeRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 市場・上場部
	ExchangeDivision ExchangeDivision `protobuf:"varint,2,opt,name=exchange_division,json=exchangeDivision,proto3,enum=kabuspb.ExchangeDivision" json:"exchange_division,omitempty"`
}

func (x *GetVolumeRankingRequest) Reset() {
	*x = GetVolumeRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVolumeRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVolumeRankingRequest) ProtoMessage() {}

func (x *GetVolumeRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVolumeRankingRequest.ProtoReflect.Descriptor instead.
func (*GetVolumeRankingRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{24}
}

func (x *GetVolumeRankingRequest) GetExchangeDivision() ExchangeDivision {
	if x != nil {
		return x.ExchangeDivision
	}
	return ExchangeDivision_EXCHANGE_DIVISION_UNSPECIFIED
}

// 売買代金ランキングリクエスト
type GetValueRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 市場・上場部
	ExchangeDivision ExchangeDivision `protobuf:"varint,2,opt,name=exchange_division,json=exchangeDivision,proto3,enum=kabuspb.ExchangeDivision" json:"exchange_division,omitempty"`
}

func (x *GetValueRankingRequest) Reset() {
	*x = GetValueRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValueRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValueRankingRequest) ProtoMessage() {}

func (x *GetValueRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValueRankingRequest.ProtoReflect.Descriptor instead.
func (*GetValueRankingRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{25}
}

func (x *GetValueRankingRequest) GetExchangeDivision() ExchangeDivision {
	if x != nil {
		return x.ExchangeDivision
	}
	return ExchangeDivision_EXCHANGE_DIVISION_UNSPECIFIED
}

// 信用ランキングリクエスト
type GetMarginRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ランキング種別
	RankingType MarginRankingType `protobuf:"varint,1,opt,name=ranking_type,json=rankingType,proto3,enum=kabuspb.MarginRankingType" json:"ranking_type,omitempty"`
	// 市場・上場部
	ExchangeDivision ExchangeDivision `protobuf:"varint,2,opt,name=exchange_division,json=exchangeDivision,proto3,enum=kabuspb.ExchangeDivision" json:"exchange_division,omitempty"`
}

func (x *GetMarginRankingRequest) Reset() {
	*x = GetMarginRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarginRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarginRankingRequest) ProtoMessage() {}

func (x *GetMarginRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarginRankingRequest.ProtoReflect.Descriptor instead.
func (*GetMarginRankingRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{26}
}

func (x *GetMarginRankingRequest) GetRankingType() MarginRankingType {
	if x != nil {
		return x.RankingType
	}
	return MarginRankingType_MARGIN_RANKING_TYPE_UNSPECIFIED
}

func (x *GetMarginRankingRequest) GetExchangeDivision() ExchangeDivision {
	if x != nil {
		return x.ExchangeDivision
	}
	return ExchangeDivision_EXCHANGE_DIVISION_UNSPECIFIED
}

// 業種別ランキングリクエスト
type GetIndustryRankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ランキング種別
	RankingType IndustryRankingType `protobuf:"varint,1,opt,name=ranking_type,json=rankingType,proto3,enum=kabuspb.IndustryRankingType" json:"ranking_type,omitempty"`
	// 市場・上場部
	ExchangeDivision ExchangeDivision `protobuf:"varint,2,opt,name=exchange_division,json=exchangeDivision,proto3,enum=kabuspb.ExchangeDivision" json:"exchange_division,omitempty"`
}

func (x *GetIndustryRankingRequest) Reset() {
	*x = GetIndustryRankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIndustryRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndustryRankingRequest) ProtoMessage() {}

func (x *GetIndustryRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndustryRankingRequest.ProtoReflect.Descriptor instead.
func (*GetIndustryRankingRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{27}
}

func (x *GetIndustryRankingRequest) GetRankingType() IndustryRankingType {
	if x != nil {
		return x.RankingType
	}
	return IndustryRankingType_INDUSTRY_RANKING_TYPE_UNSPECIFIED
}

func (x *GetIndustryRankingRequest) GetExchangeDivision() ExchangeDivision {
	if x != nil {
		return x.ExchangeDivision
	}
	return ExchangeDivision_EXCHANGE_DIVISION_UNSPECIFIED
}

// 登録銘柄一覧リクエスト
type GetRegisteredSymbolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ツール名
	RequesterName string `protobuf:"bytes,1,opt,name=requester_name,json=requesterName,proto3" json:"requester_name,omitempty"`
}

func (x *GetRegisteredSymbolsRequest) Reset() {
	*x = GetRegisteredSymbolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegisteredSymbolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegisteredSymbolsRequest) ProtoMessage() {}

func (x *GetRegisteredSymbolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegisteredSymbolsRequest.ProtoReflect.Descriptor instead.
func (*GetRegisteredSymbolsRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{28}
}

func (x *GetRegisteredSymbolsRequest) GetRequesterName() string {
	if x != nil {
		return x.RequesterName
	}
	return ""
}

// 銘柄登録リクエスト
type RegisterSymbolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ツール名
	RequesterName string `protobuf:"bytes,2,opt,name=requester_name,json=requesterName,proto3" json:"requester_name,omitempty"`
	// 登録する銘柄のリスト
	Symbols []*RegisterSymbol `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *RegisterSymbolsRequest) Reset() {
	*x = RegisterSymbolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSymbolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSymbolsRequest) ProtoMessage() {}

func (x *RegisterSymbolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSymbolsRequest.ProtoReflect.Descriptor instead.
func (*RegisterSymbolsRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{29}
}

func (x *RegisterSymbolsRequest) GetRequesterName() string {
	if x != nil {
		return x.RequesterName
	}
	return ""
}

func (x *RegisterSymbolsRequest) GetSymbols() []*RegisterSymbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

// 銘柄登録解除リクエスト
type UnregisterSymbolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ツール名
	RequesterName string `protobuf:"bytes,2,opt,name=requester_name,json=requesterName,proto3" json:"requester_name,omitempty"`
	// 登録解除する銘柄のリスト
	Symbols []*RegisterSymbol `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *UnregisterSymbolsRequest) Reset() {
	*x = UnregisterSymbolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterSymbolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterSymbolsRequest) ProtoMessage() {}

func (x *UnregisterSymbolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterSymbolsRequest.ProtoReflect.Descriptor instead.
func (*UnregisterSymbolsRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{30}
}

func (x *UnregisterSymbolsRequest) GetRequesterName() string {
	if x != nil {
		return x.RequesterName
	}
	return ""
}

func (x *UnregisterSymbolsRequest) GetSymbols() []*RegisterSymbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

// 銘柄登録全解除リクエスト
type UnregisterAllSymbolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ツール名
	RequesterName string `protobuf:"bytes,1,opt,name=requester_name,json=requesterName,proto3" json:"requester_name,omitempty"`
}

func (x *UnregisterAllSymbolsRequest) Reset() {
	*x = UnregisterAllSymbolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterAllSymbolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterAllSymbolsRequest) ProtoMessage() {}

func (x *UnregisterAllSymbolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterAllSymbolsRequest.ProtoReflect.Descriptor instead.
func (*UnregisterAllSymbolsRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{31}
}

func (x *UnregisterAllSymbolsRequest) GetRequesterName() string {
	if x != nil {
		return x.RequesterName
	}
	return ""
}

// 為替情報リクエスト
type GetExchangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 通貨
	Currency Currency `protobuf:"varint,1,opt,name=currency,proto3,enum=kabuspb.Currency" json:"currency,omitempty"`
}

func (x *GetExchangeRequest) Reset() {
	*x = GetExchangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequest) ProtoMessage() {}

func (x *GetExchangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequest.ProtoReflect.Descriptor instead.
func (*GetExchangeRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{32}
}

func (x *GetExchangeRequest) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_CURRENCY_UNSPECIFIED
}

// 規制情報リクエスト
type GetRegulationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 銘柄コード
	SymbolCode string `protobuf:"bytes,1,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 市場
	Exchange StockExchange `protobuf:"varint,2,opt,name=exchange,proto3,enum=kabuspb.StockExchange" json:"exchange,omitempty"`
}

func (x *GetRegulationRequest) Reset() {
	*x = GetRegulationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegulationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegulationRequest) ProtoMessage() {}

func (x *GetRegulationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegulationRequest.ProtoReflect.Descriptor instead.
func (*GetRegulationRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{33}
}

func (x *GetRegulationRequest) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *GetRegulationRequest) GetExchange() StockExchange {
	if x != nil {
		return x.Exchange
	}
	return StockExchange_STOCK_EXCHANGE_UNSPECIFIED
}

// 優先市場リクエスト
type GetPrimaryExchangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 銘柄コード
	SymbolCode string `protobuf:"bytes,1,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
}

func (x *GetPrimaryExchangeRequest) Reset() {
	*x = GetPrimaryExchangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrimaryExchangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrimaryExchangeRequest) ProtoMessage() {}

func (x *GetPrimaryExchangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrimaryExchangeRequest.ProtoReflect.Descriptor instead.
func (*GetPrimaryExchangeRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{34}
}

func (x *GetPrimaryExchangeRequest) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

// ソフトリミットリクエスト
type GetSoftLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSoftLimitRequest) Reset() {
	*x = GetSoftLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSoftLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSoftLimitRequest) ProtoMessage() {}

func (x *GetSoftLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSoftLimitRequest.ProtoReflect.Descriptor instead.
func (*GetSoftLimitRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{35}
}

// プレミアム料取得リクエスト
type GetMarginPremiumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 銘柄コード
	SymbolCode string `protobuf:"bytes,1,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
}

func (x *GetMarginPremiumRequest) Reset() {
	*x = GetMarginPremiumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarginPremiumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarginPremiumRequest) ProtoMessage() {}

func (x *GetMarginPremiumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarginPremiumRequest.ProtoReflect.Descriptor instead.
func (*GetMarginPremiumRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{36}
}

func (x *GetMarginPremiumRequest) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

// 時価情報・板情報ストリーミング
type GetBoardsStreamingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBoardsStreamingRequest) Reset() {
	*x = GetBoardsStreamingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBoardsStreamingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBoardsStreamingRequest) ProtoMessage() {}

func (x *GetBoardsStreamingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBoardsStreamingRequest.ProtoReflect.Descriptor instead.
func (*GetBoardsStreamingRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{37}
}

// トークン
type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// トークン
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// 有効期限
	ExpiredAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{38}
}

func (x *Token) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Token) GetExpiredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredAt
	}
	return nil
}

// 時価情報・板情報
type Board struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 銘柄コード
	SymbolCode string `protobuf:"bytes,1,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 銘柄名
	SymbolName string `protobuf:"bytes,2,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`
	// 市場コード
	//   株式・先物・オプション銘柄の場合のみ
	Exchange Exchange `protobuf:"varint,3,opt,name=exchange,proto3,enum=kabuspb.Exchange" json:"exchange,omitempty"`
	// 市場名称
	//   株式・先物・オプション銘柄の場合のみ
	ExchangeName string `protobuf:"bytes,4,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"`
	// 現値
	CurrentPrice float64 `protobuf:"fixed64,5,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`
	// 現値時刻
	CurrentPriceTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=current_price_time,json=currentPriceTime,proto3" json:"current_price_time,omitempty"`
	// 現値前値比較
	CurrentPriceChangeStatus string `protobuf:"bytes,7,opt,name=current_price_change_status,json=currentPriceChangeStatus,proto3" json:"current_price_change_status,omitempty"` // TODO enum化
	// 現値ステータス
	CurrentPriceStatus int32 `protobuf:"varint,8,opt,name=current_price_status,json=currentPriceStatus,proto3" json:"current_price_status,omitempty"` // TODO enum化
	// 計算用現値
	CalculationPrice float64 `protobuf:"fixed64,9,opt,name=calculation_price,json=calculationPrice,proto3" json:"calculation_price,omitempty"`
	// 前日終値
	PreviousClose float64 `protobuf:"fixed64,10,opt,name=previous_close,json=previousClose,proto3" json:"previous_close,omitempty"`
	// 前日終値日付
	PreviousCloseTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=previous_close_time,json=previousCloseTime,proto3" json:"previous_close_time,omitempty"`
	// 前日比
	ChangePreviousClose float64 `protobuf:"fixed64,12,opt,name=change_previous_close,json=changePreviousClose,proto3" json:"change_previous_close,omitempty"`
	// 騰落率
	ChangePreviousClosePer float64 `protobuf:"fixed64,13,opt,name=change_previous_close_per,json=changePreviousClosePer,proto3" json:"change_previous_close_per,omitempty"`
	// 始値
	OpeningPrice float64 `protobuf:"fixed64,14,opt,name=opening_price,json=openingPrice,proto3" json:"opening_price,omitempty"`
	// 始値時刻
	OpeningPriceTime *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=opening_price_time,json=openingPriceTime,proto3" json:"opening_price_time,omitempty"`
	// 高値
	HighPrice float64 `protobuf:"fixed64,16,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	// 高値時刻
	HighPriceTime *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=high_price_time,json=highPriceTime,proto3" json:"high_price_time,omitempty"`
	// 安値
	LowPrice float64 `protobuf:"fixed64,18,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	// 安値時刻
	LowPriceTime *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=low_price_time,json=lowPriceTime,proto3" json:"low_price_time,omitempty"`
	// 売買高
	//   株式・先物・オプション銘柄の場合のみ
	TradingVolume float64 `protobuf:"fixed64,20,opt,name=trading_volume,json=tradingVolume,proto3" json:"trading_volume,omitempty"`
	// 売買高時刻
	//   株式・先物・オプション銘柄の場合のみ
	TradingVolumeTime *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=trading_volume_time,json=tradingVolumeTime,proto3" json:"trading_volume_time,omitempty"`
	// 売買高加重平均価格（VWAP）
	//   株式・先物・オプション銘柄の場合のみ
	Vwap float64 `protobuf:"fixed64,22,opt,name=vwap,proto3" json:"vwap,omitempty"`
	// 売買代金
	//   株式・先物・オプション銘柄の場合のみ
	TradingValue float64 `protobuf:"fixed64,23,opt,name=trading_value,json=tradingValue,proto3" json:"trading_value,omitempty"`
	// 最良買気配数量
	//   株式・先物・オプション銘柄の場合のみ
	BidQuantity float64 `protobuf:"fixed64,24,opt,name=bid_quantity,json=bidQuantity,proto3" json:"bid_quantity,omitempty"`
	// 最良買気配値段
	//   株式・先物・オプション銘柄の場合のみ
	BidPrice float64 `protobuf:"fixed64,25,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	// 最良買気配時刻
	//  株式銘柄の場合のみ
	BidTime *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=bid_time,json=bidTime,proto3" json:"bid_time,omitempty"`
	// 最良買気配フラグ
	//   株式・先物・オプション銘柄の場合のみ
	BidSign string `protobuf:"bytes,27,opt,name=bid_sign,json=bidSign,proto3" json:"bid_sign,omitempty"` // TODO enum化
	// 売成行数量
	//   株式銘柄の場合のみ
	MarketOrderSellQuantity float64 `protobuf:"fixed64,28,opt,name=market_order_sell_quantity,json=marketOrderSellQuantity,proto3" json:"market_order_sell_quantity,omitempty"`
	// 売気配数量1本目
	Sell1 *FirstQuote `protobuf:"bytes,29,opt,name=sell1,proto3" json:"sell1,omitempty"`
	// 売気配数量2本目
	Sell2 *Quote `protobuf:"bytes,30,opt,name=sell2,proto3" json:"sell2,omitempty"`
	// 売気配数量3本目
	Sell3 *Quote `protobuf:"bytes,31,opt,name=sell3,proto3" json:"sell3,omitempty"`
	// 売気配数量4本目
	Sell4 *Quote `protobuf:"bytes,32,opt,name=sell4,proto3" json:"sell4,omitempty"`
	// 売気配数量5本目
	Sell5 *Quote `protobuf:"bytes,33,opt,name=sell5,proto3" json:"sell5,omitempty"`
	// 売気配数量6本目
	Sell6 *Quote `protobuf:"bytes,34,opt,name=sell6,proto3" json:"sell6,omitempty"`
	// 売気配数量7本目
	Sell7 *Quote `protobuf:"bytes,35,opt,name=sell7,proto3" json:"sell7,omitempty"`
	// 売気配数量8本目
	Sell8 *Quote `protobuf:"bytes,36,opt,name=sell8,proto3" json:"sell8,omitempty"`
	// 売気配数量9本目
	Sell9 *Quote `protobuf:"bytes,37,opt,name=sell9,proto3" json:"sell9,omitempty"`
	// 売気配数量10本目
	Sell10 *Quote `protobuf:"bytes,38,opt,name=sell10,proto3" json:"sell10,omitempty"`
	// 最良売気配数量
	//   株式・先物・オプション銘柄の場合のみ
	AskQuantity float64 `protobuf:"fixed64,39,opt,name=ask_quantity,json=askQuantity,proto3" json:"ask_quantity,omitempty"`
	// 最良売気配値段
	//   株式・先物・オプション銘柄の場合のみ
	AskPrice float64 `protobuf:"fixed64,40,opt,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	// 最良売気配時刻
	//  株式銘柄の場合のみ
	AskTime *timestamppb.Timestamp `protobuf:"bytes,41,opt,name=ask_time,json=askTime,proto3" json:"ask_time,omitempty"`
	// 最良売気配フラグ
	//   株式・先物・オプション銘柄の場合のみ
	AskSign string `protobuf:"bytes,42,opt,name=ask_sign,json=askSign,proto3" json:"ask_sign,omitempty"` // TODO enum化
	// 買成行数量
	//   株式銘柄の場合のみ
	MarketOrderBuyQuantity float64 `protobuf:"fixed64,43,opt,name=market_order_buy_quantity,json=marketOrderBuyQuantity,proto3" json:"market_order_buy_quantity,omitempty"`
	// 買気配数量1本目
	Buy1 *FirstQuote `protobuf:"bytes,44,opt,name=buy1,proto3" json:"buy1,omitempty"`
	// 買気配数量2本目
	Buy2 *Quote `protobuf:"bytes,45,opt,name=buy2,proto3" json:"buy2,omitempty"`
	// 買気配数量3本目
	Buy3 *Quote `protobuf:"bytes,46,opt,name=buy3,proto3" json:"buy3,omitempty"`
	// 買気配数量4本目
	Buy4 *Quote `protobuf:"bytes,47,opt,name=buy4,proto3" json:"buy4,omitempty"`
	// 買気配数量5本目
	Buy5 *Quote `protobuf:"bytes,48,opt,name=buy5,proto3" json:"buy5,omitempty"`
	// 買気配数量6本目
	Buy6 *Quote `protobuf:"bytes,49,opt,name=buy6,proto3" json:"buy6,omitempty"`
	// 買気配数量7本目
	Buy7 *Quote `protobuf:"bytes,50,opt,name=buy7,proto3" json:"buy7,omitempty"`
	// 買気配数量8本目
	Buy8 *Quote `protobuf:"bytes,51,opt,name=buy8,proto3" json:"buy8,omitempty"`
	// 買気配数量9本目
	Buy9 *Quote `protobuf:"bytes,52,opt,name=buy9,proto3" json:"buy9,omitempty"`
	// 買気配数量10本目
	Buy10 *Quote `protobuf:"bytes,53,opt,name=buy10,proto3" json:"buy10,omitempty"`
	// OVER気配数量
	//   株式銘柄の場合のみ
	OverSellQuantity float64 `protobuf:"fixed64,54,opt,name=over_sell_quantity,json=overSellQuantity,proto3" json:"over_sell_quantity,omitempty"`
	// UNDER気配数量
	//   株式銘柄の場合のみ
	UnderBuyQuantity float64 `protobuf:"fixed64,55,opt,name=under_buy_quantity,json=underBuyQuantity,proto3" json:"under_buy_quantity,omitempty"`
	// 時価総額
	//   株式銘柄の場合のみ
	TotalMarketValue float64 `protobuf:"fixed64,56,opt,name=total_market_value,json=totalMarketValue,proto3" json:"total_market_value,omitempty"`
	// 清算値
	//   先物銘柄の場合のみ
	ClearingPrice float64 `protobuf:"fixed64,57,opt,name=clearing_price,json=clearingPrice,proto3" json:"clearing_price,omitempty"`
	// インプライド・ボラティリティ
	//   オプション銘柄かつ日通しの場合のみ
	ImpliedVolatility float64 `protobuf:"fixed64,58,opt,name=implied_volatility,json=impliedVolatility,proto3" json:"implied_volatility,omitempty"`
	// ガンマ
	//   オプション銘柄かつ日通しの場合のみ
	Gamma float64 `protobuf:"fixed64,59,opt,name=gamma,proto3" json:"gamma,omitempty"`
	// セータ
	//   オプション銘柄かつ日通しの場合のみ
	Theta float64 `protobuf:"fixed64,60,opt,name=theta,proto3" json:"theta,omitempty"`
	// ベガ
	//   オプション銘柄かつ日通しの場合のみ
	Vega float64 `protobuf:"fixed64,61,opt,name=vega,proto3" json:"vega,omitempty"`
	// デルタ
	//   オプション銘柄かつ日通しの場合のみ
	Delta float64 `protobuf:"fixed64,62,opt,name=delta,proto3" json:"delta,omitempty"`
	// 銘柄種別
	SecurityType SecurityType `protobuf:"varint,63,opt,name=security_type,json=securityType,proto3,enum=kabuspb.SecurityType" json:"security_type,omitempty"`
}

func (x *Board) Reset() {
	*x = Board{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Board) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Board) ProtoMessage() {}

func (x *Board) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Board.ProtoReflect.Descriptor instead.
func (*Board) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{39}
}

func (x *Board) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *Board) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *Board) GetExchange() Exchange {
	if x != nil {
		return x.Exchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

func (x *Board) GetExchangeName() string {
	if x != nil {
		return x.ExchangeName
	}
	return ""
}

func (x *Board) GetCurrentPrice() float64 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

func (x *Board) GetCurrentPriceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentPriceTime
	}
	return nil
}

func (x *Board) GetCurrentPriceChangeStatus() string {
	if x != nil {
		return x.CurrentPriceChangeStatus
	}
	return ""
}

func (x *Board) GetCurrentPriceStatus() int32 {
	if x != nil {
		return x.CurrentPriceStatus
	}
	return 0
}

func (x *Board) GetCalculationPrice() float64 {
	if x != nil {
		return x.CalculationPrice
	}
	return 0
}

func (x *Board) GetPreviousClose() float64 {
	if x != nil {
		return x.PreviousClose
	}
	return 0
}

func (x *Board) GetPreviousCloseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PreviousCloseTime
	}
	return nil
}

func (x *Board) GetChangePreviousClose() float64 {
	if x != nil {
		return x.ChangePreviousClose
	}
	return 0
}

func (x *Board) GetChangePreviousClosePer() float64 {
	if x != nil {
		return x.ChangePreviousClosePer
	}
	return 0
}

func (x *Board) GetOpeningPrice() float64 {
	if x != nil {
		return x.OpeningPrice
	}
	return 0
}

func (x *Board) GetOpeningPriceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OpeningPriceTime
	}
	return nil
}

func (x *Board) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *Board) GetHighPriceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.HighPriceTime
	}
	return nil
}

func (x *Board) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *Board) GetLowPriceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LowPriceTime
	}
	return nil
}

func (x *Board) GetTradingVolume() float64 {
	if x != nil {
		return x.TradingVolume
	}
	return 0
}

func (x *Board) GetTradingVolumeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TradingVolumeTime
	}
	return nil
}

func (x *Board) GetVwap() float64 {
	if x != nil {
		return x.Vwap
	}
	return 0
}

func (x *Board) GetTradingValue() float64 {
	if x != nil {
		return x.TradingValue
	}
	return 0
}

func (x *Board) GetBidQuantity() float64 {
	if x != nil {
		return x.BidQuantity
	}
	return 0
}

func (x *Board) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *Board) GetBidTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BidTime
	}
	return nil
}

func (x *Board) GetBidSign() string {
	if x != nil {
		return x.BidSign
	}
	return ""
}

func (x *Board) GetMarketOrderSellQuantity() float64 {
	if x != nil {
		return x.MarketOrderSellQuantity
	}
	return 0
}

func (x *Board) GetSell1() *FirstQuote {
	if x != nil {
		return x.Sell1
	}
	return nil
}

func (x *Board) GetSell2() *Quote {
	if x != nil {
		return x.Sell2
	}
	return nil
}

func (x *Board) GetSell3() *Quote {
	if x != nil {
		return x.Sell3
	}
	return nil
}

func (x *Board) GetSell4() *Quote {
	if x != nil {
		return x.Sell4
	}
	return nil
}

func (x *Board) GetSell5() *Quote {
	if x != nil {
		return x.Sell5
	}
	return nil
}

func (x *Board) GetSell6() *Quote {
	if x != nil {
		return x.Sell6
	}
	return nil
}

func (x *Board) GetSell7() *Quote {
	if x != nil {
		return x.Sell7
	}
	return nil
}

func (x *Board) GetSell8() *Quote {
	if x != nil {
		return x.Sell8
	}
	return nil
}

func (x *Board) GetSell9() *Quote {
	if x != nil {
		return x.Sell9
	}
	return nil
}

func (x *Board) GetSell10() *Quote {
	if x != nil {
		return x.Sell10
	}
	return nil
}

func (x *Board) GetAskQuantity() float64 {
	if x != nil {
		return x.AskQuantity
	}
	return 0
}

func (x *Board) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *Board) GetAskTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AskTime
	}
	return nil
}

func (x *Board) GetAskSign() string {
	if x != nil {
		return x.AskSign
	}
	return ""
}

func (x *Board) GetMarketOrderBuyQuantity() float64 {
	if x != nil {
		return x.MarketOrderBuyQuantity
	}
	return 0
}

func (x *Board) GetBuy1() *FirstQuote {
	if x != nil {
		return x.Buy1
	}
	return nil
}

func (x *Board) GetBuy2() *Quote {
	if x != nil {
		return x.Buy2
	}
	return nil
}

func (x *Board) GetBuy3() *Quote {
	if x != nil {
		return x.Buy3
	}
	return nil
}

func (x *Board) GetBuy4() *Quote {
	if x != nil {
		return x.Buy4
	}
	return nil
}

func (x *Board) GetBuy5() *Quote {
	if x != nil {
		return x.Buy5
	}
	return nil
}

func (x *Board) GetBuy6() *Quote {
	if x != nil {
		return x.Buy6
	}
	return nil
}

func (x *Board) GetBuy7() *Quote {
	if x != nil {
		return x.Buy7
	}
	return nil
}

func (x *Board) GetBuy8() *Quote {
	if x != nil {
		return x.Buy8
	}
	return nil
}

func (x *Board) GetBuy9() *Quote {
	if x != nil {
		return x.Buy9
	}
	return nil
}

func (x *Board) GetBuy10() *Quote {
	if x != nil {
		return x.Buy10
	}
	return nil
}

func (x *Board) GetOverSellQuantity() float64 {
	if x != nil {
		return x.OverSellQuantity
	}
	return 0
}

func (x *Board) GetUnderBuyQuantity() float64 {
	if x != nil {
		return x.UnderBuyQuantity
	}
	return 0
}

func (x *Board) GetTotalMarketValue() float64 {
	if x != nil {
		return x.TotalMarketValue
	}
	return 0
}

func (x *Board) GetClearingPrice() float64 {
	if x != nil {
		return x.ClearingPrice
	}
	return 0
}

func (x *Board) GetImpliedVolatility() float64 {
	if x != nil {
		return x.ImpliedVolatility
	}
	return 0
}

func (x *Board) GetGamma() float64 {
	if x != nil {
		return x.Gamma
	}
	return 0
}

func (x *Board) GetTheta() float64 {
	if x != nil {
		return x.Theta
	}
	return 0
}

func (x *Board) GetVega() float64 {
	if x != nil {
		return x.Vega
	}
	return 0
}

func (x *Board) GetDelta() float64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *Board) GetSecurityType() SecurityType {
	if x != nil {
		return x.SecurityType
	}
	return SecurityType_SECURITY_TYPE_UNSPECIFIED
}

// 銘柄
type Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 銘柄コード
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// 銘柄名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 銘柄略称
	//   ※株式・先物・オプション銘柄の場合のみ
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// 市場コード
	//   株式・先物・オプション銘柄の場合のみ
	Exchange Exchange `protobuf:"varint,4,opt,name=exchange,proto3,enum=kabuspb.Exchange" json:"exchange,omitempty"`
	// 市場名称
	//   株式・先物・オプション銘柄の場合のみ
	ExchangeName string `protobuf:"bytes,5,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"`
	// 業種コード名
	//   株式銘柄の場合のみ
	IndustryCategory string `protobuf:"bytes,6,opt,name=industry_category,json=industryCategory,proto3" json:"industry_category,omitempty"` // TODO enum
	// 時価総額
	//   株式銘柄の場合のみ
	TotalMarketValue float64 `protobuf:"fixed64,7,opt,name=total_market_value,json=totalMarketValue,proto3" json:"total_market_value,omitempty"`
	// 発行済み株式数（千株）
	//   株式銘柄の場合のみ
	TotalStocks float64 `protobuf:"fixed64,8,opt,name=total_stocks,json=totalStocks,proto3" json:"total_stocks,omitempty"`
	// 売買単位
	//   株式・先物・オプション銘柄の場合のみ
	TradingUnit float64 `protobuf:"fixed64,9,opt,name=trading_unit,json=tradingUnit,proto3" json:"trading_unit,omitempty"`
	// 決算期日
	//   株式銘柄の場合のみ
	FiscalYearEndBasic *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=fiscal_year_end_basic,json=fiscalYearEndBasic,proto3" json:"fiscal_year_end_basic,omitempty"`
	// 呼値グループ
	//   株式・先物・オプション銘柄の場合のみ
	PriceRangeGroup string `protobuf:"bytes,11,opt,name=price_range_group,json=priceRangeGroup,proto3" json:"price_range_group,omitempty"` // todo enum
	// 一般信用買建フラグ
	//   trueのとき一般信用買建可能
	//   株式銘柄の場合のみ
	KabucomMarginBuy bool `protobuf:"varint,12,opt,name=kabucom_margin_buy,json=kabucomMarginBuy,proto3" json:"kabucom_margin_buy,omitempty"`
	// 一般信用売建フラグ
	//   trueのとき一般信用売建可能
	//   株式銘柄の場合のみ
	KabucomMarginSell bool `protobuf:"varint,13,opt,name=kabucom_margin_sell,json=kabucomMarginSell,proto3" json:"kabucom_margin_sell,omitempty"`
	// 制度信用買建フラグ
	//   trueのとき制度信用買建可能
	//   株式銘柄の場合のみ
	MarginBuy bool `protobuf:"varint,14,opt,name=margin_buy,json=marginBuy,proto3" json:"margin_buy,omitempty"`
	// 制度信用売建フラグ
	//   trueのとき制度信用売建可能
	//   株式銘柄の場合のみ
	MarginSell bool `protobuf:"varint,15,opt,name=margin_sell,json=marginSell,proto3" json:"margin_sell,omitempty"`
	// 値幅上限
	//   株式・先物・オプション銘柄の場合のみ
	UpperLimit float64 `protobuf:"fixed64,16,opt,name=upper_limit,json=upperLimit,proto3" json:"upper_limit,omitempty"`
	// 値幅下限
	//   株式・先物・オプション銘柄の場合のみ
	LowerLimit float64 `protobuf:"fixed64,17,opt,name=lower_limit,json=lowerLimit,proto3" json:"lower_limit,omitempty"`
	// 原資産コード
	//   先物・オプション銘柄の場合のみ
	Underlyer string `protobuf:"bytes,18,opt,name=underlyer,proto3" json:"underlyer,omitempty"` // todo enum
	// 限月-年月
	//   先物・オプション銘柄の場合のみ
	DerivativeMonth *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=derivative_month,json=derivativeMonth,proto3" json:"derivative_month,omitempty"`
	// 取引開始日
	//   先物・オプション銘柄の場合のみ
	TradeStart *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=trade_start,json=tradeStart,proto3" json:"trade_start,omitempty"`
	// 取引終了日
	//   先物・オプション銘柄の場合のみ
	TradeEnd *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=trade_end,json=tradeEnd,proto3" json:"trade_end,omitempty"`
	// 権利行使価格
	//   オプション銘柄の場合のみ
	StrikePrice float64 `protobuf:"fixed64,22,opt,name=strike_price,json=strikePrice,proto3" json:"strike_price,omitempty"`
	// プット/コール区分
	//   オプション銘柄の場合のみ
	CallOrPut CallPut `protobuf:"varint,23,opt,name=call_or_put,json=callOrPut,proto3,enum=kabuspb.CallPut" json:"call_or_put,omitempty"`
	// 清算値
	//   先物銘柄の場合のみ
	ClearingPrice float64 `protobuf:"fixed64,24,opt,name=clearing_price,json=clearingPrice,proto3" json:"clearing_price,omitempty"`
}

func (x *Symbol) Reset() {
	*x = Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Symbol) ProtoMessage() {}

func (x *Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Symbol.ProtoReflect.Descriptor instead.
func (*Symbol) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{40}
}

func (x *Symbol) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Symbol) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Symbol) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Symbol) GetExchange() Exchange {
	if x != nil {
		return x.Exchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

func (x *Symbol) GetExchangeName() string {
	if x != nil {
		return x.ExchangeName
	}
	return ""
}

func (x *Symbol) GetIndustryCategory() string {
	if x != nil {
		return x.IndustryCategory
	}
	return ""
}

func (x *Symbol) GetTotalMarketValue() float64 {
	if x != nil {
		return x.TotalMarketValue
	}
	return 0
}

func (x *Symbol) GetTotalStocks() float64 {
	if x != nil {
		return x.TotalStocks
	}
	return 0
}

func (x *Symbol) GetTradingUnit() float64 {
	if x != nil {
		return x.TradingUnit
	}
	return 0
}

func (x *Symbol) GetFiscalYearEndBasic() *timestamppb.Timestamp {
	if x != nil {
		return x.FiscalYearEndBasic
	}
	return nil
}

func (x *Symbol) GetPriceRangeGroup() string {
	if x != nil {
		return x.PriceRangeGroup
	}
	return ""
}

func (x *Symbol) GetKabucomMarginBuy() bool {
	if x != nil {
		return x.KabucomMarginBuy
	}
	return false
}

func (x *Symbol) GetKabucomMarginSell() bool {
	if x != nil {
		return x.KabucomMarginSell
	}
	return false
}

func (x *Symbol) GetMarginBuy() bool {
	if x != nil {
		return x.MarginBuy
	}
	return false
}

func (x *Symbol) GetMarginSell() bool {
	if x != nil {
		return x.MarginSell
	}
	return false
}

func (x *Symbol) GetUpperLimit() float64 {
	if x != nil {
		return x.UpperLimit
	}
	return 0
}

func (x *Symbol) GetLowerLimit() float64 {
	if x != nil {
		return x.LowerLimit
	}
	return 0
}

func (x *Symbol) GetUnderlyer() string {
	if x != nil {
		return x.Underlyer
	}
	return ""
}

func (x *Symbol) GetDerivativeMonth() *timestamppb.Timestamp {
	if x != nil {
		return x.DerivativeMonth
	}
	return nil
}

func (x *Symbol) GetTradeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.TradeStart
	}
	return nil
}

func (x *Symbol) GetTradeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TradeEnd
	}
	return nil
}

func (x *Symbol) GetStrikePrice() float64 {
	if x != nil {
		return x.StrikePrice
	}
	return 0
}

func (x *Symbol) GetCallOrPut() CallPut {
	if x != nil {
		return x.CallOrPut
	}
	return CallPut_CALL_PUT_UNSPECIFIED
}

func (x *Symbol) GetClearingPrice() float64 {
	if x != nil {
		return x.ClearingPrice
	}
	return 0
}

// 銘柄コード情報
type SymbolCodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 銘柄コード
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// 銘柄名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SymbolCodeInfo) Reset() {
	*x = SymbolCodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolCodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolCodeInfo) ProtoMessage() {}

func (x *SymbolCodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolCodeInfo.ProtoReflect.Descriptor instead.
func (*SymbolCodeInfo) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{41}
}

func (x *SymbolCodeInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SymbolCodeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 気配値 + 気配値フラグ
type FirstQuote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 時刻
	//  株式銘柄の場合のみ
	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// 気配フラグ
	//   株式・先物・オプション銘柄の場合のみ
	Sign string `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"` // TODO enum化
	// 値段
	//   株式・先物・オプション銘柄の場合のみ
	Price float64 `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	// 数量
	//   株式・先物・オプション銘柄の場合のみ
	Quantity float64 `protobuf:"fixed64,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *FirstQuote) Reset() {
	*x = FirstQuote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstQuote) ProtoMessage() {}

func (x *FirstQuote) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstQuote.ProtoReflect.Descriptor instead.
func (*FirstQuote) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{42}
}

func (x *FirstQuote) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *FirstQuote) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *FirstQuote) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *FirstQuote) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// 気配値
type Quote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 値段
	//   株式・先物・オプション銘柄の場合のみ
	Price float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	// 数量
	//   株式・先物・オプション銘柄の場合のみ
	Quantity float64 `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *Quote) Reset() {
	*x = Quote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quote) ProtoMessage() {}

func (x *Quote) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quote.ProtoReflect.Descriptor instead.
func (*Quote) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{43}
}

func (x *Quote) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Quote) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// 注文リスト
type Orders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *Orders) Reset() {
	*x = Orders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Orders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Orders) ProtoMessage() {}

func (x *Orders) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Orders.ProtoReflect.Descriptor instead.
func (*Orders) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{44}
}

func (x *Orders) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

// 注文
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 状態
	State State `protobuf:"varint,2,opt,name=state,proto3,enum=kabuspb.State" json:"state,omitempty"`
	// 注文状態
	OrderState OrderState `protobuf:"varint,3,opt,name=order_state,json=orderState,proto3,enum=kabuspb.OrderState" json:"order_state,omitempty"`
	// 執行条件
	OrderType OrderType `protobuf:"varint,4,opt,name=order_type,json=orderType,proto3,enum=kabuspb.OrderType" json:"order_type,omitempty"`
	// 受注日時
	ReceiveTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=receive_time,json=receiveTime,proto3" json:"receive_time,omitempty"`
	// 銘柄コード
	SymbolCode string `protobuf:"bytes,6,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 銘柄名
	SymbolName string `protobuf:"bytes,7,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`
	// 市場コード
	Exchange OrderExchange `protobuf:"varint,8,opt,name=exchange,proto3,enum=kabuspb.OrderExchange" json:"exchange,omitempty"`
	// 市場名
	ExchangeName string `protobuf:"bytes,9,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"`
	// 有効期間条件
	TimeInForce TimeInForce `protobuf:"varint,10,opt,name=time_in_force,json=timeInForce,proto3,enum=kabuspb.TimeInForce" json:"time_in_force,omitempty"`
	// 値段
	Price float64 `protobuf:"fixed64,11,opt,name=price,proto3" json:"price,omitempty"`
	// 発注数量
	OrderQuantity float64 `protobuf:"fixed64,12,opt,name=order_quantity,json=orderQuantity,proto3" json:"order_quantity,omitempty"`
	// 約定数量
	CumulativeQuantity float64 `protobuf:"fixed64,13,opt,name=cumulative_quantity,json=cumulativeQuantity,proto3" json:"cumulative_quantity,omitempty"`
	// 売買区分
	Side Side `protobuf:"varint,14,opt,name=side,proto3,enum=kabuspb.Side" json:"side,omitempty"`
	// 取引区分
	TradeType TradeType `protobuf:"varint,15,opt,name=trade_type,json=tradeType,proto3,enum=kabuspb.TradeType" json:"trade_type,omitempty"`
	// 口座種別
	AccountType AccountType `protobuf:"varint,16,opt,name=account_type,json=accountType,proto3,enum=kabuspb.AccountType" json:"account_type,omitempty"`
	// 受渡区分
	DeliveryType DeliveryType `protobuf:"varint,17,opt,name=delivery_type,json=deliveryType,proto3,enum=kabuspb.DeliveryType" json:"delivery_type,omitempty"`
	// 注文有効期限
	ExpireDay *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=expire_day,json=expireDay,proto3" json:"expire_day,omitempty"`
	// 信用取引区分
	MarginTradeType MarginTradeType `protobuf:"varint,19,opt,name=margin_trade_type,json=marginTradeType,proto3,enum=kabuspb.MarginTradeType" json:"margin_trade_type,omitempty"`
	// プレミアム料
	MarginPremium float64 `protobuf:"fixed64,21,opt,name=margin_premium,json=marginPremium,proto3" json:"margin_premium,omitempty"`
	// 注文詳細
	Details []*OrderDetail `protobuf:"bytes,20,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{45}
}

func (x *Order) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Order) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_UNSPECIFIED
}

func (x *Order) GetOrderState() OrderState {
	if x != nil {
		return x.OrderState
	}
	return OrderState_ORDER_STATE_UNSPECIFIED
}

func (x *Order) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *Order) GetReceiveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveTime
	}
	return nil
}

func (x *Order) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *Order) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *Order) GetExchange() OrderExchange {
	if x != nil {
		return x.Exchange
	}
	return OrderExchange_ORDER_EXCHANGE_UNSPECIFIED
}

func (x *Order) GetExchangeName() string {
	if x != nil {
		return x.ExchangeName
	}
	return ""
}

func (x *Order) GetTimeInForce() TimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForce_TIME_IN_FORCE_UNSPECIFIED
}

func (x *Order) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Order) GetOrderQuantity() float64 {
	if x != nil {
		return x.OrderQuantity
	}
	return 0
}

func (x *Order) GetCumulativeQuantity() float64 {
	if x != nil {
		return x.CumulativeQuantity
	}
	return 0
}

func (x *Order) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (x *Order) GetTradeType() TradeType {
	if x != nil {
		return x.TradeType
	}
	return TradeType_TRADE_TYPE_UNSPECIFIED
}

func (x *Order) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *Order) GetDeliveryType() DeliveryType {
	if x != nil {
		return x.DeliveryType
	}
	return DeliveryType_DELIVERY_TYPE_UNSPECIFIED
}

func (x *Order) GetExpireDay() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireDay
	}
	return nil
}

func (x *Order) GetMarginTradeType() MarginTradeType {
	if x != nil {
		return x.MarginTradeType
	}
	return MarginTradeType_MARGIN_TRADE_TYPE_UNSPECIFIED
}

func (x *Order) GetMarginPremium() float64 {
	if x != nil {
		return x.MarginPremium
	}
	return 0
}

func (x *Order) GetDetails() []*OrderDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

// 注文詳細
type OrderDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// シーケンスNo
	//   注文明細レコードの生成順序です
	//   通番であるとは限りませんが、大小による順序は保たれています
	SequenceNumber int32 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// 注文詳細番号
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// 明細種別
	RecordType RecordType `protobuf:"varint,3,opt,name=record_type,json=recordType,proto3,enum=kabuspb.RecordType" json:"record_type,omitempty"`
	// 取引所番号
	ExchangeId string `protobuf:"bytes,4,opt,name=exchange_id,json=exchangeId,proto3" json:"exchange_id,omitempty"`
	// 状態
	State OrderDetailState `protobuf:"varint,5,opt,name=state,proto3,enum=kabuspb.OrderDetailState" json:"state,omitempty"`
	// 処理時刻
	TransactTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=transact_time,json=transactTime,proto3" json:"transact_time,omitempty"`
	// 執行条件
	OrderType OrderType `protobuf:"varint,7,opt,name=order_type,json=orderType,proto3,enum=kabuspb.OrderType" json:"order_type,omitempty"`
	// 値段
	Price float64 `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`
	// 数量
	Quantity float64 `protobuf:"fixed64,9,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// 約定番号
	ExecutionId string `protobuf:"bytes,10,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	// 約定日時
	ExecutionDay *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=execution_day,json=executionDay,proto3" json:"execution_day,omitempty"`
	// 受渡日
	DeliveryDay *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=delivery_day,json=deliveryDay,proto3" json:"delivery_day,omitempty"`
	// 手数料
	//  注文詳細の明細種別が約定の場合に設定
	Commission float64 `protobuf:"fixed64,13,opt,name=commission,proto3" json:"commission,omitempty"`
	// 手数料消費税
	//   明細種別は約定の場合にのみ表示されます
	CommissionTax float64 `protobuf:"fixed64,14,opt,name=commission_tax,json=commissionTax,proto3" json:"commission_tax,omitempty"`
}

func (x *OrderDetail) Reset() {
	*x = OrderDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDetail) ProtoMessage() {}

func (x *OrderDetail) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDetail.ProtoReflect.Descriptor instead.
func (*OrderDetail) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{46}
}

func (x *OrderDetail) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *OrderDetail) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrderDetail) GetRecordType() RecordType {
	if x != nil {
		return x.RecordType
	}
	return RecordType_RECORD_TYPE_UNSPECIFIED
}

func (x *OrderDetail) GetExchangeId() string {
	if x != nil {
		return x.ExchangeId
	}
	return ""
}

func (x *OrderDetail) GetState() OrderDetailState {
	if x != nil {
		return x.State
	}
	return OrderDetailState_ORDER_DETAIL_STATE_UNSPECIFIED
}

func (x *OrderDetail) GetTransactTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactTime
	}
	return nil
}

func (x *OrderDetail) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *OrderDetail) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderDetail) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OrderDetail) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *OrderDetail) GetExecutionDay() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionDay
	}
	return nil
}

func (x *OrderDetail) GetDeliveryDay() *timestamppb.Timestamp {
	if x != nil {
		return x.DeliveryDay
	}
	return nil
}

func (x *OrderDetail) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *OrderDetail) GetCommissionTax() float64 {
	if x != nil {
		return x.CommissionTax
	}
	return 0
}

// ポジションリスト
type Positions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positions []*Position `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *Positions) Reset() {
	*x = Positions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Positions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Positions) ProtoMessage() {}

func (x *Positions) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Positions.ProtoReflect.Descriptor instead.
func (*Positions) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{47}
}

func (x *Positions) GetPositions() []*Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

// ポジション
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 約定番号
	ExecutionId string `protobuf:"bytes,1,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	// 口座種別
	AccountType AccountType `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3,enum=kabuspb.AccountType" json:"account_type,omitempty"`
	// 銘柄コード
	SymbolCode string `protobuf:"bytes,3,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 銘柄名
	SymbolName string `protobuf:"bytes,4,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`
	// 市場コード
	Exchange Exchange `protobuf:"varint,5,opt,name=exchange,proto3,enum=kabuspb.Exchange" json:"exchange,omitempty"`
	// 市場名
	ExchangeName string `protobuf:"bytes,6,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"`
	// 銘柄種別
	//   先物・オプション銘柄の場合のみ
	SecurityType SecurityType `protobuf:"varint,7,opt,name=security_type,json=securityType,proto3,enum=kabuspb.SecurityType" json:"security_type,omitempty"`
	// 約定日（建玉日）
	//   信用・先物・オプションの場合のみ
	ExecutionDay *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=execution_day,json=executionDay,proto3" json:"execution_day,omitempty"`
	// 値段
	Price float64 `protobuf:"fixed64,9,opt,name=price,proto3" json:"price,omitempty"`
	// 残数量
	LeavesQuantity float64 `protobuf:"fixed64,10,opt,name=leaves_quantity,json=leavesQuantity,proto3" json:"leaves_quantity,omitempty"`
	// 拘束数量（保有数量）
	HoldQuantity float64 `protobuf:"fixed64,11,opt,name=hold_quantity,json=holdQuantity,proto3" json:"hold_quantity,omitempty"`
	// 売買区分
	Side Side `protobuf:"varint,12,opt,name=side,proto3,enum=kabuspb.Side" json:"side,omitempty"`
	// 諸経費
	//   信用・先物・オプションの場合のみ
	Expenses float64 `protobuf:"fixed64,13,opt,name=expenses,proto3" json:"expenses,omitempty"`
	// 手数料
	//   信用・先物・オプションの場合のみ
	Commission float64 `protobuf:"fixed64,14,opt,name=commission,proto3" json:"commission,omitempty"`
	// 手数料消費税
	//   信用・先物・オプションの場合のみ
	CommissionTax float64 `protobuf:"fixed64,15,opt,name=commission_tax,json=commissionTax,proto3" json:"commission_tax,omitempty"`
	// 返済期日
	//   信用・先物・オプションの場合のみ
	ExpireDay *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=expire_day,json=expireDay,proto3" json:"expire_day,omitempty"`
	// 信用取引区分
	//   信用の場合のみ
	MarginTradeType MarginTradeType `protobuf:"varint,17,opt,name=margin_trade_type,json=marginTradeType,proto3,enum=kabuspb.MarginTradeType" json:"margin_trade_type,omitempty"`
	// 現在値
	CurrentPrice float64 `protobuf:"fixed64,18,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`
	// 評価金額
	Valuation float64 `protobuf:"fixed64,19,opt,name=valuation,proto3" json:"valuation,omitempty"`
	// 評価損益額
	ProfitLoss float64 `protobuf:"fixed64,20,opt,name=profit_loss,json=profitLoss,proto3" json:"profit_loss,omitempty"`
	// 評価損益率
	ProfitLossRate float64 `protobuf:"fixed64,21,opt,name=profit_loss_rate,json=profitLossRate,proto3" json:"profit_loss_rate,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{48}
}

func (x *Position) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *Position) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *Position) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *Position) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *Position) GetExchange() Exchange {
	if x != nil {
		return x.Exchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

func (x *Position) GetExchangeName() string {
	if x != nil {
		return x.ExchangeName
	}
	return ""
}

func (x *Position) GetSecurityType() SecurityType {
	if x != nil {
		return x.SecurityType
	}
	return SecurityType_SECURITY_TYPE_UNSPECIFIED
}

func (x *Position) GetExecutionDay() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionDay
	}
	return nil
}

func (x *Position) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Position) GetLeavesQuantity() float64 {
	if x != nil {
		return x.LeavesQuantity
	}
	return 0
}

func (x *Position) GetHoldQuantity() float64 {
	if x != nil {
		return x.HoldQuantity
	}
	return 0
}

func (x *Position) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (x *Position) GetExpenses() float64 {
	if x != nil {
		return x.Expenses
	}
	return 0
}

func (x *Position) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *Position) GetCommissionTax() float64 {
	if x != nil {
		return x.CommissionTax
	}
	return 0
}

func (x *Position) GetExpireDay() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireDay
	}
	return nil
}

func (x *Position) GetMarginTradeType() MarginTradeType {
	if x != nil {
		return x.MarginTradeType
	}
	return MarginTradeType_MARGIN_TRADE_TYPE_UNSPECIFIED
}

func (x *Position) GetCurrentPrice() float64 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

func (x *Position) GetValuation() float64 {
	if x != nil {
		return x.Valuation
	}
	return 0
}

func (x *Position) GetProfitLoss() float64 {
	if x != nil {
		return x.ProfitLoss
	}
	return 0
}

func (x *Position) GetProfitLossRate() float64 {
	if x != nil {
		return x.ProfitLossRate
	}
	return 0
}

// 銘柄登録
type RegisteredSymbols struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 現在登録されている銘柄のリスト
	Symbols []*RegisterSymbol `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
	// 登録銘柄数
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RegisteredSymbols) Reset() {
	*x = RegisteredSymbols{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredSymbols) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredSymbols) ProtoMessage() {}

func (x *RegisteredSymbols) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredSymbols.ProtoReflect.Descriptor instead.
func (*RegisteredSymbols) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{49}
}

func (x *RegisteredSymbols) GetSymbols() []*RegisterSymbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *RegisteredSymbols) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 銘柄登録の詳細
type RegisterSymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 銘柄コード
	SymbolCode string `protobuf:"bytes,1,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 市場
	Exchange Exchange `protobuf:"varint,2,opt,name=exchange,proto3,enum=kabuspb.Exchange" json:"exchange,omitempty"`
}

func (x *RegisterSymbol) Reset() {
	*x = RegisterSymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSymbol) ProtoMessage() {}

func (x *RegisterSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSymbol.ProtoReflect.Descriptor instead.
func (*RegisterSymbol) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{50}
}

func (x *RegisterSymbol) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *RegisterSymbol) GetExchange() Exchange {
	if x != nil {
		return x.Exchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

// 株価ランキング
type PriceRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ランキング種別
	Type PriceRankingType `protobuf:"varint,1,opt,name=type,proto3,enum=kabuspb.PriceRankingType" json:"type,omitempty"`
	// 市場・上場部
	ExchangeDivision ExchangeDivision `protobuf:"varint,2,opt,name=exchange_division,json=exchangeDivision,proto3,enum=kabuspb.ExchangeDivision" json:"exchange_division,omitempty"`
	// ランキング
	Ranking []*PriceRankingInfo `protobuf:"bytes,3,rep,name=ranking,proto3" json:"ranking,omitempty"`
}

func (x *PriceRanking) Reset() {
	*x = PriceRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceRanking) ProtoMessage() {}

func (x *PriceRanking) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceRanking.ProtoReflect.Descriptor instead.
func (*PriceRanking) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{51}
}

func (x *PriceRanking) GetType() PriceRankingType {
	if x != nil {
		return x.Type
	}
	return PriceRankingType_PRICE_RANKING_TYPE_UNSPECIFIED
}

func (x *PriceRanking) GetExchangeDivision() ExchangeDivision {
	if x != nil {
		return x.ExchangeDivision
	}
	return ExchangeDivision_EXCHANGE_DIVISION_UNSPECIFIED
}

func (x *PriceRanking) GetRanking() []*PriceRankingInfo {
	if x != nil {
		return x.Ranking
	}
	return nil
}

// 株価ランキング詳細
type PriceRankingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 順位
	No int32 `protobuf:"varint,1,opt,name=no,proto3" json:"no,omitempty"`
	// トレンド
	Trend RankingTrend `protobuf:"varint,2,opt,name=trend,proto3,enum=kabuspb.RankingTrend" json:"trend,omitempty"`
	// 平均順位
	//   100位以下は「999」となります
	AverageRanking float64 `protobuf:"fixed64,3,opt,name=average_ranking,json=averageRanking,proto3" json:"average_ranking,omitempty"`
	// 銘柄コード
	SymbolCode string `protobuf:"bytes,4,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 銘柄名称
	SymbolName string `protobuf:"bytes,5,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`
	// 現在値
	CurrentPrice float64 `protobuf:"fixed64,6,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`
	// 前日比
	ChangeRatio float64 `protobuf:"fixed64,7,opt,name=change_ratio,json=changeRatio,proto3" json:"change_ratio,omitempty"`
	// 騰落率（%）
	ChangePercentage float64 `protobuf:"fixed64,8,opt,name=change_percentage,json=changePercentage,proto3" json:"change_percentage,omitempty"`
	// 時刻 HH:mm
	//   日付は返しません
	CurrentPriceTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=current_price_time,json=currentPriceTime,proto3" json:"current_price_time,omitempty"`
	// 売買高
	TradingVolume float64 `protobuf:"fixed64,10,opt,name=trading_volume,json=tradingVolume,proto3" json:"trading_volume,omitempty"`
	// 売買代金
	Turnover float64 `protobuf:"fixed64,11,opt,name=turnover,proto3" json:"turnover,omitempty"`
	// 市場名
	ExchangeName string `protobuf:"bytes,12,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"`
	// 業種名
	IndustryName string `protobuf:"bytes,13,opt,name=industry_name,json=industryName,proto3" json:"industry_name,omitempty"`
}

func (x *PriceRankingInfo) Reset() {
	*x = PriceRankingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceRankingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceRankingInfo) ProtoMessage() {}

func (x *PriceRankingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceRankingInfo.ProtoReflect.Descriptor instead.
func (*PriceRankingInfo) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{52}
}

func (x *PriceRankingInfo) GetNo() int32 {
	if x != nil {
		return x.No
	}
	return 0
}

func (x *PriceRankingInfo) GetTrend() RankingTrend {
	if x != nil {
		return x.Trend
	}
	return RankingTrend_RANKING_TREND_UNSPECIFIED
}

func (x *PriceRankingInfo) GetAverageRanking() float64 {
	if x != nil {
		return x.AverageRanking
	}
	return 0
}

func (x *PriceRankingInfo) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *PriceRankingInfo) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *PriceRankingInfo) GetCurrentPrice() float64 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

func (x *PriceRankingInfo) GetChangeRatio() float64 {
	if x != nil {
		return x.ChangeRatio
	}
	return 0
}

func (x *PriceRankingInfo) GetChangePercentage() float64 {
	if x != nil {
		return x.ChangePercentage
	}
	return 0
}

func (x *PriceRankingInfo) GetCurrentPriceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentPriceTime
	}
	return nil
}

func (x *PriceRankingInfo) GetTradingVolume() float64 {
	if x != nil {
		return x.TradingVolume
	}
	return 0
}

func (x *PriceRankingInfo) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *PriceRankingInfo) GetExchangeName() string {
	if x != nil {
		return x.ExchangeName
	}
	return ""
}

func (x *PriceRankingInfo) GetIndustryName() string {
	if x != nil {
		return x.IndustryName
	}
	return ""
}

// TICK回数ランキング
type TickRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 市場・上場部
	ExchangeDivision ExchangeDivision `protobuf:"varint,2,opt,name=exchange_division,json=exchangeDivision,proto3,enum=kabuspb.ExchangeDivision" json:"exchange_division,omitempty"`
	// ランキング
	Ranking []*TickRankingInfo `protobuf:"bytes,3,rep,name=ranking,proto3" json:"ranking,omitempty"`
}

func (x *TickRanking) Reset() {
	*x = TickRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickRanking) ProtoMessage() {}

func (x *TickRanking) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickRanking.ProtoReflect.Descriptor instead.
func (*TickRanking) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{53}
}

func (x *TickRanking) GetExchangeDivision() ExchangeDivision {
	if x != nil {
		return x.ExchangeDivision
	}
	return ExchangeDivision_EXCHANGE_DIVISION_UNSPECIFIED
}

func (x *TickRanking) GetRanking() []*TickRankingInfo {
	if x != nil {
		return x.Ranking
	}
	return nil
}

// TICK回数ランキング詳細
type TickRankingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 順位
	No int32 `protobuf:"varint,1,opt,name=no,proto3" json:"no,omitempty"`
	// トレンド
	Trend RankingTrend `protobuf:"varint,2,opt,name=trend,proto3,enum=kabuspb.RankingTrend" json:"trend,omitempty"`
	// 平均順位
	//   100位以下は「999」となります
	AverageRanking float64 `protobuf:"fixed64,3,opt,name=average_ranking,json=averageRanking,proto3" json:"average_ranking,omitempty"`
	// 銘柄コード
	SymbolCode string `protobuf:"bytes,4,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 銘柄名称
	SymbolName string `protobuf:"bytes,5,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`
	// 現在値
	CurrentPrice float64 `protobuf:"fixed64,6,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`
	// 前日比
	ChangeRatio float64 `protobuf:"fixed64,7,opt,name=change_ratio,json=changeRatio,proto3" json:"change_ratio,omitempty"`
	// TICK回数
	TickCount int32 `protobuf:"varint,8,opt,name=tick_count,json=tickCount,proto3" json:"tick_count,omitempty"`
	// UP
	UpCount int32 `protobuf:"varint,9,opt,name=up_count,json=upCount,proto3" json:"up_count,omitempty"`
	// DOWN
	DownCount int32 `protobuf:"varint,10,opt,name=down_count,json=downCount,proto3" json:"down_count,omitempty"`
	// 騰落率（%）
	ChangePercentage float64 `protobuf:"fixed64,11,opt,name=change_percentage,json=changePercentage,proto3" json:"change_percentage,omitempty"`
	// 売買高
	TradingVolume float64 `protobuf:"fixed64,12,opt,name=trading_volume,json=tradingVolume,proto3" json:"trading_volume,omitempty"`
	// 売買代金
	Turnover float64 `protobuf:"fixed64,13,opt,name=turnover,proto3" json:"turnover,omitempty"`
	// 市場名
	ExchangeName string `protobuf:"bytes,14,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"`
	// 業種名
	IndustryName string `protobuf:"bytes,15,opt,name=industry_name,json=industryName,proto3" json:"industry_name,omitempty"`
}

func (x *TickRankingInfo) Reset() {
	*x = TickRankingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickRankingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickRankingInfo) ProtoMessage() {}

func (x *TickRankingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickRankingInfo.ProtoReflect.Descriptor instead.
func (*TickRankingInfo) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{54}
}

func (x *TickRankingInfo) GetNo() int32 {
	if x != nil {
		return x.No
	}
	return 0
}

func (x *TickRankingInfo) GetTrend() RankingTrend {
	if x != nil {
		return x.Trend
	}
	return RankingTrend_RANKING_TREND_UNSPECIFIED
}

func (x *TickRankingInfo) GetAverageRanking() float64 {
	if x != nil {
		return x.AverageRanking
	}
	return 0
}

func (x *TickRankingInfo) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *TickRankingInfo) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *TickRankingInfo) GetCurrentPrice() float64 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

func (x *TickRankingInfo) GetChangeRatio() float64 {
	if x != nil {
		return x.ChangeRatio
	}
	return 0
}

func (x *TickRankingInfo) GetTickCount() int32 {
	if x != nil {
		return x.TickCount
	}
	return 0
}

func (x *TickRankingInfo) GetUpCount() int32 {
	if x != nil {
		return x.UpCount
	}
	return 0
}

func (x *TickRankingInfo) GetDownCount() int32 {
	if x != nil {
		return x.DownCount
	}
	return 0
}

func (x *TickRankingInfo) GetChangePercentage() float64 {
	if x != nil {
		return x.ChangePercentage
	}
	return 0
}

func (x *TickRankingInfo) GetTradingVolume() float64 {
	if x != nil {
		return x.TradingVolume
	}
	return 0
}

func (x *TickRankingInfo) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *TickRankingInfo) GetExchangeName() string {
	if x != nil {
		return x.ExchangeName
	}
	return ""
}

func (x *TickRankingInfo) GetIndustryName() string {
	if x != nil {
		return x.IndustryName
	}
	return ""
}

// 売買高ランキング
type VolumeRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 市場・上場部
	ExchangeDivision ExchangeDivision `protobuf:"varint,2,opt,name=exchange_division,json=exchangeDivision,proto3,enum=kabuspb.ExchangeDivision" json:"exchange_division,omitempty"`
	// ランキング
	Ranking []*VolumeRankingInfo `protobuf:"bytes,3,rep,name=ranking,proto3" json:"ranking,omitempty"`
}

func (x *VolumeRanking) Reset() {
	*x = VolumeRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeRanking) ProtoMessage() {}

func (x *VolumeRanking) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeRanking.ProtoReflect.Descriptor instead.
func (*VolumeRanking) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{55}
}

func (x *VolumeRanking) GetExchangeDivision() ExchangeDivision {
	if x != nil {
		return x.ExchangeDivision
	}
	return ExchangeDivision_EXCHANGE_DIVISION_UNSPECIFIED
}

func (x *VolumeRanking) GetRanking() []*VolumeRankingInfo {
	if x != nil {
		return x.Ranking
	}
	return nil
}

// 売買高ランキング詳細
type VolumeRankingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 順位
	No int32 `protobuf:"varint,1,opt,name=no,proto3" json:"no,omitempty"`
	// トレンド
	Trend RankingTrend `protobuf:"varint,2,opt,name=trend,proto3,enum=kabuspb.RankingTrend" json:"trend,omitempty"`
	// 平均順位
	//   100位以下は「999」となります
	AverageRanking float64 `protobuf:"fixed64,3,opt,name=average_ranking,json=averageRanking,proto3" json:"average_ranking,omitempty"`
	// 銘柄コード
	SymbolCode string `protobuf:"bytes,4,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 銘柄名称
	SymbolName string `protobuf:"bytes,5,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`
	// 現在値
	CurrentPrice float64 `protobuf:"fixed64,6,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`
	// 前日比
	ChangeRatio float64 `protobuf:"fixed64,7,opt,name=change_ratio,json=changeRatio,proto3" json:"change_ratio,omitempty"`
	// 売買高急増（％）
	RapidTradePercentage float64 `protobuf:"fixed64,8,opt,name=rapid_trade_percentage,json=rapidTradePercentage,proto3" json:"rapid_trade_percentage,omitempty"`
	// 売買高
	TradingVolume float64 `protobuf:"fixed64,9,opt,name=trading_volume,json=tradingVolume,proto3" json:"trading_volume,omitempty"`
	// 時刻 HH:mm
	//   日付は返しません
	CurrentPriceTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=current_price_time,json=currentPriceTime,proto3" json:"current_price_time,omitempty"`
	// 騰落率（%）
	ChangePercentage float64 `protobuf:"fixed64,11,opt,name=change_percentage,json=changePercentage,proto3" json:"change_percentage,omitempty"`
	// 市場名
	ExchangeName string `protobuf:"bytes,12,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"`
	// 業種名
	IndustryName string `protobuf:"bytes,13,opt,name=industry_name,json=industryName,proto3" json:"industry_name,omitempty"`
}

func (x *VolumeRankingInfo) Reset() {
	*x = VolumeRankingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeRankingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeRankingInfo) ProtoMessage() {}

func (x *VolumeRankingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeRankingInfo.ProtoReflect.Descriptor instead.
func (*VolumeRankingInfo) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{56}
}

func (x *VolumeRankingInfo) GetNo() int32 {
	if x != nil {
		return x.No
	}
	return 0
}

func (x *VolumeRankingInfo) GetTrend() RankingTrend {
	if x != nil {
		return x.Trend
	}
	return RankingTrend_RANKING_TREND_UNSPECIFIED
}

func (x *VolumeRankingInfo) GetAverageRanking() float64 {
	if x != nil {
		return x.AverageRanking
	}
	return 0
}

func (x *VolumeRankingInfo) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *VolumeRankingInfo) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *VolumeRankingInfo) GetCurrentPrice() float64 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

func (x *VolumeRankingInfo) GetChangeRatio() float64 {
	if x != nil {
		return x.ChangeRatio
	}
	return 0
}

func (x *VolumeRankingInfo) GetRapidTradePercentage() float64 {
	if x != nil {
		return x.RapidTradePercentage
	}
	return 0
}

func (x *VolumeRankingInfo) GetTradingVolume() float64 {
	if x != nil {
		return x.TradingVolume
	}
	return 0
}

func (x *VolumeRankingInfo) GetCurrentPriceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentPriceTime
	}
	return nil
}

func (x *VolumeRankingInfo) GetChangePercentage() float64 {
	if x != nil {
		return x.ChangePercentage
	}
	return 0
}

func (x *VolumeRankingInfo) GetExchangeName() string {
	if x != nil {
		return x.ExchangeName
	}
	return ""
}

func (x *VolumeRankingInfo) GetIndustryName() string {
	if x != nil {
		return x.IndustryName
	}
	return ""
}

// 売買代金ランキング
type ValueRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 市場・上場部
	ExchangeDivision ExchangeDivision `protobuf:"varint,2,opt,name=exchange_division,json=exchangeDivision,proto3,enum=kabuspb.ExchangeDivision" json:"exchange_division,omitempty"`
	// ランキング
	Ranking []*ValueRankingInfo `protobuf:"bytes,3,rep,name=ranking,proto3" json:"ranking,omitempty"`
}

func (x *ValueRanking) Reset() {
	*x = ValueRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueRanking) ProtoMessage() {}

func (x *ValueRanking) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueRanking.ProtoReflect.Descriptor instead.
func (*ValueRanking) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{57}
}

func (x *ValueRanking) GetExchangeDivision() ExchangeDivision {
	if x != nil {
		return x.ExchangeDivision
	}
	return ExchangeDivision_EXCHANGE_DIVISION_UNSPECIFIED
}

func (x *ValueRanking) GetRanking() []*ValueRankingInfo {
	if x != nil {
		return x.Ranking
	}
	return nil
}

// 売買代金ランキング詳細
type ValueRankingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 順位
	No int32 `protobuf:"varint,1,opt,name=no,proto3" json:"no,omitempty"`
	// トレンド
	Trend RankingTrend `protobuf:"varint,2,opt,name=trend,proto3,enum=kabuspb.RankingTrend" json:"trend,omitempty"`
	// 平均順位
	//   100位以下は「999」となります
	AverageRanking float64 `protobuf:"fixed64,3,opt,name=average_ranking,json=averageRanking,proto3" json:"average_ranking,omitempty"`
	// 銘柄コード
	SymbolCode string `protobuf:"bytes,4,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 銘柄名称
	SymbolName string `protobuf:"bytes,5,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`
	// 現在値
	CurrentPrice float64 `protobuf:"fixed64,6,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`
	// 前日比
	ChangeRatio float64 `protobuf:"fixed64,7,opt,name=change_ratio,json=changeRatio,proto3" json:"change_ratio,omitempty"`
	// 代金急増（％）
	RapidPaymentPercentage float64 `protobuf:"fixed64,8,opt,name=rapid_payment_percentage,json=rapidPaymentPercentage,proto3" json:"rapid_payment_percentage,omitempty"`
	// 売買代金
	Turnover float64 `protobuf:"fixed64,9,opt,name=turnover,proto3" json:"turnover,omitempty"`
	// 時刻 HH:mm
	//   日付は返しません
	CurrentPriceTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=current_price_time,json=currentPriceTime,proto3" json:"current_price_time,omitempty"`
	// 騰落率（%）
	ChangePercentage float64 `protobuf:"fixed64,11,opt,name=change_percentage,json=changePercentage,proto3" json:"change_percentage,omitempty"`
	// 市場名
	ExchangeName string `protobuf:"bytes,12,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"`
	// 業種名
	IndustryName string `protobuf:"bytes,13,opt,name=industry_name,json=industryName,proto3" json:"industry_name,omitempty"`
}

func (x *ValueRankingInfo) Reset() {
	*x = ValueRankingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueRankingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueRankingInfo) ProtoMessage() {}

func (x *ValueRankingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueRankingInfo.ProtoReflect.Descriptor instead.
func (*ValueRankingInfo) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{58}
}

func (x *ValueRankingInfo) GetNo() int32 {
	if x != nil {
		return x.No
	}
	return 0
}

func (x *ValueRankingInfo) GetTrend() RankingTrend {
	if x != nil {
		return x.Trend
	}
	return RankingTrend_RANKING_TREND_UNSPECIFIED
}

func (x *ValueRankingInfo) GetAverageRanking() float64 {
	if x != nil {
		return x.AverageRanking
	}
	return 0
}

func (x *ValueRankingInfo) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *ValueRankingInfo) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *ValueRankingInfo) GetCurrentPrice() float64 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

func (x *ValueRankingInfo) GetChangeRatio() float64 {
	if x != nil {
		return x.ChangeRatio
	}
	return 0
}

func (x *ValueRankingInfo) GetRapidPaymentPercentage() float64 {
	if x != nil {
		return x.RapidPaymentPercentage
	}
	return 0
}

func (x *ValueRankingInfo) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *ValueRankingInfo) GetCurrentPriceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentPriceTime
	}
	return nil
}

func (x *ValueRankingInfo) GetChangePercentage() float64 {
	if x != nil {
		return x.ChangePercentage
	}
	return 0
}

func (x *ValueRankingInfo) GetExchangeName() string {
	if x != nil {
		return x.ExchangeName
	}
	return ""
}

func (x *ValueRankingInfo) GetIndustryName() string {
	if x != nil {
		return x.IndustryName
	}
	return ""
}

// 信用ランキング
type MarginRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 信用ランキング種別
	Type MarginRankingType `protobuf:"varint,1,opt,name=type,proto3,enum=kabuspb.MarginRankingType" json:"type,omitempty"`
	// 市場・上場部
	ExchangeDivision ExchangeDivision `protobuf:"varint,2,opt,name=exchange_division,json=exchangeDivision,proto3,enum=kabuspb.ExchangeDivision" json:"exchange_division,omitempty"`
	// ランキング
	Ranking []*MarginRankingInfo `protobuf:"bytes,3,rep,name=ranking,proto3" json:"ranking,omitempty"`
}

func (x *MarginRanking) Reset() {
	*x = MarginRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginRanking) ProtoMessage() {}

func (x *MarginRanking) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginRanking.ProtoReflect.Descriptor instead.
func (*MarginRanking) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{59}
}

func (x *MarginRanking) GetType() MarginRankingType {
	if x != nil {
		return x.Type
	}
	return MarginRankingType_MARGIN_RANKING_TYPE_UNSPECIFIED
}

func (x *MarginRanking) GetExchangeDivision() ExchangeDivision {
	if x != nil {
		return x.ExchangeDivision
	}
	return ExchangeDivision_EXCHANGE_DIVISION_UNSPECIFIED
}

func (x *MarginRanking) GetRanking() []*MarginRankingInfo {
	if x != nil {
		return x.Ranking
	}
	return nil
}

// 信用ランキング詳細
type MarginRankingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 順位
	No int32 `protobuf:"varint,1,opt,name=no,proto3" json:"no,omitempty"`
	// 銘柄コード
	SymbolCode string `protobuf:"bytes,2,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 銘柄名称
	SymbolName string `protobuf:"bytes,3,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`
	// 売残（千株）
	SellRapidPaymentPercentage float64 `protobuf:"fixed64,4,opt,name=sell_rapid_payment_percentage,json=sellRapidPaymentPercentage,proto3" json:"sell_rapid_payment_percentage,omitempty"`
	// 売残前週比
	SellLastWeekRatio float64 `protobuf:"fixed64,5,opt,name=sell_last_week_ratio,json=sellLastWeekRatio,proto3" json:"sell_last_week_ratio,omitempty"`
	// 買残（千株）
	BuyRapidPaymentPercentage float64 `protobuf:"fixed64,6,opt,name=buy_rapid_payment_percentage,json=buyRapidPaymentPercentage,proto3" json:"buy_rapid_payment_percentage,omitempty"`
	// 買残前週比
	BuyLastWeekRatio float64 `protobuf:"fixed64,7,opt,name=buy_last_week_ratio,json=buyLastWeekRatio,proto3" json:"buy_last_week_ratio,omitempty"`
	// 倍率
	Ratio float64 `protobuf:"fixed64,8,opt,name=ratio,proto3" json:"ratio,omitempty"`
	// 市場名
	ExchangeName string `protobuf:"bytes,9,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"`
	// 業種名
	IndustryName string `protobuf:"bytes,10,opt,name=industry_name,json=industryName,proto3" json:"industry_name,omitempty"`
}

func (x *MarginRankingInfo) Reset() {
	*x = MarginRankingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginRankingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginRankingInfo) ProtoMessage() {}

func (x *MarginRankingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginRankingInfo.ProtoReflect.Descriptor instead.
func (*MarginRankingInfo) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{60}
}

func (x *MarginRankingInfo) GetNo() int32 {
	if x != nil {
		return x.No
	}
	return 0
}

func (x *MarginRankingInfo) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *MarginRankingInfo) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *MarginRankingInfo) GetSellRapidPaymentPercentage() float64 {
	if x != nil {
		return x.SellRapidPaymentPercentage
	}
	return 0
}

func (x *MarginRankingInfo) GetSellLastWeekRatio() float64 {
	if x != nil {
		return x.SellLastWeekRatio
	}
	return 0
}

func (x *MarginRankingInfo) GetBuyRapidPaymentPercentage() float64 {
	if x != nil {
		return x.BuyRapidPaymentPercentage
	}
	return 0
}

func (x *MarginRankingInfo) GetBuyLastWeekRatio() float64 {
	if x != nil {
		return x.BuyLastWeekRatio
	}
	return 0
}

func (x *MarginRankingInfo) GetRatio() float64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *MarginRankingInfo) GetExchangeName() string {
	if x != nil {
		return x.ExchangeName
	}
	return ""
}

func (x *MarginRankingInfo) GetIndustryName() string {
	if x != nil {
		return x.IndustryName
	}
	return ""
}

// 業種別ランキング
type IndustryRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 信用ランキング種別
	Type IndustryRankingType `protobuf:"varint,1,opt,name=type,proto3,enum=kabuspb.IndustryRankingType" json:"type,omitempty"`
	// 市場・上場部
	ExchangeDivision ExchangeDivision `protobuf:"varint,2,opt,name=exchange_division,json=exchangeDivision,proto3,enum=kabuspb.ExchangeDivision" json:"exchange_division,omitempty"`
	// ランキング
	Ranking []*IndustryRankingInfo `protobuf:"bytes,3,rep,name=ranking,proto3" json:"ranking,omitempty"`
}

func (x *IndustryRanking) Reset() {
	*x = IndustryRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndustryRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndustryRanking) ProtoMessage() {}

func (x *IndustryRanking) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndustryRanking.ProtoReflect.Descriptor instead.
func (*IndustryRanking) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{61}
}

func (x *IndustryRanking) GetType() IndustryRankingType {
	if x != nil {
		return x.Type
	}
	return IndustryRankingType_INDUSTRY_RANKING_TYPE_UNSPECIFIED
}

func (x *IndustryRanking) GetExchangeDivision() ExchangeDivision {
	if x != nil {
		return x.ExchangeDivision
	}
	return ExchangeDivision_EXCHANGE_DIVISION_UNSPECIFIED
}

func (x *IndustryRanking) GetRanking() []*IndustryRankingInfo {
	if x != nil {
		return x.Ranking
	}
	return nil
}

// 業種別ランキング詳細
type IndustryRankingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 順位
	No int32 `protobuf:"varint,1,opt,name=no,proto3" json:"no,omitempty"`
	// トレンド
	Trend RankingTrend `protobuf:"varint,2,opt,name=trend,proto3,enum=kabuspb.RankingTrend" json:"trend,omitempty"`
	// 平均順位
	//   100位以下は「999」となります
	AverageRanking float64 `protobuf:"fixed64,3,opt,name=average_ranking,json=averageRanking,proto3" json:"average_ranking,omitempty"`
	// 業種コード
	IndustryCode string `protobuf:"bytes,4,opt,name=industry_code,json=industryCode,proto3" json:"industry_code,omitempty"`
	// 業種名
	IndustryName string `protobuf:"bytes,5,opt,name=industry_name,json=industryName,proto3" json:"industry_name,omitempty"`
	// 現在値
	CurrentPrice float64 `protobuf:"fixed64,6,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`
	// 前日比
	ChangeRatio float64 `protobuf:"fixed64,7,opt,name=change_ratio,json=changeRatio,proto3" json:"change_ratio,omitempty"`
	// 時刻 HH:mm
	//   日付は返しません
	CurrentPriceTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=current_price_time,json=currentPriceTime,proto3" json:"current_price_time,omitempty"`
	// 騰落率（%）
	ChangePercentage float64 `protobuf:"fixed64,9,opt,name=change_percentage,json=changePercentage,proto3" json:"change_percentage,omitempty"`
}

func (x *IndustryRankingInfo) Reset() {
	*x = IndustryRankingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndustryRankingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndustryRankingInfo) ProtoMessage() {}

func (x *IndustryRankingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndustryRankingInfo.ProtoReflect.Descriptor instead.
func (*IndustryRankingInfo) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{62}
}

func (x *IndustryRankingInfo) GetNo() int32 {
	if x != nil {
		return x.No
	}
	return 0
}

func (x *IndustryRankingInfo) GetTrend() RankingTrend {
	if x != nil {
		return x.Trend
	}
	return RankingTrend_RANKING_TREND_UNSPECIFIED
}

func (x *IndustryRankingInfo) GetAverageRanking() float64 {
	if x != nil {
		return x.AverageRanking
	}
	return 0
}

func (x *IndustryRankingInfo) GetIndustryCode() string {
	if x != nil {
		return x.IndustryCode
	}
	return ""
}

func (x *IndustryRankingInfo) GetIndustryName() string {
	if x != nil {
		return x.IndustryName
	}
	return ""
}

func (x *IndustryRankingInfo) GetCurrentPrice() float64 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

func (x *IndustryRankingInfo) GetChangeRatio() float64 {
	if x != nil {
		return x.ChangeRatio
	}
	return 0
}

func (x *IndustryRankingInfo) GetCurrentPriceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentPriceTime
	}
	return nil
}

func (x *IndustryRankingInfo) GetChangePercentage() float64 {
	if x != nil {
		return x.ChangePercentage
	}
	return 0
}

// 注文発注レスポンス
type OrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 結果コード
	//   0が成功
	//   それ以外はエラーコード
	ResultCode int32 `protobuf:"varint,1,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	// 受付注文番号
	OrderId string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *OrderResponse) Reset() {
	*x = OrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderResponse) ProtoMessage() {}

func (x *OrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderResponse.ProtoReflect.Descriptor instead.
func (*OrderResponse) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{63}
}

func (x *OrderResponse) GetResultCode() int32 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

func (x *OrderResponse) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

// 取引余力（現物）
type StockWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 現物買付可能額
	StockAccountWallet float64 `protobuf:"fixed64,1,opt,name=stock_account_wallet,json=stockAccountWallet,proto3" json:"stock_account_wallet,omitempty"`
}

func (x *StockWallet) Reset() {
	*x = StockWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockWallet) ProtoMessage() {}

func (x *StockWallet) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockWallet.ProtoReflect.Descriptor instead.
func (*StockWallet) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{64}
}

func (x *StockWallet) GetStockAccountWallet() float64 {
	if x != nil {
		return x.StockAccountWallet
	}
	return 0
}

// 取引余力（信用）
type MarginWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 信用新規可能額
	MarginAccountWallet float64 `protobuf:"fixed64,1,opt,name=margin_account_wallet,json=marginAccountWallet,proto3" json:"margin_account_wallet,omitempty"`
	// 保証金維持率
	//   銘柄指定の場合のみ
	DepositKeepRate float64 `protobuf:"fixed64,2,opt,name=deposit_keep_rate,json=depositKeepRate,proto3" json:"deposit_keep_rate,omitempty"`
	// 委託保証金率
	//   銘柄指定の場合のみ
	ConsignmentDepositRate float64 `protobuf:"fixed64,3,opt,name=consignment_deposit_rate,json=consignmentDepositRate,proto3" json:"consignment_deposit_rate,omitempty"`
	// 現金委託保証金率
	//   銘柄指定の場合のみ
	CashOfConsignmentDepositRate float64 `protobuf:"fixed64,4,opt,name=cash_of_consignment_deposit_rate,json=cashOfConsignmentDepositRate,proto3" json:"cash_of_consignment_deposit_rate,omitempty"`
}

func (x *MarginWallet) Reset() {
	*x = MarginWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginWallet) ProtoMessage() {}

func (x *MarginWallet) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginWallet.ProtoReflect.Descriptor instead.
func (*MarginWallet) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{65}
}

func (x *MarginWallet) GetMarginAccountWallet() float64 {
	if x != nil {
		return x.MarginAccountWallet
	}
	return 0
}

func (x *MarginWallet) GetDepositKeepRate() float64 {
	if x != nil {
		return x.DepositKeepRate
	}
	return 0
}

func (x *MarginWallet) GetConsignmentDepositRate() float64 {
	if x != nil {
		return x.ConsignmentDepositRate
	}
	return 0
}

func (x *MarginWallet) GetCashOfConsignmentDepositRate() float64 {
	if x != nil {
		return x.CashOfConsignmentDepositRate
	}
	return 0
}

// 取引余力（先物）
type FutureWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 新規建玉可能額
	FutureTradeLimit float64 `protobuf:"fixed64,1,opt,name=future_trade_limit,json=futureTradeLimit,proto3" json:"future_trade_limit,omitempty"`
	// 必要証拠金額
	//   銘柄指定の場合のみ。
	MarginRequirement float64 `protobuf:"fixed64,2,opt,name=margin_requirement,json=marginRequirement,proto3" json:"margin_requirement,omitempty"`
}

func (x *FutureWallet) Reset() {
	*x = FutureWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureWallet) ProtoMessage() {}

func (x *FutureWallet) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureWallet.ProtoReflect.Descriptor instead.
func (*FutureWallet) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{66}
}

func (x *FutureWallet) GetFutureTradeLimit() float64 {
	if x != nil {
		return x.FutureTradeLimit
	}
	return 0
}

func (x *FutureWallet) GetMarginRequirement() float64 {
	if x != nil {
		return x.MarginRequirement
	}
	return 0
}

// 取引余力（オプション）
type OptionWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 買新規建玉可能額
	OptionBuyTradeLimit float64 `protobuf:"fixed64,1,opt,name=option_buy_trade_limit,json=optionBuyTradeLimit,proto3" json:"option_buy_trade_limit,omitempty"`
	// 売新規建玉可能額
	OptionSellTradeLimit float64 `protobuf:"fixed64,2,opt,name=option_sell_trade_limit,json=optionSellTradeLimit,proto3" json:"option_sell_trade_limit,omitempty"`
	// 必要証拠金額
	//   銘柄指定の場合のみ。
	MarginRequirement float64 `protobuf:"fixed64,3,opt,name=margin_requirement,json=marginRequirement,proto3" json:"margin_requirement,omitempty"`
}

func (x *OptionWallet) Reset() {
	*x = OptionWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionWallet) ProtoMessage() {}

func (x *OptionWallet) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionWallet.ProtoReflect.Descriptor instead.
func (*OptionWallet) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{67}
}

func (x *OptionWallet) GetOptionBuyTradeLimit() float64 {
	if x != nil {
		return x.OptionBuyTradeLimit
	}
	return 0
}

func (x *OptionWallet) GetOptionSellTradeLimit() float64 {
	if x != nil {
		return x.OptionSellTradeLimit
	}
	return 0
}

func (x *OptionWallet) GetMarginRequirement() float64 {
	if x != nil {
		return x.MarginRequirement
	}
	return 0
}

// 為替情報
type ExchangeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 通貨
	Currency Currency `protobuf:"varint,1,opt,name=currency,proto3,enum=kabuspb.Currency" json:"currency,omitempty"`
	// BID
	BidPrice float64 `protobuf:"fixed64,2,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	// SP
	Spread float64 `protobuf:"fixed64,3,opt,name=spread,proto3" json:"spread,omitempty"`
	// ASK
	AskPrice float64 `protobuf:"fixed64,4,opt,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	// 前日比
	Change float64 `protobuf:"fixed64,5,opt,name=change,proto3" json:"change,omitempty"`
	// 時刻
	Time *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ExchangeInfo) Reset() {
	*x = ExchangeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeInfo) ProtoMessage() {}

func (x *ExchangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeInfo.ProtoReflect.Descriptor instead.
func (*ExchangeInfo) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{68}
}

func (x *ExchangeInfo) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_CURRENCY_UNSPECIFIED
}

func (x *ExchangeInfo) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *ExchangeInfo) GetSpread() float64 {
	if x != nil {
		return x.Spread
	}
	return 0
}

func (x *ExchangeInfo) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *ExchangeInfo) GetChange() float64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *ExchangeInfo) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

// 規制情報
type Regulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 銘柄コード
	SymbolCode         string            `protobuf:"bytes,1,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	RegulationInfoList []*RegulationInfo `protobuf:"bytes,2,rep,name=regulation_info_list,json=regulationInfoList,proto3" json:"regulation_info_list,omitempty"`
}

func (x *Regulation) Reset() {
	*x = Regulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Regulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Regulation) ProtoMessage() {}

func (x *Regulation) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Regulation.ProtoReflect.Descriptor instead.
func (*Regulation) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{69}
}

func (x *Regulation) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *Regulation) GetRegulationInfoList() []*RegulationInfo {
	if x != nil {
		return x.RegulationInfoList
	}
	return nil
}

// 規制情報詳細
type RegulationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 規制市場
	Exchange RegulationExchange `protobuf:"varint,1,opt,name=exchange,proto3,enum=kabuspb.RegulationExchange" json:"exchange,omitempty"`
	// 規制取引区分
	Product RegulationProduct `protobuf:"varint,2,opt,name=product,proto3,enum=kabuspb.RegulationProduct" json:"product,omitempty"`
	// 規制売買
	Side RegulationSide `protobuf:"varint,3,opt,name=side,proto3,enum=kabuspb.RegulationSide" json:"side,omitempty"`
	// 理由
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// 制限開始日
	LimitStartDay *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=limit_start_day,json=limitStartDay,proto3" json:"limit_start_day,omitempty"`
	// 制限終了日
	LimitEndDay *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=limit_end_day,json=limitEndDay,proto3" json:"limit_end_day,omitempty"`
	// コンプライアンスレベル
	Level RegulationLevel `protobuf:"varint,7,opt,name=level,proto3,enum=kabuspb.RegulationLevel" json:"level,omitempty"`
}

func (x *RegulationInfo) Reset() {
	*x = RegulationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulationInfo) ProtoMessage() {}

func (x *RegulationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulationInfo.ProtoReflect.Descriptor instead.
func (*RegulationInfo) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{70}
}

func (x *RegulationInfo) GetExchange() RegulationExchange {
	if x != nil {
		return x.Exchange
	}
	return RegulationExchange_REGULATION_EXCHANGE_UNSPECIFIED
}

func (x *RegulationInfo) GetProduct() RegulationProduct {
	if x != nil {
		return x.Product
	}
	return RegulationProduct_REGULATION_PRODUCT_UNSPECIFIED
}

func (x *RegulationInfo) GetSide() RegulationSide {
	if x != nil {
		return x.Side
	}
	return RegulationSide_REGULATION_SIDE_UNSPECIFIED
}

func (x *RegulationInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RegulationInfo) GetLimitStartDay() *timestamppb.Timestamp {
	if x != nil {
		return x.LimitStartDay
	}
	return nil
}

func (x *RegulationInfo) GetLimitEndDay() *timestamppb.Timestamp {
	if x != nil {
		return x.LimitEndDay
	}
	return nil
}

func (x *RegulationInfo) GetLevel() RegulationLevel {
	if x != nil {
		return x.Level
	}
	return RegulationLevel_REGULATION_LEVEL_UNSPECIFIED
}

// 優先市場
type PrimaryExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 銘柄コード
	SymbolCode string `protobuf:"bytes,1,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 優先市場
	PrimaryExchange StockExchange `protobuf:"varint,2,opt,name=primary_exchange,json=primaryExchange,proto3,enum=kabuspb.StockExchange" json:"primary_exchange,omitempty"`
}

func (x *PrimaryExchange) Reset() {
	*x = PrimaryExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryExchange) ProtoMessage() {}

func (x *PrimaryExchange) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryExchange.ProtoReflect.Descriptor instead.
func (*PrimaryExchange) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{71}
}

func (x *PrimaryExchange) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *PrimaryExchange) GetPrimaryExchange() StockExchange {
	if x != nil {
		return x.PrimaryExchange
	}
	return StockExchange_STOCK_EXCHANGE_UNSPECIFIED
}

// ソフトリミット
type SoftLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 現物のワンショット上限
	//   単位は万円
	Stock float64 `protobuf:"fixed64,1,opt,name=stock,proto3" json:"stock,omitempty"`
	// 信用のワンショット上限
	//   単位は万円
	Margin float64 `protobuf:"fixed64,2,opt,name=margin,proto3" json:"margin,omitempty"`
	// 先物のワンショット上限
	//   単位は枚
	Future float64 `protobuf:"fixed64,3,opt,name=future,proto3" json:"future,omitempty"`
	// 先物ミニのワンショット上限
	//   単位は枚
	FutureMini float64 `protobuf:"fixed64,4,opt,name=future_mini,json=futureMini,proto3" json:"future_mini,omitempty"`
	// オプションのワンショット上限
	//   単位は枚
	Option float64 `protobuf:"fixed64,5,opt,name=option,proto3" json:"option,omitempty"`
	// kabuステーションのバージョン
	KabusVersion string `protobuf:"bytes,6,opt,name=kabus_version,json=kabusVersion,proto3" json:"kabus_version,omitempty"`
}

func (x *SoftLimit) Reset() {
	*x = SoftLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftLimit) ProtoMessage() {}

func (x *SoftLimit) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftLimit.ProtoReflect.Descriptor instead.
func (*SoftLimit) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{72}
}

func (x *SoftLimit) GetStock() float64 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *SoftLimit) GetMargin() float64 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *SoftLimit) GetFuture() float64 {
	if x != nil {
		return x.Future
	}
	return 0
}

func (x *SoftLimit) GetFutureMini() float64 {
	if x != nil {
		return x.FutureMini
	}
	return 0
}

func (x *SoftLimit) GetOption() float64 {
	if x != nil {
		return x.Option
	}
	return 0
}

func (x *SoftLimit) GetKabusVersion() string {
	if x != nil {
		return x.KabusVersion
	}
	return ""
}

// プレミアム料取得
type MarginPremium struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 銘柄コード
	SymbolCode string `protobuf:"bytes,1,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 一般信用（長期）
	GeneralMargin *MarginPremiumDetail `protobuf:"bytes,2,opt,name=general_margin,json=generalMargin,proto3" json:"general_margin,omitempty"`
	// 一般信用（デイトレ）
	DayTrade *MarginPremiumDetail `protobuf:"bytes,3,opt,name=day_trade,json=dayTrade,proto3" json:"day_trade,omitempty"`
}

func (x *MarginPremium) Reset() {
	*x = MarginPremium{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginPremium) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginPremium) ProtoMessage() {}

func (x *MarginPremium) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginPremium.ProtoReflect.Descriptor instead.
func (*MarginPremium) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{73}
}

func (x *MarginPremium) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *MarginPremium) GetGeneralMargin() *MarginPremiumDetail {
	if x != nil {
		return x.GeneralMargin
	}
	return nil
}

func (x *MarginPremium) GetDayTrade() *MarginPremiumDetail {
	if x != nil {
		return x.DayTrade
	}
	return nil
}

type MarginPremiumDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// プレミアム料入力区分
	MarginPremiumType MarginPremiumType `protobuf:"varint,1,opt,name=margin_premium_type,json=marginPremiumType,proto3,enum=kabuspb.MarginPremiumType" json:"margin_premium_type,omitempty"`
	// 確定プレミアム料
	MarginPremium float64 `protobuf:"fixed64,2,opt,name=margin_premium,json=marginPremium,proto3" json:"margin_premium,omitempty"`
	// 上限プレミアム料
	UpperMarginPremium float64 `protobuf:"fixed64,3,opt,name=upper_margin_premium,json=upperMarginPremium,proto3" json:"upper_margin_premium,omitempty"`
	// 下限プレミアム料
	LowerMarginPremium float64 `protobuf:"fixed64,4,opt,name=lower_margin_premium,json=lowerMarginPremium,proto3" json:"lower_margin_premium,omitempty"`
	// プレミアム料刻値
	TickMarginPremium float64 `protobuf:"fixed64,5,opt,name=tick_margin_premium,json=tickMarginPremium,proto3" json:"tick_margin_premium,omitempty"`
}

func (x *MarginPremiumDetail) Reset() {
	*x = MarginPremiumDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginPremiumDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginPremiumDetail) ProtoMessage() {}

func (x *MarginPremiumDetail) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginPremiumDetail.ProtoReflect.Descriptor instead.
func (*MarginPremiumDetail) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{74}
}

func (x *MarginPremiumDetail) GetMarginPremiumType() MarginPremiumType {
	if x != nil {
		return x.MarginPremiumType
	}
	return MarginPremiumType_MARGIN_PREMIUM_TYPE_UNSPECIFIED
}

func (x *MarginPremiumDetail) GetMarginPremium() float64 {
	if x != nil {
		return x.MarginPremium
	}
	return 0
}

func (x *MarginPremiumDetail) GetUpperMarginPremium() float64 {
	if x != nil {
		return x.UpperMarginPremium
	}
	return 0
}

func (x *MarginPremiumDetail) GetLowerMarginPremium() float64 {
	if x != nil {
		return x.LowerMarginPremium
	}
	return 0
}

func (x *MarginPremiumDetail) GetTickMarginPremium() float64 {
	if x != nil {
		return x.TickMarginPremium
	}
	return 0
}

type RequestError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Body       string `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Code       int32  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	Message    string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RequestError) Reset() {
	*x = RequestError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestError) ProtoMessage() {}

func (x *RequestError) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestError.ProtoReflect.Descriptor instead.
func (*RequestError) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{75}
}

func (x *RequestError) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *RequestError) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *RequestError) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RequestError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_kabuspb_kabus_proto protoreflect.FileDescriptor

var file_kabuspb_kabus_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2f, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xcc, 0x04, 0x0a, 0x15, 0x53, 0x65,
	0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x32, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x64,
	0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62,
	0x2e, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6b, 0x61, 0x62, 0x75,
	0x73, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x64, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61,
	0x79, 0x12, 0x36, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x63, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x22, 0x9b, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0c, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x76, 0x65,
	0x72, 0x52, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x14,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6b, 0x61, 0x62,
	0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48,
	0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x48, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x48, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x88, 0x06, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32,
	0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6b, 0x61, 0x62, 0x75,
	0x73, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x11, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x3a,
	0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x3f, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73,
	0x70, 0x62, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x36, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x79, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x53, 0x74,
	0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x22, 0x9c, 0x02, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6b, 0x61,
	0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70,
	0x62, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x09, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x14, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x68, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x61, 0x66, 0x74, 0x65, 0x72, 0x48, 0x69, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x48, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x22, 0xba, 0x04, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6b, 0x61, 0x62,
	0x75, 0x73, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x38, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70,
	0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x69,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73,
	0x70, 0x62, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x44, 0x61, 0x79, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73,
	0x70, 0x62, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xe4, 0x01,
	0x0a, 0x0f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6b, 0x61, 0x62,
	0x75, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x09,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x14, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70,
	0x62, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x69, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x48, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x48, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x22, 0xba, 0x04, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6b, 0x61,
	0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a,
	0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62,
	0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37,
	0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x79, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0xe4, 0x01, 0x0a, 0x0f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x76,
	0x65, 0x72, 0x52, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x51, 0x0a,
	0x14, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6b, 0x61,
	0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x48, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x48, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x48, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x4e, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x6a, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x18, 0x63, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x22, 0x6c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32,
	0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x22, 0x6d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0x6e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0x6e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0x61, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0x7d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x61,
	0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x67, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xec, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6b, 0x61, 0x62, 0x75,
	0x73, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x18, 0x63, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x22, 0xbf, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6b, 0x61,
	0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e,
	0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x67, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x18, 0x63, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x22, 0x9d, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x66, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a,
	0x10, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x22, 0xbc, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x64, 0x65, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x64,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x30,
	0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x75, 0x74, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x50, 0x75, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x11,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a,
	0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6b, 0x61,
	0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x01,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x72,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x75,
	0x73, 0x74, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x11,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x16, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x22, 0x74,
	0x0a, 0x18, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x07, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x22, 0x44, 0x0a, 0x1b, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22,
	0x6b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x62,
	0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x3c, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x53, 0x6f, 0x66, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x3a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x50, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x1b, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xe9, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x50, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x42, 0x0a, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x77, 0x61, 0x70, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x76, 0x77, 0x61, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x62, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x29, 0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x31, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x31, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x65,
	0x6c, 0x6c, 0x32, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75,
	0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x32,
	0x12, 0x24, 0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x33, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x65, 0x6c, 0x6c, 0x33, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x34, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x34, 0x12, 0x24, 0x0a, 0x05,
	0x73, 0x65, 0x6c, 0x6c, 0x35, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61,
	0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x73, 0x65, 0x6c,
	0x6c, 0x35, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x36, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x36, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c,
	0x37, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x37, 0x12, 0x24,
	0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x38, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x65, 0x6c, 0x6c, 0x38, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x39, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x39, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x65,
	0x6c, 0x6c, 0x31, 0x30, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62,
	0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c,
	0x31, 0x30, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x6b,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x6b,
	0x53, 0x69, 0x67, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x75, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x27, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x31, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x52, 0x04, 0x62, 0x75, 0x79, 0x31, 0x12, 0x22, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x32,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x62, 0x75, 0x79, 0x32, 0x12, 0x22, 0x0a, 0x04,
	0x62, 0x75, 0x79, 0x33, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62,
	0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x62, 0x75, 0x79, 0x33,
	0x12, 0x22, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x34, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x04,
	0x62, 0x75, 0x79, 0x34, 0x12, 0x22, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x35, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x52, 0x04, 0x62, 0x75, 0x79, 0x35, 0x12, 0x22, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x36,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x62, 0x75, 0x79, 0x36, 0x12, 0x22, 0x0a, 0x04,
	0x62, 0x75, 0x79, 0x37, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62,
	0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x62, 0x75, 0x79, 0x37,
	0x12, 0x22, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x38, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x04,
	0x62, 0x75, 0x79, 0x38, 0x12, 0x22, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x39, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x52, 0x04, 0x62, 0x75, 0x79, 0x39, 0x12, 0x24, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x31,
	0x30, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x62, 0x75, 0x79, 0x31, 0x30, 0x12, 0x2c,
	0x0a, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x75, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x67,
	0x61, 0x6d, 0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x65,
	0x67, 0x61, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x76, 0x65, 0x67, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6b, 0x61,
	0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xfa, 0x07, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e,
	0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x4d, 0x0a, 0x15, 0x66,
	0x69, 0x73, 0x63, 0x61, 0x6c, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x59, 0x65,
	0x61, 0x72, 0x45, 0x6e, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x61, 0x62, 0x75, 0x63, 0x6f,
	0x6d, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x6b, 0x61, 0x62, 0x75, 0x63, 0x6f, 0x6d, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x42, 0x75, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x6b, 0x61, 0x62, 0x75, 0x63, 0x6f, 0x6d, 0x5f,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x6b, 0x61, 0x62, 0x75, 0x63, 0x6f, 0x6d, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x53, 0x65, 0x6c, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x62,
	0x75, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x42, 0x75, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x6c, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x53, 0x65, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x79, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x79, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x10, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x64, 0x65, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x45, 0x6e,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x72, 0x5f,
	0x70, 0x75, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6b, 0x61, 0x62, 0x75,
	0x73, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x75, 0x74, 0x52, 0x09, 0x63, 0x61, 0x6c,
	0x6c, 0x4f, 0x72, 0x50, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x38, 0x0a,
	0x0e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x39, 0x0a, 0x05,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x30, 0x0a, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x26, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0xcb, 0x07, 0x0a, 0x05, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x31, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x12, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x64,
	0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6b, 0x61,
	0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6b, 0x61, 0x62,
	0x75, 0x73, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x79, 0x12, 0x44, 0x0a, 0x11, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69,
	0x75, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73,
	0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xde, 0x04, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x34, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64,
	0x61, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x61, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x78, 0x22, 0x3c, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73,
	0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf2, 0x06, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x73, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53,
	0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x78, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x78, 0x12, 0x39, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x79, 0x12, 0x44, 0x0a, 0x11, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4c, 0x6f, 0x73,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x22, 0x5c, 0x0a, 0x11, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x12, 0x31, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x60, 0x0a, 0x0e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x0c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x62,
	0x75, 0x73, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x86, 0x04, 0x0a, 0x10, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x2b, 0x0a,
	0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x72,
	0x65, 0x6e, 0x64, 0x52, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2b, 0x0a,
	0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x89, 0x01, 0x0a, 0x0b, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x61, 0x62,
	0x75, 0x73, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x94, 0x04,
	0x0a, 0x0f, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6e,
	0x6f, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x64, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x22, 0xa1, 0x04, 0x0a, 0x11, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x72,
	0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6b, 0x61, 0x62, 0x75,
	0x73, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x6e, 0x64,
	0x52, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x61,
	0x70, 0x69, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x72, 0x61, 0x70, 0x69,
	0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x75,
	0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x99, 0x04, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x6e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x2b, 0x0a, 0x05, 0x74,
	0x72, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6b, 0x61, 0x62,
	0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x6e,
	0x64, 0x52, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x38, 0x0a, 0x18, 0x72,
	0x61, 0x70, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x72,
	0x61, 0x70, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07,
	0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x22, 0xa9, 0x03, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x65,
	0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x1a, 0x73, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x70, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a,
	0x14, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x65, 0x6c,
	0x6c, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x3f,
	0x0a, 0x1c, 0x62, 0x75, 0x79, 0x5f, 0x72, 0x61, 0x70, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x62, 0x75, 0x79, 0x52, 0x61, 0x70, 0x69, 0x64, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x2d, 0x0a, 0x13, 0x62, 0x75, 0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x62, 0x75,
	0x79, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x64,
	0x75, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc3,
	0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x75, 0x73,
	0x74, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07,
	0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x22, 0x84, 0x03, 0x0a, 0x13, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72,
	0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x2b, 0x0a, 0x05,
	0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6b, 0x61,
	0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x52, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x75, 0x73,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x75, 0x73,
	0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x4b, 0x0a, 0x0d, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0xf0, 0x01, 0x0a, 0x0c, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x4b, 0x65, 0x65, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x66, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c,
	0x63, 0x61, 0x73, 0x68, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x22, 0x6b, 0x0a, 0x0c,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x0c, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x35, 0x0a, 0x17, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x14, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73,
	0x70, 0x62, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73,
	0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x78, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49,
	0x0a, 0x14, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf8, 0x02, 0x0a, 0x0e, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x73,
	0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6b, 0x61, 0x62, 0x75,
	0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e,
	0x64, 0x44, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0x75, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x09,
	0x53, 0x6f, 0x66, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x69,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x61, 0x62, 0x75,
	0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x01,
	0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x43, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73,
	0x70, 0x62, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73,
	0x70, 0x62, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x64, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x22, 0x9c, 0x02, 0x0a, 0x13, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69,
	0x75, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x4a, 0x0a, 0x13, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x11, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x14, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x6d,
	0x69, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x30, 0x0a,
	0x14, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12,
	0x2e, 0x0a, 0x13, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x69,
	0x63, 0x6b, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x22,
	0x71, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2a, 0xcf, 0x01, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x55, 0x53, 0x48, 0x4f, 0x55, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x45, 0x49, 0x53,
	0x48, 0x4f, 0x55, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x46, 0x55, 0x4b, 0x55, 0x53, 0x48, 0x4f, 0x55, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x41, 0x54, 0x53, 0x55, 0x53, 0x48,
	0x4f, 0x55, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x17, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x18, 0x2a, 0xa2, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x55, 0x53, 0x48, 0x4f, 0x55,
	0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x45, 0x49, 0x53, 0x48, 0x4f, 0x55, 0x10, 0x03, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x46, 0x55, 0x4b, 0x55, 0x53, 0x48, 0x4f, 0x55, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x41,
	0x54, 0x53, 0x55, 0x53, 0x48, 0x4f, 0x55, 0x10, 0x06, 0x2a, 0x96, 0x01, 0x0a, 0x0e, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x1b,
	0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1f,
	0x0a, 0x1b, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x17, 0x12,
	0x21, 0x0a, 0x1d, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x18, 0x2a, 0x96, 0x01, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x17, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x18, 0x2a, 0x97, 0x02, 0x0a, 0x0a,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x55,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x55, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4b, 0x32, 0x32, 0x35, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4b,
	0x32, 0x32, 0x35, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x55,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x58, 0x10,
	0x03, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x54, 0x4f, 0x50, 0x49, 0x58, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x10, 0x04, 0x12, 0x17, 0x0a,
	0x13, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x53, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4a, 0x50, 0x58, 0x34, 0x30, 0x30, 0x10, 0x06, 0x12, 0x13,
	0x0a, 0x0f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x4f,
	0x57, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x56, 0x49, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x55, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x33, 0x30, 0x10, 0x09, 0x12,
	0x14, 0x0a, 0x10, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52,
	0x45, 0x49, 0x54, 0x10, 0x0a, 0x2a, 0x48, 0x0a, 0x07, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x75, 0x74,
	0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x55, 0x54, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x50, 0x55, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x55, 0x54, 0x5f, 0x50, 0x55, 0x54, 0x10, 0x02, 0x2a,
	0x82, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f,
	0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54,
	0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x10, 0x04,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x05, 0x2a, 0x7e, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x41,
	0x49, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x59, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f,
	0x4e, 0x45, 0x10, 0x05, 0x2a, 0xa7, 0x01, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x57, 0x41, 0x49, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x05, 0x2a, 0x39,
	0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x49, 0x44, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x49,
	0x44, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x52, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x02, 0x2a, 0xa9, 0x01,
	0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5a, 0x41, 0x52, 0x41, 0x42, 0x41, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x41, 0x52, 0x49, 0x10, 0x04,
	0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x54, 0x4c, 0x4f, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4f, 0x43, 0x10, 0x06, 0x2a, 0x9c, 0x02, 0x0a, 0x0d, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x4f,
	0x55, 0x53, 0x48, 0x4f, 0x55, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x45, 0x49, 0x53, 0x48, 0x4f,
	0x55, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x55, 0x4b, 0x55, 0x53, 0x48, 0x4f, 0x55, 0x10, 0x05,
	0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x53, 0x41, 0x54, 0x53, 0x55, 0x53, 0x48, 0x4f, 0x55, 0x10, 0x06, 0x12, 0x16,
	0x0a, 0x12, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x53, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x17, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x18, 0x2a, 0x7e, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x50, 0x4f,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x2a, 0x5d, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x4c, 0x49,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x4c, 0x49, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x41, 0x53, 0x48, 0x10, 0x02, 0x2a, 0x9f, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x4d,
	0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e,
	0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x41,
	0x59, 0x10, 0x04, 0x22, 0x04, 0x08, 0x03, 0x10, 0x03, 0x2a, 0x71, 0x0a, 0x0b, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f,
	0x46, 0x41, 0x4b, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e,
	0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x4f, 0x4b, 0x10, 0x03, 0x2a, 0xf9, 0x01, 0x0a,
	0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x43, 0x4f,
	0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x56, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x2a, 0xd6, 0x01, 0x0a, 0x10, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x1e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x01, 0x12, 0x21,
	0x0a, 0x1d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x05, 0x2a, 0xeb, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4b, 0x32, 0x32,
	0x35, 0x10, 0x65, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4b, 0x32, 0x32, 0x35, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x10,
	0x85, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4a, 0x50, 0x58, 0x34, 0x30, 0x30, 0x10, 0x79, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f,
	0x50, 0x49, 0x58, 0x10, 0x6b, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x58, 0x5f, 0x4d, 0x49, 0x4e,
	0x49, 0x10, 0x8b, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53, 0x10, 0x9a, 0x01,
	0x12, 0x17, 0x0a, 0x12, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x49, 0x54, 0x10, 0x9b, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x10, 0x90,
	0x01, 0x12, 0x15, 0x0a, 0x10, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x56, 0x49, 0x10, 0x91, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x33, 0x30,
	0x10, 0xab, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4b, 0x32, 0x32, 0x35, 0x5f, 0x4f, 0x50, 0x10, 0x67, 0x2a,
	0xc5, 0x03, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x4c,
	0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44,
	0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x55, 0x53, 0x48, 0x4f, 0x55, 0x5f,
	0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x55, 0x53, 0x48,
	0x4f, 0x55, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x45, 0x10, 0x0a, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x58,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x4f, 0x55, 0x53, 0x48, 0x4f, 0x55, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44,
	0x10, 0x0b, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44,
	0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x55, 0x53, 0x48, 0x4f, 0x55, 0x5f,
	0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f,
	0x55, 0x53, 0x48, 0x4f, 0x55, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x4f, 0x55, 0x53, 0x48, 0x4f, 0x55, 0x5f, 0x32, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4a,
	0x41, 0x53, 0x44, 0x41, 0x51, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x49,
	0x53, 0x48, 0x4f, 0x55, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4b, 0x55,
	0x53, 0x48, 0x4f, 0x55, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x41, 0x54, 0x53,
	0x55, 0x53, 0x48, 0x4f, 0x55, 0x10, 0x09, 0x2a, 0xbf, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f,
	0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43,
	0x52, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x04, 0x2a, 0xc9, 0x02, 0x0a, 0x11, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x52,
	0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c,
	0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53,
	0x45, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x5f,
	0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45,
	0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x42, 0x41,
	0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0x03,
	0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x42, 0x41, 0x4c, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0x04, 0x12, 0x2a,
	0x0a, 0x26, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x4d, 0x41, 0x47, 0x4e, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x41,
	0x52, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x41, 0x47, 0x4e, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x06, 0x2a, 0x8e, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74,
	0x72, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x21, 0x49, 0x4e, 0x44, 0x55, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x44, 0x55, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x27, 0x0a,
	0x23, 0x49, 0x4e, 0x44, 0x55, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x2a, 0xdb, 0x01, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x41, 0x4e, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x45,
	0x4e, 0x44, 0x5f, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x32, 0x30, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x45,
	0x4e, 0x44, 0x5f, 0x52, 0x49, 0x53, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x41, 0x4e,
	0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x54, 0x10,
	0x05, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x45,
	0x4e, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x32, 0x30, 0x10, 0x06, 0x2a, 0x7d, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x46,
	0x55, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x54, 0x49, 0x54, 0x55, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x52,
	0x47, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x2a, 0xcf, 0x03, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x4f, 0x43,
	0x4b, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x10,
	0x0a, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4d, 0x4f, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x4f, 0x41, 0x4f, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x43, 0x4b,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4d, 0x43,
	0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x41, 0x43, 0x10, 0x10, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4f, 0x43, 0x5f, 0x4d, 0x4f, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54,
	0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x4f, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x4d, 0x4f, 0x10, 0x15, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x4f, 0x10, 0x16, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f,
	0x43, 0x4b, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f,
	0x4d, 0x43, 0x10, 0x17, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x43, 0x10, 0x18, 0x12,
	0x1d, 0x0a, 0x19, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x41, 0x52, 0x49, 0x5f, 0x4d, 0x10, 0x19, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x41, 0x52, 0x49, 0x5f, 0x41, 0x10, 0x1a, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4f, 0x43, 0x5f, 0x4c, 0x4f, 0x10, 0x1b, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54,
	0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x10, 0x1e, 0x2a, 0xba, 0x01, 0x0a, 0x0f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x55, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x4f, 0x10, 0x78, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x43, 0x10,
	0x12, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x46,
	0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x4f, 0x43, 0x10, 0x1c, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x10, 0x1e, 0x2a, 0xba, 0x01, 0x0a, 0x0f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x4f, 0x10, 0x78, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x43, 0x10, 0x12, 0x12, 0x18,
	0x0a, 0x14, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f,
	0x43, 0x10, 0x1c, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x1e, 0x2a,
	0x96, 0x02, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x55, 0x53, 0x44, 0x5f, 0x4a, 0x50, 0x59, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x45, 0x55, 0x52, 0x5f, 0x4a, 0x50, 0x59,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x47,
	0x42, 0x50, 0x5f, 0x4a, 0x50, 0x59, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x41, 0x55, 0x44, 0x5f, 0x4a, 0x50, 0x59, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x48, 0x46, 0x5f, 0x4a,
	0x50, 0x59, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x43, 0x41, 0x44, 0x5f, 0x4a, 0x50, 0x59, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4e, 0x5a, 0x44, 0x5f, 0x4a, 0x50, 0x59, 0x10, 0x07,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x5a, 0x41, 0x52,
	0x5f, 0x4a, 0x50, 0x59, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x45, 0x55, 0x52, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x47, 0x42, 0x50, 0x5f, 0x55, 0x53, 0x44,
	0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x41,
	0x55, 0x44, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x0b, 0x2a, 0x97, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x23, 0x0a, 0x1f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x55, 0x53,
	0x48, 0x4f, 0x55, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x45, 0x49,
	0x53, 0x48, 0x4f, 0x55, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x55,
	0x4b, 0x55, 0x53, 0x48, 0x4f, 0x55, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x47, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x53, 0x41, 0x54, 0x53, 0x55, 0x53, 0x48, 0x4f, 0x55, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x53, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x47, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x43, 0x58, 0x4a, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4a, 0x4e, 0x58,
	0x10, 0x15, 0x2a, 0x9d, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x47, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x47, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53,
	0x54, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x52,
	0x47, 0x49, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x04, 0x12,
	0x1c, 0x0a, 0x18, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x05, 0x12, 0x29, 0x0a,
	0x25, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x47, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4d,
	0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x4c, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10,
	0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x10,
	0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59,
	0x10, 0x0a, 0x2a, 0x7d, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x44,
	0x45, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x47, 0x55, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10,
	0x03, 0x2a, 0x6d, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x2a, 0x7a, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x18, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a,
	0x19, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4b, 0x32,
	0x32, 0x35, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x58, 0x10, 0x03, 0x2a, 0x52, 0x0a, 0x09,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x55,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x02,
	0x2a, 0xb1, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48,
	0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x53,
	0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x49, 0x54, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x4f, 0x43, 0x4b,
	0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54,
	0x4f, 0x43, 0x4b, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x49, 0x54, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x10, 0x02, 0x12, 0x25, 0x0a,
	0x21, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x49, 0x54,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x41,
	0x52, 0x49, 0x10, 0x03, 0x2a, 0x8e, 0x01, 0x0a, 0x17, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x48, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2b, 0x0a, 0x27, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52,
	0x5f, 0x48, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a,
	0x1e, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x49,
	0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x45,
	0x52, 0x5f, 0x48, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x4f, 0x10, 0x02, 0x2a, 0x8e, 0x01, 0x0a, 0x17, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x46, 0x54, 0x45,
	0x52, 0x5f, 0x48, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x48,
	0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x46, 0x54,
	0x45, 0x52, 0x5f, 0x48, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x4f, 0x10, 0x02, 0x2a, 0x99, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f,
	0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x4d,
	0x49, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x45,
	0x4d, 0x49, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x4d,
	0x49, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x03, 0x32, 0xab, 0x12, 0x0a, 0x0c, 0x4b, 0x61, 0x62, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x0f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1f, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x53, 0x65, 0x6e,
	0x64, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6b, 0x61, 0x62, 0x75,
	0x73, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1b, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x49, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x12, 0x1f, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x6b, 0x61,
	0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70,
	0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x34,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x18, 0x2e, 0x6b, 0x61, 0x62,
	0x75, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x19, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x37, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x6b, 0x61, 0x62,
	0x75, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x27, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x27, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6b, 0x61, 0x62, 0x75,
	0x73, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x49, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62,
	0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x1e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x2e, 0x6b, 0x61, 0x62, 0x75,
	0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6b, 0x61,
	0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70,
	0x62, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x4c,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x20, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x22, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62,
	0x2e, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x41, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x1b, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22,
	0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6b, 0x61, 0x62,
	0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x58,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x24, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x1f, 0x2e, 0x6b, 0x61,
	0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x55, 0x6e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x21, 0x2e,
	0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x14,
	0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x12, 0x24, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x55,
	0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6b, 0x61, 0x62,
	0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x20, 0x2e, 0x6b, 0x61, 0x62,
	0x75, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x50, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x12, 0x4a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x2e, 0x6b, 0x61, 0x62,
	0x75, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x30, 0x01,
	0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x3b, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kabuspb_kabus_proto_rawDescOnce sync.Once
	file_kabuspb_kabus_proto_rawDescData = file_kabuspb_kabus_proto_rawDesc
)

func file_kabuspb_kabus_proto_rawDescGZIP() []byte {
	file_kabuspb_kabus_proto_rawDescOnce.Do(func() {
		file_kabuspb_kabus_proto_rawDescData = protoimpl.X.CompressGZIP(file_kabuspb_kabus_proto_rawDescData)
	})
	return file_kabuspb_kabus_proto_rawDescData
}

var file_kabuspb_kabus_proto_enumTypes = make([]protoimpl.EnumInfo, 40)
var file_kabuspb_kabus_proto_msgTypes = make([]protoimpl.MessageInfo, 76)
var file_kabuspb_kabus_proto_goTypes = []interface{}{
	(Exchange)(0),                          // 0: kabuspb.Exchange
	(StockExchange)(0),                     // 1: kabuspb.StockExchange
	(FutureExchange)(0),                    // 2: kabuspb.FutureExchange
	(OptionExchange)(0),                    // 3: kabuspb.OptionExchange
	(FutureCode)(0),                        // 4: kabuspb.FutureCode
	(CallPut)(0),                           // 5: kabuspb.CallPut
	(Product)(0),                           // 6: kabuspb.Product
	(State)(0),                             // 7: kabuspb.State
	(OrderState)(0),                        // 8: kabuspb.OrderState
	(Side)(0),                              // 9: kabuspb.Side
	(TradeType)(0),                         // 10: kabuspb.TradeType
	(OrderType)(0),                         // 11: kabuspb.OrderType
	(OrderExchange)(0),                     // 12: kabuspb.OrderExchange
	(AccountType)(0),                       // 13: kabuspb.AccountType
	(DeliveryType)(0),                      // 14: kabuspb.DeliveryType
	(MarginTradeType)(0),                   // 15: kabuspb.MarginTradeType
	(TimeInForce)(0),                       // 16: kabuspb.TimeInForce
	(RecordType)(0),                        // 17: kabuspb.RecordType
	(OrderDetailState)(0),                  // 18: kabuspb.OrderDetailState
	(SecurityType)(0),                      // 19: kabuspb.SecurityType
	(ExchangeDivision)(0),                  // 20: kabuspb.ExchangeDivision
	(PriceRankingType)(0),                  // 21: kabuspb.PriceRankingType
	(MarginRankingType)(0),                 // 22: kabuspb.MarginRankingType
	(IndustryRankingType)(0),               // 23: kabuspb.IndustryRankingType
	(RankingTrend)(0),                      // 24: kabuspb.RankingTrend
	(FundType)(0),                          // 25: kabuspb.FundType
	(StockOrderType)(0),                    // 26: kabuspb.StockOrderType
	(FutureOrderType)(0),                   // 27: kabuspb.FutureOrderType
	(OptionOrderType)(0),                   // 28: kabuspb.OptionOrderType
	(Currency)(0),                          // 29: kabuspb.Currency
	(RegulationExchange)(0),                // 30: kabuspb.RegulationExchange
	(RegulationProduct)(0),                 // 31: kabuspb.RegulationProduct
	(RegulationSide)(0),                    // 32: kabuspb.RegulationSide
	(RegulationLevel)(0),                   // 33: kabuspb.RegulationLevel
	(TriggerType)(0),                       // 34: kabuspb.TriggerType
	(UnderOver)(0),                         // 35: kabuspb.UnderOver
	(StockAfterHitOrderType)(0),            // 36: kabuspb.StockAfterHitOrderType
	(FutureAfterHitOrderType)(0),           // 37: kabuspb.FutureAfterHitOrderType
	(OptionAfterHitOrderType)(0),           // 38: kabuspb.OptionAfterHitOrderType
	(MarginPremiumType)(0),                 // 39: kabuspb.MarginPremiumType
	(*GetTokenRequest)(nil),                // 40: kabuspb.GetTokenRequest
	(*RefreshTokenRequest)(nil),            // 41: kabuspb.RefreshTokenRequest
	(*SendStockOrderRequest)(nil),          // 42: kabuspb.SendStockOrderRequest
	(*StockStopOrder)(nil),                 // 43: kabuspb.StockStopOrder
	(*SendMarginOrderRequest)(nil),         // 44: kabuspb.SendMarginOrderRequest
	(*MarginStopOrder)(nil),                // 45: kabuspb.MarginStopOrder
	(*SendFutureOrderRequest)(nil),         // 46: kabuspb.SendFutureOrderRequest
	(*FutureStopOrder)(nil),                // 47: kabuspb.FutureStopOrder
	(*SendOptionOrderRequest)(nil),         // 48: kabuspb.SendOptionOrderRequest
	(*OptionStopOrder)(nil),                // 49: kabuspb.OptionStopOrder
	(*ClosePosition)(nil),                  // 50: kabuspb.ClosePosition
	(*CancelOrderRequest)(nil),             // 51: kabuspb.CancelOrderRequest
	(*GetStockWalletRequest)(nil),          // 52: kabuspb.GetStockWalletRequest
	(*GetMarginWalletRequest)(nil),         // 53: kabuspb.GetMarginWalletRequest
	(*GetFutureWalletRequest)(nil),         // 54: kabuspb.GetFutureWalletRequest
	(*GetOptionWalletRequest)(nil),         // 55: kabuspb.GetOptionWalletRequest
	(*GetBoardRequest)(nil),                // 56: kabuspb.GetBoardRequest
	(*GetSymbolRequest)(nil),               // 57: kabuspb.GetSymbolRequest
	(*GetOrdersRequest)(nil),               // 58: kabuspb.GetOrdersRequest
	(*GetPositionsRequest)(nil),            // 59: kabuspb.GetPositionsRequest
	(*GetFutureSymbolCodeInfoRequest)(nil), // 60: kabuspb.GetFutureSymbolCodeInfoRequest
	(*GetOptionSymbolCodeInfoRequest)(nil), // 61: kabuspb.GetOptionSymbolCodeInfoRequest
	(*GetPriceRankingRequest)(nil),         // 62: kabuspb.GetPriceRankingRequest
	(*GetTickRankingRequest)(nil),          // 63: kabuspb.GetTickRankingRequest
	(*GetVolumeRankingRequest)(nil),        // 64: kabuspb.GetVolumeRankingRequest
	(*GetValueRankingRequest)(nil),         // 65: kabuspb.GetValueRankingRequest
	(*GetMarginRankingRequest)(nil),        // 66: kabuspb.GetMarginRankingRequest
	(*GetIndustryRankingRequest)(nil),      // 67: kabuspb.GetIndustryRankingRequest
	(*GetRegisteredSymbolsRequest)(nil),    // 68: kabuspb.GetRegisteredSymbolsRequest
	(*RegisterSymbolsRequest)(nil),         // 69: kabuspb.RegisterSymbolsRequest
	(*UnregisterSymbolsRequest)(nil),       // 70: kabuspb.UnregisterSymbolsRequest
	(*UnregisterAllSymbolsRequest)(nil),    // 71: kabuspb.UnregisterAllSymbolsRequest
	(*GetExchangeRequest)(nil),             // 72: kabuspb.GetExchangeRequest
	(*GetRegulationRequest)(nil),           // 73: kabuspb.GetRegulationRequest
	(*GetPrimaryExchangeRequest)(nil),      // 74: kabuspb.GetPrimaryExchangeRequest
	(*GetSoftLimitRequest)(nil),            // 75: kabuspb.GetSoftLimitRequest
	(*GetMarginPremiumRequest)(nil),        // 76: kabuspb.GetMarginPremiumRequest
	(*GetBoardsStreamingRequest)(nil),      // 77: kabuspb.GetBoardsStreamingRequest
	(*Token)(nil),                          // 78: kabuspb.Token
	(*Board)(nil),                          // 79: kabuspb.Board
	(*Symbol)(nil),                         // 80: kabuspb.Symbol
	(*SymbolCodeInfo)(nil),                 // 81: kabuspb.SymbolCodeInfo
	(*FirstQuote)(nil),                     // 82: kabuspb.FirstQuote
	(*Quote)(nil),                          // 83: kabuspb.Quote
	(*Orders)(nil),                         // 84: kabuspb.Orders
	(*Order)(nil),                          // 85: kabuspb.Order
	(*OrderDetail)(nil),                    // 86: kabuspb.OrderDetail
	(*Positions)(nil),                      // 87: kabuspb.Positions
	(*Position)(nil),                       // 88: kabuspb.Position
	(*RegisteredSymbols)(nil),              // 89: kabuspb.RegisteredSymbols
	(*RegisterSymbol)(nil),                 // 90: kabuspb.RegisterSymbol
	(*PriceRanking)(nil),                   // 91: kabuspb.PriceRanking
	(*PriceRankingInfo)(nil),               // 92: kabuspb.PriceRankingInfo
	(*TickRanking)(nil),                    // 93: kabuspb.TickRanking
	(*TickRankingInfo)(nil),                // 94: kabuspb.TickRankingInfo
	(*VolumeRanking)(nil),                  // 95: kabuspb.VolumeRanking
	(*VolumeRankingInfo)(nil),              // 96: kabuspb.VolumeRankingInfo
	(*ValueRanking)(nil),                   // 97: kabuspb.ValueRanking
	(*ValueRankingInfo)(nil),               // 98: kabuspb.ValueRankingInfo
	(*MarginRanking)(nil),                  // 99: kabuspb.MarginRanking
	(*MarginRankingInfo)(nil),              // 100: kabuspb.MarginRankingInfo
	(*IndustryRanking)(nil),                // 101: kabuspb.IndustryRanking
	(*IndustryRankingInfo)(nil),            // 102: kabuspb.IndustryRankingInfo
	(*OrderResponse)(nil),                  // 103: kabuspb.OrderResponse
	(*StockWallet)(nil),                    // 104: kabuspb.StockWallet
	(*MarginWallet)(nil),                   // 105: kabuspb.MarginWallet
	(*FutureWallet)(nil),                   // 106: kabuspb.FutureWallet
	(*OptionWallet)(nil),                   // 107: kabuspb.OptionWallet
	(*ExchangeInfo)(nil),                   // 108: kabuspb.ExchangeInfo
	(*Regulation)(nil),                     // 109: kabuspb.Regulation
	(*RegulationInfo)(nil),                 // 110: kabuspb.RegulationInfo
	(*PrimaryExchange)(nil),                // 111: kabuspb.PrimaryExchange
	(*SoftLimit)(nil),                      // 112: kabuspb.SoftLimit
	(*MarginPremium)(nil),                  // 113: kabuspb.MarginPremium
	(*MarginPremiumDetail)(nil),            // 114: kabuspb.MarginPremiumDetail
	(*RequestError)(nil),                   // 115: kabuspb.RequestError
	(*timestamppb.Timestamp)(nil),          // 116: google.protobuf.Timestamp
}
var file_kabuspb_kabus_proto_depIdxs = []int32{
	1,   // 0: kabuspb.SendStockOrderRequest.exchange:type_name -> kabuspb.StockExchange
	9,   // 1: kabuspb.SendStockOrderRequest.side:type_name -> kabuspb.Side
	14,  // 2: kabuspb.SendStockOrderRequest.delivery_type:type_name -> kabuspb.DeliveryType
	25,  // 3: kabuspb.SendStockOrderRequest.fund_type:type_name -> kabuspb.FundType
	13,  // 4: kabuspb.SendStockOrderRequest.account_type:type_name -> kabuspb.AccountType
	26,  // 5: kabuspb.SendStockOrderRequest.order_type:type_name -> kabuspb.StockOrderType
	116, // 6: kabuspb.SendStockOrderRequest.expire_day:type_name -> google.protobuf.Timestamp
	43,  // 7: kabuspb.SendStockOrderRequest.stop_order:type_name -> kabuspb.StockStopOrder
	34,  // 8: kabuspb.StockStopOrder.trigger_type:type_name -> kabuspb.TriggerType
	35,  // 9: kabuspb.StockStopOrder.under_over:type_name -> kabuspb.UnderOver
	36,  // 10: kabuspb.StockStopOrder.after_hit_order_type:type_name -> kabuspb.StockAfterHitOrderType
	1,   // 11: kabuspb.SendMarginOrderRequest.exchange:type_name -> kabuspb.StockExchange
	9,   // 12: kabuspb.SendMarginOrderRequest.side:type_name -> kabuspb.Side
	10,  // 13: kabuspb.SendMarginOrderRequest.trade_type:type_name -> kabuspb.TradeType
	15,  // 14: kabuspb.SendMarginOrderRequest.margin_trade_type:type_name -> kabuspb.MarginTradeType
	14,  // 15: kabuspb.SendMarginOrderRequest.delivery_type:type_name -> kabuspb.DeliveryType
	13,  // 16: kabuspb.SendMarginOrderRequest.account_type:type_name -> kabuspb.AccountType
	50,  // 17: kabuspb.SendMarginOrderRequest.close_positions:type_name -> kabuspb.ClosePosition
	26,  // 18: kabuspb.SendMarginOrderRequest.order_type:type_name -> kabuspb.StockOrderType
	116, // 19: kabuspb.SendMarginOrderRequest.expire_day:type_name -> google.protobuf.Timestamp
	45,  // 20: kabuspb.SendMarginOrderRequest.stop_order:type_name -> kabuspb.MarginStopOrder
	34,  // 21: kabuspb.MarginStopOrder.trigger_type:type_name -> kabuspb.TriggerType
	35,  // 22: kabuspb.MarginStopOrder.under_over:type_name -> kabuspb.UnderOver
	36,  // 23: kabuspb.MarginStopOrder.after_hit_order_type:type_name -> kabuspb.StockAfterHitOrderType
	2,   // 24: kabuspb.SendFutureOrderRequest.exchange:type_name -> kabuspb.FutureExchange
	10,  // 25: kabuspb.SendFutureOrderRequest.trade_type:type_name -> kabuspb.TradeType
	16,  // 26: kabuspb.SendFutureOrderRequest.time_in_force:type_name -> kabuspb.TimeInForce
	9,   // 27: kabuspb.SendFutureOrderRequest.side:type_name -> kabuspb.Side
	50,  // 28: kabuspb.SendFutureOrderRequest.close_positions:type_name -> kabuspb.ClosePosition
	27,  // 29: kabuspb.SendFutureOrderRequest.order_type:type_name -> kabuspb.FutureOrderType
	116, // 30: kabuspb.SendFutureOrderRequest.expire_day:type_name -> google.protobuf.Timestamp
	47,  // 31: kabuspb.SendFutureOrderRequest.stop_order:type_name -> kabuspb.FutureStopOrder
	35,  // 32: kabuspb.FutureStopOrder.under_over:type_name -> kabuspb.UnderOver
	37,  // 33: kabuspb.FutureStopOrder.after_hit_order_type:type_name -> kabuspb.FutureAfterHitOrderType
	3,   // 34: kabuspb.SendOptionOrderRequest.exchange:type_name -> kabuspb.OptionExchange
	10,  // 35: kabuspb.SendOptionOrderRequest.trade_type:type_name -> kabuspb.TradeType
	16,  // 36: kabuspb.SendOptionOrderRequest.time_in_force:type_name -> kabuspb.TimeInForce
	9,   // 37: kabuspb.SendOptionOrderRequest.side:type_name -> kabuspb.Side
	50,  // 38: kabuspb.SendOptionOrderRequest.close_positions:type_name -> kabuspb.ClosePosition
	28,  // 39: kabuspb.SendOptionOrderRequest.order_type:type_name -> kabuspb.OptionOrderType
	116, // 40: kabuspb.SendOptionOrderRequest.expire_day:type_name -> google.protobuf.Timestamp
	49,  // 41: kabuspb.SendOptionOrderRequest.stop_order:type_name -> kabuspb.OptionStopOrder
	35,  // 42: kabuspb.OptionStopOrder.under_over:type_name -> kabuspb.UnderOver
	38,  // 43: kabuspb.OptionStopOrder.after_hit_order_type:type_name -> kabuspb.OptionAfterHitOrderType
	1,   // 44: kabuspb.GetStockWalletRequest.exchange:type_name -> kabuspb.StockExchange
	1,   // 45: kabuspb.GetMarginWalletRequest.exchange:type_name -> kabuspb.StockExchange
	2,   // 46: kabuspb.GetFutureWalletRequest.exchange:type_name -> kabuspb.FutureExchange
	3,   // 47: kabuspb.GetOptionWalletRequest.exchange:type_name -> kabuspb.OptionExchange
	0,   // 48: kabuspb.GetBoardRequest.exchange:type_name -> kabuspb.Exchange
	0,   // 49: kabuspb.GetSymbolRequest.exchange:type_name -> kabuspb.Exchange
	6,   // 50: kabuspb.GetOrdersRequest.product:type_name -> kabuspb.Product
	116, // 51: kabuspb.GetOrdersRequest.update_time:type_name -> google.protobuf.Timestamp
	8,   // 52: kabuspb.GetOrdersRequest.state:type_name -> kabuspb.OrderState
	9,   // 53: kabuspb.GetOrdersRequest.side:type_name -> kabuspb.Side
	10,  // 54: kabuspb.GetOrdersRequest.tradeType:type_name -> kabuspb.TradeType
	6,   // 55: kabuspb.GetPositionsRequest.product:type_name -> kabuspb.Product
	9,   // 56: kabuspb.GetPositionsRequest.side:type_name -> kabuspb.Side
	4,   // 57: kabuspb.GetFutureSymbolCodeInfoRequest.future_code:type_name -> kabuspb.FutureCode
	116, // 58: kabuspb.GetFutureSymbolCodeInfoRequest.derivative_month:type_name -> google.protobuf.Timestamp
	116, // 59: kabuspb.GetOptionSymbolCodeInfoRequest.derivative_month:type_name -> google.protobuf.Timestamp
	5,   // 60: kabuspb.GetOptionSymbolCodeInfoRequest.call_or_put:type_name -> kabuspb.CallPut
	21,  // 61: kabuspb.GetPriceRankingRequest.ranking_type:type_name -> kabuspb.PriceRankingType
	20,  // 62: kabuspb.GetPriceRankingRequest.exchange_division:type_name -> kabuspb.ExchangeDivision
	20,  // 63: kabuspb.GetTickRankingRequest.exchange_division:type_name -> kabuspb.ExchangeDivision
	20,  // 64: kabuspb.GetVolumeRankingRequest.exchange_division:type_name -> kabuspb.ExchangeDivision
	20,  // 65: kabuspb.GetValueRankingRequest.exchange_division:type_name -> kabuspb.ExchangeDivision
	22,  // 66: kabuspb.GetMarginRankingRequest.ranking_type:type_name -> kabuspb.MarginRankingType
	20,  // 67: kabuspb.GetMarginRankingRequest.exchange_division:type_name -> kabuspb.ExchangeDivision
	23,  // 68: kabuspb.GetIndustryRankingRequest.ranking_type:type_name -> kabuspb.IndustryRankingType
	20,  // 69: kabuspb.GetIndustryRankingRequest.exchange_division:type_name -> kabuspb.ExchangeDivision
	90,  // 70: kabuspb.RegisterSymbolsRequest.symbols:type_name -> kabuspb.RegisterSymbol
	90,  // 71: kabuspb.UnregisterSymbolsRequest.symbols:type_name -> kabuspb.RegisterSymbol
	29,  // 72: kabuspb.GetExchangeRequest.currency:type_name -> kabuspb.Currency
	1,   // 73: kabuspb.GetRegulationRequest.exchange:type_name -> kabuspb.StockExchange
	116, // 74: kabuspb.Token.expired_at:type_name -> google.protobuf.Timestamp
	0,   // 75: kabuspb.Board.exchange:type_name -> kabuspb.Exchange
	116, // 76: kabuspb.Board.current_price_time:type_name -> google.protobuf.Timestamp
	116, // 77: kabuspb.Board.previous_close_time:type_name -> google.protobuf.Timestamp
	116, // 78: kabuspb.Board.opening_price_time:type_name -> google.protobuf.Timestamp
	116, // 79: kabuspb.Board.high_price_time:type_name -> google.protobuf.Timestamp
	116, // 80: kabuspb.Board.low_price_time:type_name -> google.protobuf.Timestamp
	116, // 81: kabuspb.Board.trading_volume_time:type_name -> google.protobuf.Timestamp
	116, // 82: kabuspb.Board.bid_time:type_name -> google.protobuf.Timestamp
	82,  // 83: kabuspb.Board.sell1:type_name -> kabuspb.FirstQuote
	83,  // 84: kabuspb.Board.sell2:type_name -> kabuspb.Quote
	83,  // 85: kabuspb.Board.sell3:type_name -> kabuspb.Quote
	83,  // 86: kabuspb.Board.sell4:type_name -> kabuspb.Quote
	83,  // 87: kabuspb.Board.sell5:type_name -> kabuspb.Quote
	83,  // 88: kabuspb.Board.sell6:type_name -> kabuspb.Quote
	83,  // 89: kabuspb.Board.sell7:type_name -> kabuspb.Quote
	83,  // 90: kabuspb.Board.sell8:type_name -> kabuspb.Quote
	83,  // 91: kabuspb.Board.sell9:type_name -> kabuspb.Quote
	83,  // 92: kabuspb.Board.sell10:type_name -> kabuspb.Quote
	116, // 93: kabuspb.Board.ask_time:type_name -> google.protobuf.Timestamp
	82,  // 94: kabuspb.Board.buy1:type_name -> kabuspb.FirstQuote
	83,  // 95: kabuspb.Board.buy2:type_name -> kabuspb.Quote
	83,  // 96: kabuspb.Board.buy3:type_name -> kabuspb.Quote
	83,  // 97: kabuspb.Board.buy4:type_name -> kabuspb.Quote
	83,  // 98: kabuspb.Board.buy5:type_name -> kabuspb.Quote
	83,  // 99: kabuspb.Board.buy6:type_name -> kabuspb.Quote
	83,  // 100: kabuspb.Board.buy7:type_name -> kabuspb.Quote
	83,  // 101: kabuspb.Board.buy8:type_name -> kabuspb.Quote
	83,  // 102: kabuspb.Board.buy9:type_name -> kabuspb.Quote
	83,  // 103: kabuspb.Board.buy10:type_name -> kabuspb.Quote
	19,  // 104: kabuspb.Board.security_type:type_name -> kabuspb.SecurityType
	0,   // 105: kabuspb.Symbol.exchange:type_name -> kabuspb.Exchange
	116, // 106: kabuspb.Symbol.fiscal_year_end_basic:type_name -> google.protobuf.Timestamp
	116, // 107: kabuspb.Symbol.derivative_month:type_name -> google.protobuf.Timestamp
	116, // 108: kabuspb.Symbol.trade_start:type_name -> google.protobuf.Timestamp
	116, // 109: kabuspb.Symbol.trade_end:type_name -> google.protobuf.Timestamp
	5,   // 110: kabuspb.Symbol.call_or_put:type_name -> kabuspb.CallPut
	116, // 111: kabuspb.FirstQuote.time:type_name -> google.protobuf.Timestamp
	85,  // 112: kabuspb.Orders.orders:type_name -> kabuspb.Order
	7,   // 113: kabuspb.Order.state:type_name -> kabuspb.State
	8,   // 114: kabuspb.Order.order_state:type_name -> kabuspb.OrderState
	11,  // 115: kabuspb.Order.order_type:type_name -> kabuspb.OrderType
	116, // 116: kabuspb.Order.receive_time:type_name -> google.protobuf.Timestamp
	12,  // 117: kabuspb.Order.exchange:type_name -> kabuspb.OrderExchange
	16,  // 118: kabuspb.Order.time_in_force:type_name -> kabuspb.TimeInForce
	9,   // 119: kabuspb.Order.side:type_name -> kabuspb.Side
	10,  // 120: kabuspb.Order.trade_type:type_name -> kabuspb.TradeType
	13,  // 121: kabuspb.Order.account_type:type_name -> kabuspb.AccountType
	14,  // 122: kabuspb.Order.delivery_type:type_name -> kabuspb.DeliveryType
	116, // 123: kabuspb.Order.expire_day:type_name -> google.protobuf.Timestamp
	15,  // 124: kabuspb.Order.margin_trade_type:type_name -> kabuspb.MarginTradeType
	86,  // 125: kabuspb.Order.details:type_name -> kabuspb.OrderDetail
	17,  // 126: kabuspb.OrderDetail.record_type:type_name -> kabuspb.RecordType
	18,  // 127: kabuspb.OrderDetail.state:type_name -> kabuspb.OrderDetailState
	116, // 128: kabuspb.OrderDetail.transact_time:type_name -> google.protobuf.Timestamp
	11,  // 129: kabuspb.OrderDetail.order_type:type_name -> kabuspb.OrderType
	116, // 130: kabuspb.OrderDetail.execution_day:type_name -> google.protobuf.Timestamp
	116, // 131: kabuspb.OrderDetail.delivery_day:type_name -> google.protobuf.Timestamp
	88,  // 132: kabuspb.Positions.positions:type_name -> kabuspb.Position
	13,  // 133: kabuspb.Position.account_type:type_name -> kabuspb.AccountType
	0,   // 134: kabuspb.Position.exchange:type_name -> kabuspb.Exchange
	19,  // 135: kabuspb.Position.security_type:type_name -> kabuspb.SecurityType
	116, // 136: kabuspb.Position.execution_day:type_name -> google.protobuf.Timestamp
	9,   // 137: kabuspb.Position.side:type_name -> kabuspb.Side
	116, // 138: kabuspb.Position.expire_day:type_name -> google.protobuf.Timestamp
	15,  // 139: kabuspb.Position.margin_trade_type:type_name -> kabuspb.MarginTradeType
	90,  // 140: kabuspb.RegisteredSymbols.symbols:type_name -> kabuspb.RegisterSymbol
	0,   // 141: kabuspb.RegisterSymbol.exchange:type_name -> kabuspb.Exchange
	21,  // 142: kabuspb.PriceRanking.type:type_name -> kabuspb.PriceRankingType
	20,  // 143: kabuspb.PriceRanking.exchange_division:type_name -> kabuspb.ExchangeDivision
	92,  // 144: kabuspb.PriceRanking.ranking:type_name -> kabuspb.PriceRankingInfo
	24,  // 145: kabuspb.PriceRankingInfo.trend:type_name -> kabuspb.RankingTrend
	116, // 146: kabuspb.PriceRankingInfo.current_price_time:type_name -> google.protobuf.Timestamp
	20,  // 147: kabuspb.TickRanking.exchange_division:type_name -> kabuspb.ExchangeDivision
	94,  // 148: kabuspb.TickRanking.ranking:type_name -> kabuspb.TickRankingInfo
	24,  // 149: kabuspb.TickRankingInfo.trend:type_name -> kabuspb.RankingTrend
	20,  // 150: kabuspb.VolumeRanking.exchange_division:type_name -> kabuspb.ExchangeDivision
	96,  // 151: kabuspb.VolumeRanking.ranking:type_name -> kabuspb.VolumeRankingInfo
	24,  // 152: kabuspb.VolumeRankingInfo.trend:type_name -> kabuspb.RankingTrend
	116, // 153: kabuspb.VolumeRankingInfo.current_price_time:type_name -> google.protobuf.Timestamp
	20,  // 154: kabuspb.ValueRanking.exchange_division:type_name -> kabuspb.ExchangeDivision
	98,  // 155: kabuspb.ValueRanking.ranking:type_name -> kabuspb.ValueRankingInfo
	24,  // 156: kabuspb.ValueRankingInfo.trend:type_name -> kabuspb.RankingTrend
	116, // 157: kabuspb.ValueRankingInfo.current_price_time:type_name -> google.protobuf.Timestamp
	22,  // 158: kabuspb.MarginRanking.type:type_name -> kabuspb.MarginRankingType
	20,  // 159: kabuspb.MarginRanking.exchange_division:type_name -> kabuspb.ExchangeDivision
	100, // 160: kabuspb.MarginRanking.ranking:type_name -> kabuspb.MarginRankingInfo
	23,  // 161: kabuspb.IndustryRanking.type:type_name -> kabuspb.IndustryRankingType
	20,  // 162: kabuspb.IndustryRanking.exchange_division:type_name -> kabuspb.ExchangeDivision
	102, // 163: kabuspb.IndustryRanking.ranking:type_name -> kabuspb.IndustryRankingInfo
	24,  // 164: kabuspb.IndustryRankingInfo.trend:type_name -> kabuspb.RankingTrend
	116, // 165: kabuspb.IndustryRankingInfo.current_price_time:type_name -> google.protobuf.Timestamp
	29,  // 166: kabuspb.ExchangeInfo.currency:type_name -> kabuspb.Currency
	116, // 167: kabuspb.ExchangeInfo.time:type_name -> google.protobuf.Timestamp
	110, // 168: kabuspb.Regulation.regulation_info_list:type_name -> kabuspb.RegulationInfo
	30,  // 169: kabuspb.RegulationInfo.exchange:type_name -> kabuspb.RegulationExchange
	31,  // 170: kabuspb.RegulationInfo.product:type_name -> kabuspb.RegulationProduct
	32,  // 171: kabuspb.RegulationInfo.side:type_name -> kabuspb.RegulationSide
	116, // 172: kabuspb.RegulationInfo.limit_start_day:type_name -> google.protobuf.Timestamp
	116, // 173: kabuspb.RegulationInfo.limit_end_day:type_name -> google.protobuf.Timestamp
	33,  // 174: kabuspb.RegulationInfo.level:type_name -> kabuspb.RegulationLevel
	1,   // 175: kabuspb.PrimaryExchange.primary_exchange:type_name -> kabuspb.StockExchange
	114, // 176: kabuspb.MarginPremium.general_margin:type_name -> kabuspb.MarginPremiumDetail
	114, // 177: kabuspb.MarginPremium.day_trade:type_name -> kabuspb.MarginPremiumDetail
	39,  // 178: kabuspb.MarginPremiumDetail.margin_premium_type:type_name -> kabuspb.MarginPremiumType
	42,  // 179: kabuspb.KabusService.SendStockOrder:input_type -> kabuspb.SendStockOrderRequest
	44,  // 180: kabuspb.KabusService.SendMarginOrder:input_type -> kabuspb.SendMarginOrderRequest
	46,  // 181: kabuspb.KabusService.SendFutureOrder:input_type -> kabuspb.SendFutureOrderRequest
	48,  // 182: kabuspb.KabusService.SendOptionOrder:input_type -> kabuspb.SendOptionOrderRequest
	51,  // 183: kabuspb.KabusService.CancelOrder:input_type -> kabuspb.CancelOrderRequest
	52,  // 184: kabuspb.KabusService.GetStockWallet:input_type -> kabuspb.GetStockWalletRequest
	53,  // 185: kabuspb.KabusService.GetMarginWallet:input_type -> kabuspb.GetMarginWalletRequest
	54,  // 186: kabuspb.KabusService.GetFutureWallet:input_type -> kabuspb.GetFutureWalletRequest
	55,  // 187: kabuspb.KabusService.GetOptionWallet:input_type -> kabuspb.GetOptionWalletRequest
	56,  // 188: kabuspb.KabusService.GetBoard:input_type -> kabuspb.GetBoardRequest
	57,  // 189: kabuspb.KabusService.GetSymbol:input_type -> kabuspb.GetSymbolRequest
	58,  // 190: kabuspb.KabusService.GetOrders:input_type -> kabuspb.GetOrdersRequest
	59,  // 191: kabuspb.KabusService.GetPositions:input_type -> kabuspb.GetPositionsRequest
	60,  // 192: kabuspb.KabusService.GetFutureSymbolCodeInfo:input_type -> kabuspb.GetFutureSymbolCodeInfoRequest
	61,  // 193: kabuspb.KabusService.GetOptionSymbolCodeInfo:input_type -> kabuspb.GetOptionSymbolCodeInfoRequest
	62,  // 194: kabuspb.KabusService.GetPriceRanking:input_type -> kabuspb.GetPriceRankingRequest
	63,  // 195: kabuspb.KabusService.GetTickRanking:input_type -> kabuspb.GetTickRankingRequest
	64,  // 196: kabuspb.KabusService.GetVolumeRanking:input_type -> kabuspb.GetVolumeRankingRequest
	65,  // 197: kabuspb.KabusService.GetValueRanking:input_type -> kabuspb.GetValueRankingRequest
	66,  // 198: kabuspb.KabusService.GetMarginRanking:input_type -> kabuspb.GetMarginRankingRequest
	67,  // 199: kabuspb.KabusService.GetIndustryRanking:input_type -> kabuspb.GetIndustryRankingRequest
	72,  // 200: kabuspb.KabusService.GetExchange:input_type -> kabuspb.GetExchangeRequest
	73,  // 201: kabuspb.KabusService.GetRegulation:input_type -> kabuspb.GetRegulationRequest
	74,  // 202: kabuspb.KabusService.GetPrimaryExchange:input_type -> kabuspb.GetPrimaryExchangeRequest
	75,  // 203: kabuspb.KabusService.GetSoftLimit:input_type -> kabuspb.GetSoftLimitRequest
	68,  // 204: kabuspb.KabusService.GetRegisteredSymbols:input_type -> kabuspb.GetRegisteredSymbolsRequest
	69,  // 205: kabuspb.KabusService.RegisterSymbols:input_type -> kabuspb.RegisterSymbolsRequest
	70,  // 206: kabuspb.KabusService.UnregisterSymbols:input_type -> kabuspb.UnregisterSymbolsRequest
	71,  // 207: kabuspb.KabusService.UnregisterAllSymbols:input_type -> kabuspb.UnregisterAllSymbolsRequest
	76,  // 208: kabuspb.KabusService.GetMarginPremium:input_type -> kabuspb.GetMarginPremiumRequest
	77,  // 209: kabuspb.KabusService.GetBoardsStreaming:input_type -> kabuspb.GetBoardsStreamingRequest
	103, // 210: kabuspb.KabusService.SendStockOrder:output_type -> kabuspb.OrderResponse
	103, // 211: kabuspb.KabusService.SendMarginOrder:output_type -> kabuspb.OrderResponse
	103, // 212: kabuspb.KabusService.SendFutureOrder:output_type -> kabuspb.OrderResponse
	103, // 213: kabuspb.KabusService.SendOptionOrder:output_type -> kabuspb.OrderResponse
	103, // 214: kabuspb.KabusService.CancelOrder:output_type -> kabuspb.OrderResponse
	104, // 215: kabuspb.KabusService.GetStockWallet:output_type -> kabuspb.StockWallet
	105, // 216: kabuspb.KabusService.GetMarginWallet:output_type -> kabuspb.MarginWallet
	106, // 217: kabuspb.KabusService.GetFutureWallet:output_type -> kabuspb.FutureWallet
	107, // 218: kabuspb.KabusService.GetOptionWallet:output_type -> kabuspb.OptionWallet
	79,  // 219: kabuspb.KabusService.GetBoard:output_type -> kabuspb.Board
	80,  // 220: kabuspb.KabusService.GetSymbol:output_type -> kabuspb.Symbol
	84,  // 221: kabuspb.KabusService.GetOrders:output_type -> kabuspb.Orders
	87,  // 222: kabuspb.KabusService.GetPositions:output_type -> kabuspb.Positions
	81,  // 223: kabuspb.KabusService.GetFutureSymbolCodeInfo:output_type -> kabuspb.SymbolCodeInfo
	81,  // 224: kabuspb.KabusService.GetOptionSymbolCodeInfo:output_type -> kabuspb.SymbolCodeInfo
	91,  // 225: kabuspb.KabusService.GetPriceRanking:output_type -> kabuspb.PriceRanking
	93,  // 226: kabuspb.KabusService.GetTickRanking:output_type -> kabuspb.TickRanking
	95,  // 227: kabuspb.KabusService.GetVolumeRanking:output_type -> kabuspb.VolumeRanking
	97,  // 228: kabuspb.KabusService.GetValueRanking:output_type -> kabuspb.ValueRanking
	99,  // 229: kabuspb.KabusService.GetMarginRanking:output_type -> kabuspb.MarginRanking
	101, // 230: kabuspb.KabusService.GetIndustryRanking:output_type -> kabuspb.IndustryRanking
	108, // 231: kabuspb.KabusService.GetExchange:output_type -> kabuspb.ExchangeInfo
	109, // 232: kabuspb.KabusService.GetRegulation:output_type -> kabuspb.Regulation
	111, // 233: kabuspb.KabusService.GetPrimaryExchange:output_type -> kabuspb.PrimaryExchange
	112, // 234: kabuspb.KabusService.GetSoftLimit:output_type -> kabuspb.SoftLimit
	89,  // 235: kabuspb.KabusService.GetRegisteredSymbols:output_type -> kabuspb.RegisteredSymbols
	89,  // 236: kabuspb.KabusService.RegisterSymbols:output_type -> kabuspb.RegisteredSymbols
	89,  // 237: kabuspb.KabusService.UnregisterSymbols:output_type -> kabuspb.RegisteredSymbols
	89,  // 238: kabuspb.KabusService.UnregisterAllSymbols:output_type -> kabuspb.RegisteredSymbols
	113, // 239: kabuspb.KabusService.GetMarginPremium:output_type -> kabuspb.MarginPremium
	79,  // 240: kabuspb.KabusService.GetBoardsStreaming:output_type -> kabuspb.Board
	210, // [210:241] is the sub-list for method output_type
	179, // [179:210] is the sub-list for method input_type
	179, // [179:179] is the sub-list for extension type_name
	179, // [179:179] is the sub-list for extension extendee
	0,   // [0:179] is the sub-list for field type_name
}

func init() { file_kabuspb_kabus_proto_init() }
func file_kabuspb_kabus_proto_init() {
	if File_kabuspb_kabus_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kabuspb_kabus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendStockOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockStopOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMarginOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginStopOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendFutureOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureStopOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendOptionOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionStopOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClosePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStockWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarginWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFutureWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOptionWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBoardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSymbolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPositionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFutureSymbolCodeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOptionSymbolCodeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPriceRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTickRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVolumeRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValueRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarginRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIndustryRankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegisteredSymbolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSymbolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnregisterSymbolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnregisterAllSymbolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegulationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrimaryExchangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSoftLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarginPremiumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBoardsStreamingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Board); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolCodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstQuote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Orders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Positions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisteredSymbols); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceRankingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickRankingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeRankingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueRankingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginRankingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndustryRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndustryRankingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Regulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimaryExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginPremium); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginPremiumDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kabuspb_kabus_proto_rawDesc,
			NumEnums:      40,
			NumMessages:   76,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kabuspb_kabus_proto_goTypes,
		DependencyIndexes: file_kabuspb_kabus_proto_depIdxs,
		EnumInfos:         file_kabuspb_kabus_proto_enumTypes,
		MessageInfos:      file_kabuspb_kabus_proto_msgTypes,
	}.Build()
	File_kabuspb_kabus_proto = out.File
	file_kabuspb_kabus_proto_rawDesc = nil
	file_kabuspb_kabus_proto_goTypes = nil
	file_kabuspb_kabus_proto_depIdxs = nil
}
