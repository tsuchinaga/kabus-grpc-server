// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: kabuspb/kabus.proto

package kabuspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 市場
type Exchange int32

const (
	Exchange_EXCHANGE_UNSPECIFIED Exchange = 0 // 指定なし
	// 株式
	Exchange_EXCHANGE_TOUSHOU   Exchange = 1 // 東証
	Exchange_EXCHANGE_MEISHOU   Exchange = 3 // 名証
	Exchange_EXCHANGE_FUKUSHOU  Exchange = 5 // 福証
	Exchange_EXCHANGE_SATSUSHOU Exchange = 6 // 札証
	// 先物・オプション
	Exchange_EXCHANGE_ALL_SESSION   Exchange = 2  // 日通し
	Exchange_EXCHANGE_DAY_SESSION   Exchange = 23 // 日中場
	Exchange_EXCHANGE_NIGHT_SESSION Exchange = 24 // 夕場
)

// Enum value maps for Exchange.
var (
	Exchange_name = map[int32]string{
		0:  "EXCHANGE_UNSPECIFIED",
		1:  "EXCHANGE_TOUSHOU",
		3:  "EXCHANGE_MEISHOU",
		5:  "EXCHANGE_FUKUSHOU",
		6:  "EXCHANGE_SATSUSHOU",
		2:  "EXCHANGE_ALL_SESSION",
		23: "EXCHANGE_DAY_SESSION",
		24: "EXCHANGE_NIGHT_SESSION",
	}
	Exchange_value = map[string]int32{
		"EXCHANGE_UNSPECIFIED":   0,
		"EXCHANGE_TOUSHOU":       1,
		"EXCHANGE_MEISHOU":       3,
		"EXCHANGE_FUKUSHOU":      5,
		"EXCHANGE_SATSUSHOU":     6,
		"EXCHANGE_ALL_SESSION":   2,
		"EXCHANGE_DAY_SESSION":   23,
		"EXCHANGE_NIGHT_SESSION": 24,
	}
)

func (x Exchange) Enum() *Exchange {
	p := new(Exchange)
	*p = x
	return p
}

func (x Exchange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Exchange) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[0].Descriptor()
}

func (Exchange) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[0]
}

func (x Exchange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Exchange.Descriptor instead.
func (Exchange) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{0}
}

// 先物コード
type FutureCode int32

const (
	FutureCode_FUTURE_CODE_UNSPECIFIED FutureCode = 0  // 指定なし
	FutureCode_FUTURE_CODE_NK225       FutureCode = 1  // 日経平均先物
	FutureCode_FUTURE_CODE_NK225_MINI  FutureCode = 2  // 日経225mini先物
	FutureCode_FUTURE_CODE_TOPIX       FutureCode = 3  // TOPIX先物
	FutureCode_FUTURE_CODE_TOPIX_MINI  FutureCode = 4  // ミニTOPIX先物
	FutureCode_FUTURE_CODE_MOTHERS     FutureCode = 5  // 東証マザーズ先物
	FutureCode_FUTURE_CODE_JPX400      FutureCode = 6  // JPX日経400先物
	FutureCode_FUTURE_CODE_DOW         FutureCode = 7  // NYダウ先物
	FutureCode_FUTURE_CODE_VI          FutureCode = 8  // 日経平均VI先物
	FutureCode_FUTURE_CODE_CORE30      FutureCode = 9  // TOPIX Core30先物
	FutureCode_FUTURE_CODE_REIT        FutureCode = 10 // 東証REIT指数先物
)

// Enum value maps for FutureCode.
var (
	FutureCode_name = map[int32]string{
		0:  "FUTURE_CODE_UNSPECIFIED",
		1:  "FUTURE_CODE_NK225",
		2:  "FUTURE_CODE_NK225_MINI",
		3:  "FUTURE_CODE_TOPIX",
		4:  "FUTURE_CODE_TOPIX_MINI",
		5:  "FUTURE_CODE_MOTHERS",
		6:  "FUTURE_CODE_JPX400",
		7:  "FUTURE_CODE_DOW",
		8:  "FUTURE_CODE_VI",
		9:  "FUTURE_CODE_CORE30",
		10: "FUTURE_CODE_REIT",
	}
	FutureCode_value = map[string]int32{
		"FUTURE_CODE_UNSPECIFIED": 0,
		"FUTURE_CODE_NK225":       1,
		"FUTURE_CODE_NK225_MINI":  2,
		"FUTURE_CODE_TOPIX":       3,
		"FUTURE_CODE_TOPIX_MINI":  4,
		"FUTURE_CODE_MOTHERS":     5,
		"FUTURE_CODE_JPX400":      6,
		"FUTURE_CODE_DOW":         7,
		"FUTURE_CODE_VI":          8,
		"FUTURE_CODE_CORE30":      9,
		"FUTURE_CODE_REIT":        10,
	}
)

func (x FutureCode) Enum() *FutureCode {
	p := new(FutureCode)
	*p = x
	return p
}

func (x FutureCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FutureCode) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[1].Descriptor()
}

func (FutureCode) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[1]
}

func (x FutureCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FutureCode.Descriptor instead.
func (FutureCode) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{1}
}

// コール or プット
type CallPut int32

const (
	CallPut_CALL_PUT_UNSPECIFIED CallPut = 0 // 指定なし
	CallPut_CALL_PUT_CALL        CallPut = 1 // CALL
	CallPut_CALL_PUT_PUT         CallPut = 2 // PUT
)

// Enum value maps for CallPut.
var (
	CallPut_name = map[int32]string{
		0: "CALL_PUT_UNSPECIFIED",
		1: "CALL_PUT_CALL",
		2: "CALL_PUT_PUT",
	}
	CallPut_value = map[string]int32{
		"CALL_PUT_UNSPECIFIED": 0,
		"CALL_PUT_CALL":        1,
		"CALL_PUT_PUT":         2,
	}
)

func (x CallPut) Enum() *CallPut {
	p := new(CallPut)
	*p = x
	return p
}

func (x CallPut) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallPut) Descriptor() protoreflect.EnumDescriptor {
	return file_kabuspb_kabus_proto_enumTypes[2].Descriptor()
}

func (CallPut) Type() protoreflect.EnumType {
	return &file_kabuspb_kabus_proto_enumTypes[2]
}

func (x CallPut) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallPut.Descriptor instead.
func (CallPut) EnumDescriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{2}
}

// トークン取得リクエスト
type GetTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTokenRequest) Reset() {
	*x = GetTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenRequest) ProtoMessage() {}

func (x *GetTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenRequest.ProtoReflect.Descriptor instead.
func (*GetTokenRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{0}
}

// トークン再取得リクエスト
type RefreshTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshTokenRequest) Reset() {
	*x = RefreshTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenRequest) ProtoMessage() {}

func (x *RefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*RefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{1}
}

// 時価情報・板情報リクエスト
type GetBoardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolCode string   `protobuf:"bytes,1,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	Exchange   Exchange `protobuf:"varint,2,opt,name=exchange,proto3,enum=kabuspb.Exchange" json:"exchange,omitempty"`
}

func (x *GetBoardRequest) Reset() {
	*x = GetBoardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBoardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBoardRequest) ProtoMessage() {}

func (x *GetBoardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBoardRequest.ProtoReflect.Descriptor instead.
func (*GetBoardRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{2}
}

func (x *GetBoardRequest) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *GetBoardRequest) GetExchange() Exchange {
	if x != nil {
		return x.Exchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

// 先物銘柄コード取得リクエスト
type GetFutureSymbolCodeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 先物コード
	FutureCode FutureCode `protobuf:"varint,1,opt,name=future_code,json=futureCode,proto3,enum=kabuspb.FutureCode" json:"future_code,omitempty"`
	// 限月
	//   年月の値だけを使います
	//   ゼロ値なら直近の限月と同義
	DerivativeMonth *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=derivative_month,json=derivativeMonth,proto3" json:"derivative_month,omitempty"`
}

func (x *GetFutureSymbolCodeInfoRequest) Reset() {
	*x = GetFutureSymbolCodeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFutureSymbolCodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFutureSymbolCodeInfoRequest) ProtoMessage() {}

func (x *GetFutureSymbolCodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFutureSymbolCodeInfoRequest.ProtoReflect.Descriptor instead.
func (*GetFutureSymbolCodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{3}
}

func (x *GetFutureSymbolCodeInfoRequest) GetFutureCode() FutureCode {
	if x != nil {
		return x.FutureCode
	}
	return FutureCode_FUTURE_CODE_UNSPECIFIED
}

func (x *GetFutureSymbolCodeInfoRequest) GetDerivativeMonth() *timestamppb.Timestamp {
	if x != nil {
		return x.DerivativeMonth
	}
	return nil
}

// オプション銘柄コード取得リクエスト
type GetOptionSymbolCodeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 限月
	//   年月の値だけを使います
	//   ゼロ値なら直近の限月と同義
	DerivativeMonth *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=derivative_month,json=derivativeMonth,proto3" json:"derivative_month,omitempty"`
	// コール or プット
	CallOrPut CallPut `protobuf:"varint,2,opt,name=call_or_put,json=callOrPut,proto3,enum=kabuspb.CallPut" json:"call_or_put,omitempty"`
	// 権利行使価格
	//   ゼロ値ならATMと同義
	StrikePrice int32 `protobuf:"varint,3,opt,name=strike_price,json=strikePrice,proto3" json:"strike_price,omitempty"`
}

func (x *GetOptionSymbolCodeInfoRequest) Reset() {
	*x = GetOptionSymbolCodeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOptionSymbolCodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOptionSymbolCodeInfoRequest) ProtoMessage() {}

func (x *GetOptionSymbolCodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOptionSymbolCodeInfoRequest.ProtoReflect.Descriptor instead.
func (*GetOptionSymbolCodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{4}
}

func (x *GetOptionSymbolCodeInfoRequest) GetDerivativeMonth() *timestamppb.Timestamp {
	if x != nil {
		return x.DerivativeMonth
	}
	return nil
}

func (x *GetOptionSymbolCodeInfoRequest) GetCallOrPut() CallPut {
	if x != nil {
		return x.CallOrPut
	}
	return CallPut_CALL_PUT_UNSPECIFIED
}

func (x *GetOptionSymbolCodeInfoRequest) GetStrikePrice() int32 {
	if x != nil {
		return x.StrikePrice
	}
	return 0
}

// 登録銘柄一覧リクエスト
type GetRegisteredSymbolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRegisteredSymbolsRequest) Reset() {
	*x = GetRegisteredSymbolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegisteredSymbolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegisteredSymbolsRequest) ProtoMessage() {}

func (x *GetRegisteredSymbolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegisteredSymbolsRequest.ProtoReflect.Descriptor instead.
func (*GetRegisteredSymbolsRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{5}
}

// 銘柄登録リクエスト
type RegisterSymbolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 登録する銘柄のリスト
	Symbols []*RegisterSymbol `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *RegisterSymbolsRequest) Reset() {
	*x = RegisterSymbolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSymbolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSymbolsRequest) ProtoMessage() {}

func (x *RegisterSymbolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSymbolsRequest.ProtoReflect.Descriptor instead.
func (*RegisterSymbolsRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterSymbolsRequest) GetSymbols() []*RegisterSymbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

// 銘柄登録解除リクエスト
type UnregisterSymbolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 登録解除する銘柄のリスト
	Symbols []*RegisterSymbol `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *UnregisterSymbolsRequest) Reset() {
	*x = UnregisterSymbolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterSymbolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterSymbolsRequest) ProtoMessage() {}

func (x *UnregisterSymbolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterSymbolsRequest.ProtoReflect.Descriptor instead.
func (*UnregisterSymbolsRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{7}
}

func (x *UnregisterSymbolsRequest) GetSymbols() []*RegisterSymbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

// 銘柄登録全解除リクエスト
type UnregisterAllSymbolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnregisterAllSymbolsRequest) Reset() {
	*x = UnregisterAllSymbolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterAllSymbolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterAllSymbolsRequest) ProtoMessage() {}

func (x *UnregisterAllSymbolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterAllSymbolsRequest.ProtoReflect.Descriptor instead.
func (*UnregisterAllSymbolsRequest) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{8}
}

// トークン
type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// トークン
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// 有効期限
	ExpiredAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{9}
}

func (x *Token) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Token) GetExpiredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredAt
	}
	return nil
}

// 時価情報・板情報
type Board struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 銘柄コード
	SymbolCode string `protobuf:"bytes,1,opt,name=symbol_code,json=symbolCode,proto3" json:"symbol_code,omitempty"`
	// 銘柄名
	SymbolName string `protobuf:"bytes,2,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`
	// 市場コード
	//   株式・先物・オプション銘柄の場合のみ
	Exchange Exchange `protobuf:"varint,3,opt,name=exchange,proto3,enum=kabuspb.Exchange" json:"exchange,omitempty"`
	// 市場名称
	//   株式・先物・オプション銘柄の場合のみ
	ExchangeName string `protobuf:"bytes,4,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"`
	// 現値
	CurrentPrice float64 `protobuf:"fixed64,5,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`
	// 現値時刻
	CurrentPriceTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=current_price_time,json=currentPriceTime,proto3" json:"current_price_time,omitempty"`
	// 現値前値比較
	CurrentPriceChangeStatus string `protobuf:"bytes,7,opt,name=current_price_change_status,json=currentPriceChangeStatus,proto3" json:"current_price_change_status,omitempty"` // TODO enum化
	// 現値ステータス
	CurrentPriceStatus int32 `protobuf:"varint,8,opt,name=current_price_status,json=currentPriceStatus,proto3" json:"current_price_status,omitempty"` // TODO enum化
	// 計算用現値
	CalculationPrice float64 `protobuf:"fixed64,9,opt,name=calculation_price,json=calculationPrice,proto3" json:"calculation_price,omitempty"`
	// 前日終値
	PreviousClose float64 `protobuf:"fixed64,10,opt,name=previous_close,json=previousClose,proto3" json:"previous_close,omitempty"`
	// 前日終値日付
	PreviousCloseTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=previous_close_time,json=previousCloseTime,proto3" json:"previous_close_time,omitempty"`
	// 前日比
	ChangePreviousClose float64 `protobuf:"fixed64,12,opt,name=change_previous_close,json=changePreviousClose,proto3" json:"change_previous_close,omitempty"`
	// 騰落率
	ChangePreviousClosePer float64 `protobuf:"fixed64,13,opt,name=change_previous_close_per,json=changePreviousClosePer,proto3" json:"change_previous_close_per,omitempty"`
	// 始値
	OpeningPrice float64 `protobuf:"fixed64,14,opt,name=opening_price,json=openingPrice,proto3" json:"opening_price,omitempty"`
	// 始値時刻
	OpeningPriceTime *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=opening_price_time,json=openingPriceTime,proto3" json:"opening_price_time,omitempty"`
	// 高値
	HighPrice float64 `protobuf:"fixed64,16,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	// 高値時刻
	HighPriceTime *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=high_price_time,json=highPriceTime,proto3" json:"high_price_time,omitempty"`
	// 安値
	LowPrice float64 `protobuf:"fixed64,18,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	// 安値時刻
	LowPriceTime *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=low_price_time,json=lowPriceTime,proto3" json:"low_price_time,omitempty"`
	// 売買高
	//   株式・先物・オプション銘柄の場合のみ
	TradingVolume float64 `protobuf:"fixed64,20,opt,name=trading_volume,json=tradingVolume,proto3" json:"trading_volume,omitempty"`
	// 売買高時刻
	//   株式・先物・オプション銘柄の場合のみ
	TradingVolumeTime *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=trading_volume_time,json=tradingVolumeTime,proto3" json:"trading_volume_time,omitempty"`
	// 売買高加重平均価格（VWAP）
	//   株式・先物・オプション銘柄の場合のみ
	Vwap float64 `protobuf:"fixed64,22,opt,name=vwap,proto3" json:"vwap,omitempty"`
	// 売買代金
	//   株式・先物・オプション銘柄の場合のみ
	TradingValue float64 `protobuf:"fixed64,23,opt,name=trading_value,json=tradingValue,proto3" json:"trading_value,omitempty"`
	// 最良売気配数量
	//   株式・先物・オプション銘柄の場合のみ
	BidQuantity float64 `protobuf:"fixed64,24,opt,name=bid_quantity,json=bidQuantity,proto3" json:"bid_quantity,omitempty"`
	// 最良売気配値段
	//   株式・先物・オプション銘柄の場合のみ
	BidPrice float64 `protobuf:"fixed64,25,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	// 最良売気配時刻
	//  株式銘柄の場合のみ
	BidTime *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=bid_time,json=bidTime,proto3" json:"bid_time,omitempty"`
	// 最良売気配フラグ
	//   株式・先物・オプション銘柄の場合のみ
	BidSign string `protobuf:"bytes,27,opt,name=bid_sign,json=bidSign,proto3" json:"bid_sign,omitempty"` // TODO enum化
	// 売成行数量
	//   株式銘柄の場合のみ
	MarketOrderSellQuantity float64 `protobuf:"fixed64,28,opt,name=market_order_sell_quantity,json=marketOrderSellQuantity,proto3" json:"market_order_sell_quantity,omitempty"`
	// 売気配数量1本目
	Sell1 *FirstQuote `protobuf:"bytes,29,opt,name=sell1,proto3" json:"sell1,omitempty"`
	// 売気配数量2本目
	Sell2 *Quote `protobuf:"bytes,30,opt,name=sell2,proto3" json:"sell2,omitempty"`
	// 売気配数量3本目
	Sell3 *Quote `protobuf:"bytes,31,opt,name=sell3,proto3" json:"sell3,omitempty"`
	// 売気配数量4本目
	Sell4 *Quote `protobuf:"bytes,32,opt,name=sell4,proto3" json:"sell4,omitempty"`
	// 売気配数量5本目
	Sell5 *Quote `protobuf:"bytes,33,opt,name=sell5,proto3" json:"sell5,omitempty"`
	// 売気配数量6本目
	Sell6 *Quote `protobuf:"bytes,34,opt,name=sell6,proto3" json:"sell6,omitempty"`
	// 売気配数量7本目
	Sell7 *Quote `protobuf:"bytes,35,opt,name=sell7,proto3" json:"sell7,omitempty"`
	// 売気配数量8本目
	Sell8 *Quote `protobuf:"bytes,36,opt,name=sell8,proto3" json:"sell8,omitempty"`
	// 売気配数量9本目
	Sell9 *Quote `protobuf:"bytes,37,opt,name=sell9,proto3" json:"sell9,omitempty"`
	// 売気配数量10本目
	Sell10 *Quote `protobuf:"bytes,38,opt,name=sell10,proto3" json:"sell10,omitempty"`
	// 最良買気配数量
	//   株式・先物・オプション銘柄の場合のみ
	AskQuantity float64 `protobuf:"fixed64,39,opt,name=ask_quantity,json=askQuantity,proto3" json:"ask_quantity,omitempty"`
	// 最良買気配値段
	//   株式・先物・オプション銘柄の場合のみ
	AskPrice float64 `protobuf:"fixed64,40,opt,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	// 最良買気配時刻
	//  株式銘柄の場合のみ
	AskTime *timestamppb.Timestamp `protobuf:"bytes,41,opt,name=ask_time,json=askTime,proto3" json:"ask_time,omitempty"`
	// 最良買気配フラグ
	//   株式・先物・オプション銘柄の場合のみ
	AskSign string `protobuf:"bytes,42,opt,name=ask_sign,json=askSign,proto3" json:"ask_sign,omitempty"` // TODO enum化
	// 買成行数量
	//   株式銘柄の場合のみ
	MarketOrderBuyQuantity float64 `protobuf:"fixed64,43,opt,name=market_order_buy_quantity,json=marketOrderBuyQuantity,proto3" json:"market_order_buy_quantity,omitempty"`
	// 買気配数量1本目
	Buy1 *FirstQuote `protobuf:"bytes,44,opt,name=buy1,proto3" json:"buy1,omitempty"`
	// 買気配数量2本目
	Buy2 *Quote `protobuf:"bytes,45,opt,name=buy2,proto3" json:"buy2,omitempty"`
	// 買気配数量3本目
	Buy3 *Quote `protobuf:"bytes,46,opt,name=buy3,proto3" json:"buy3,omitempty"`
	// 買気配数量4本目
	Buy4 *Quote `protobuf:"bytes,47,opt,name=buy4,proto3" json:"buy4,omitempty"`
	// 買気配数量5本目
	Buy5 *Quote `protobuf:"bytes,48,opt,name=buy5,proto3" json:"buy5,omitempty"`
	// 買気配数量6本目
	Buy6 *Quote `protobuf:"bytes,49,opt,name=buy6,proto3" json:"buy6,omitempty"`
	// 買気配数量7本目
	Buy7 *Quote `protobuf:"bytes,50,opt,name=buy7,proto3" json:"buy7,omitempty"`
	// 買気配数量8本目
	Buy8 *Quote `protobuf:"bytes,51,opt,name=buy8,proto3" json:"buy8,omitempty"`
	// 買気配数量9本目
	Buy9 *Quote `protobuf:"bytes,52,opt,name=buy9,proto3" json:"buy9,omitempty"`
	// 買気配数量10本目
	Buy10 *Quote `protobuf:"bytes,53,opt,name=buy10,proto3" json:"buy10,omitempty"`
	// OVER気配数量
	//   株式銘柄の場合のみ
	OverSellQuantity float64 `protobuf:"fixed64,54,opt,name=over_sell_quantity,json=overSellQuantity,proto3" json:"over_sell_quantity,omitempty"`
	// UNDER気配数量
	//   株式銘柄の場合のみ
	UnderBuyQuantity float64 `protobuf:"fixed64,55,opt,name=under_buy_quantity,json=underBuyQuantity,proto3" json:"under_buy_quantity,omitempty"`
	// 時価総額
	//   株式銘柄の場合のみ
	TotalMarketValue float64 `protobuf:"fixed64,56,opt,name=total_market_value,json=totalMarketValue,proto3" json:"total_market_value,omitempty"`
	// 清算値
	//   先物銘柄の場合のみ
	ClearingPrice float64 `protobuf:"fixed64,57,opt,name=clearing_price,json=clearingPrice,proto3" json:"clearing_price,omitempty"`
	// インプライド・ボラティリティ
	//   オプション銘柄かつ日通しの場合のみ
	ImpliedVolatility float64 `protobuf:"fixed64,58,opt,name=implied_volatility,json=impliedVolatility,proto3" json:"implied_volatility,omitempty"`
	// ガンマ
	//   オプション銘柄かつ日通しの場合のみ
	Gamma float64 `protobuf:"fixed64,59,opt,name=gamma,proto3" json:"gamma,omitempty"`
	// セータ
	//   オプション銘柄かつ日通しの場合のみ
	Theta float64 `protobuf:"fixed64,60,opt,name=theta,proto3" json:"theta,omitempty"`
	// ベガ
	//   オプション銘柄かつ日通しの場合のみ
	Vega float64 `protobuf:"fixed64,61,opt,name=vega,proto3" json:"vega,omitempty"`
	// デルタ
	//   オプション銘柄かつ日通しの場合のみ
	Delta float64 `protobuf:"fixed64,62,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *Board) Reset() {
	*x = Board{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Board) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Board) ProtoMessage() {}

func (x *Board) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Board.ProtoReflect.Descriptor instead.
func (*Board) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{10}
}

func (x *Board) GetSymbolCode() string {
	if x != nil {
		return x.SymbolCode
	}
	return ""
}

func (x *Board) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *Board) GetExchange() Exchange {
	if x != nil {
		return x.Exchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

func (x *Board) GetExchangeName() string {
	if x != nil {
		return x.ExchangeName
	}
	return ""
}

func (x *Board) GetCurrentPrice() float64 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

func (x *Board) GetCurrentPriceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentPriceTime
	}
	return nil
}

func (x *Board) GetCurrentPriceChangeStatus() string {
	if x != nil {
		return x.CurrentPriceChangeStatus
	}
	return ""
}

func (x *Board) GetCurrentPriceStatus() int32 {
	if x != nil {
		return x.CurrentPriceStatus
	}
	return 0
}

func (x *Board) GetCalculationPrice() float64 {
	if x != nil {
		return x.CalculationPrice
	}
	return 0
}

func (x *Board) GetPreviousClose() float64 {
	if x != nil {
		return x.PreviousClose
	}
	return 0
}

func (x *Board) GetPreviousCloseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PreviousCloseTime
	}
	return nil
}

func (x *Board) GetChangePreviousClose() float64 {
	if x != nil {
		return x.ChangePreviousClose
	}
	return 0
}

func (x *Board) GetChangePreviousClosePer() float64 {
	if x != nil {
		return x.ChangePreviousClosePer
	}
	return 0
}

func (x *Board) GetOpeningPrice() float64 {
	if x != nil {
		return x.OpeningPrice
	}
	return 0
}

func (x *Board) GetOpeningPriceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OpeningPriceTime
	}
	return nil
}

func (x *Board) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *Board) GetHighPriceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.HighPriceTime
	}
	return nil
}

func (x *Board) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *Board) GetLowPriceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LowPriceTime
	}
	return nil
}

func (x *Board) GetTradingVolume() float64 {
	if x != nil {
		return x.TradingVolume
	}
	return 0
}

func (x *Board) GetTradingVolumeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TradingVolumeTime
	}
	return nil
}

func (x *Board) GetVwap() float64 {
	if x != nil {
		return x.Vwap
	}
	return 0
}

func (x *Board) GetTradingValue() float64 {
	if x != nil {
		return x.TradingValue
	}
	return 0
}

func (x *Board) GetBidQuantity() float64 {
	if x != nil {
		return x.BidQuantity
	}
	return 0
}

func (x *Board) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *Board) GetBidTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BidTime
	}
	return nil
}

func (x *Board) GetBidSign() string {
	if x != nil {
		return x.BidSign
	}
	return ""
}

func (x *Board) GetMarketOrderSellQuantity() float64 {
	if x != nil {
		return x.MarketOrderSellQuantity
	}
	return 0
}

func (x *Board) GetSell1() *FirstQuote {
	if x != nil {
		return x.Sell1
	}
	return nil
}

func (x *Board) GetSell2() *Quote {
	if x != nil {
		return x.Sell2
	}
	return nil
}

func (x *Board) GetSell3() *Quote {
	if x != nil {
		return x.Sell3
	}
	return nil
}

func (x *Board) GetSell4() *Quote {
	if x != nil {
		return x.Sell4
	}
	return nil
}

func (x *Board) GetSell5() *Quote {
	if x != nil {
		return x.Sell5
	}
	return nil
}

func (x *Board) GetSell6() *Quote {
	if x != nil {
		return x.Sell6
	}
	return nil
}

func (x *Board) GetSell7() *Quote {
	if x != nil {
		return x.Sell7
	}
	return nil
}

func (x *Board) GetSell8() *Quote {
	if x != nil {
		return x.Sell8
	}
	return nil
}

func (x *Board) GetSell9() *Quote {
	if x != nil {
		return x.Sell9
	}
	return nil
}

func (x *Board) GetSell10() *Quote {
	if x != nil {
		return x.Sell10
	}
	return nil
}

func (x *Board) GetAskQuantity() float64 {
	if x != nil {
		return x.AskQuantity
	}
	return 0
}

func (x *Board) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *Board) GetAskTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AskTime
	}
	return nil
}

func (x *Board) GetAskSign() string {
	if x != nil {
		return x.AskSign
	}
	return ""
}

func (x *Board) GetMarketOrderBuyQuantity() float64 {
	if x != nil {
		return x.MarketOrderBuyQuantity
	}
	return 0
}

func (x *Board) GetBuy1() *FirstQuote {
	if x != nil {
		return x.Buy1
	}
	return nil
}

func (x *Board) GetBuy2() *Quote {
	if x != nil {
		return x.Buy2
	}
	return nil
}

func (x *Board) GetBuy3() *Quote {
	if x != nil {
		return x.Buy3
	}
	return nil
}

func (x *Board) GetBuy4() *Quote {
	if x != nil {
		return x.Buy4
	}
	return nil
}

func (x *Board) GetBuy5() *Quote {
	if x != nil {
		return x.Buy5
	}
	return nil
}

func (x *Board) GetBuy6() *Quote {
	if x != nil {
		return x.Buy6
	}
	return nil
}

func (x *Board) GetBuy7() *Quote {
	if x != nil {
		return x.Buy7
	}
	return nil
}

func (x *Board) GetBuy8() *Quote {
	if x != nil {
		return x.Buy8
	}
	return nil
}

func (x *Board) GetBuy9() *Quote {
	if x != nil {
		return x.Buy9
	}
	return nil
}

func (x *Board) GetBuy10() *Quote {
	if x != nil {
		return x.Buy10
	}
	return nil
}

func (x *Board) GetOverSellQuantity() float64 {
	if x != nil {
		return x.OverSellQuantity
	}
	return 0
}

func (x *Board) GetUnderBuyQuantity() float64 {
	if x != nil {
		return x.UnderBuyQuantity
	}
	return 0
}

func (x *Board) GetTotalMarketValue() float64 {
	if x != nil {
		return x.TotalMarketValue
	}
	return 0
}

func (x *Board) GetClearingPrice() float64 {
	if x != nil {
		return x.ClearingPrice
	}
	return 0
}

func (x *Board) GetImpliedVolatility() float64 {
	if x != nil {
		return x.ImpliedVolatility
	}
	return 0
}

func (x *Board) GetGamma() float64 {
	if x != nil {
		return x.Gamma
	}
	return 0
}

func (x *Board) GetTheta() float64 {
	if x != nil {
		return x.Theta
	}
	return 0
}

func (x *Board) GetVega() float64 {
	if x != nil {
		return x.Vega
	}
	return 0
}

func (x *Board) GetDelta() float64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

// 銘柄コード情報
type SymbolCodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 銘柄コード
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// 銘柄名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SymbolCodeInfo) Reset() {
	*x = SymbolCodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolCodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolCodeInfo) ProtoMessage() {}

func (x *SymbolCodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolCodeInfo.ProtoReflect.Descriptor instead.
func (*SymbolCodeInfo) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{11}
}

func (x *SymbolCodeInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SymbolCodeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 気配値 + 気配値フラグ
type FirstQuote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 時刻
	//  株式銘柄の場合のみ
	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// 気配フラグ
	//   株式・先物・オプション銘柄の場合のみ
	Sign string `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"` // TODO enum化
	// 値段
	//   株式・先物・オプション銘柄の場合のみ
	Price float64 `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	// 数量
	//   株式・先物・オプション銘柄の場合のみ
	Quantity float64 `protobuf:"fixed64,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *FirstQuote) Reset() {
	*x = FirstQuote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstQuote) ProtoMessage() {}

func (x *FirstQuote) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstQuote.ProtoReflect.Descriptor instead.
func (*FirstQuote) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{12}
}

func (x *FirstQuote) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *FirstQuote) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *FirstQuote) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *FirstQuote) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// 気配値
type Quote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 値段
	//   株式・先物・オプション銘柄の場合のみ
	Price float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	// 数量
	//   株式・先物・オプション銘柄の場合のみ
	Quantity float64 `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *Quote) Reset() {
	*x = Quote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quote) ProtoMessage() {}

func (x *Quote) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quote.ProtoReflect.Descriptor instead.
func (*Quote) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{13}
}

func (x *Quote) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Quote) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// 銘柄登録
type RegisteredSymbols struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 現在登録されている銘柄のリスト
	Symbols []*RegisterSymbol `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *RegisteredSymbols) Reset() {
	*x = RegisteredSymbols{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredSymbols) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredSymbols) ProtoMessage() {}

func (x *RegisteredSymbols) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredSymbols.ProtoReflect.Descriptor instead.
func (*RegisteredSymbols) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{14}
}

func (x *RegisteredSymbols) GetSymbols() []*RegisterSymbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

// 銘柄登録の詳細
type RegisterSymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 銘柄コード
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// 市場
	Exchange Exchange `protobuf:"varint,2,opt,name=exchange,proto3,enum=kabuspb.Exchange" json:"exchange,omitempty"`
}

func (x *RegisterSymbol) Reset() {
	*x = RegisterSymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kabuspb_kabus_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSymbol) ProtoMessage() {}

func (x *RegisterSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_kabuspb_kabus_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSymbol.ProtoReflect.Descriptor instead.
func (*RegisterSymbol) Descriptor() ([]byte, []int) {
	return file_kabuspb_kabus_proto_rawDescGZIP(), []int{15}
}

func (x *RegisterSymbol) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *RegisterSymbol) GetExchange() Exchange {
	if x != nil {
		return x.Exchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

var File_kabuspb_kabus_proto protoreflect.FileDescriptor

var file_kabuspb_kabus_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2f, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x9d, 0x01, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x0b, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x66, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x64, 0x65, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0xbc, 0x01, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x45, 0x0a, 0x10, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6f,
	0x72, 0x5f, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6b, 0x61,
	0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x75, 0x74, 0x52, 0x09, 0x63,
	0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x50, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x16, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x07,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x22, 0x4d, 0x0a, 0x18, 0x55, 0x6e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x07, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xad, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x1b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0f,
	0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a,
	0x0e, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x11, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x77, 0x61, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x76, 0x77, 0x61, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x62, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x62,
	0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x62, 0x69, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x3b, 0x0a,
	0x1a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x17, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x65,
	0x6c, 0x6c, 0x31, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x61, 0x62, 0x75,
	0x73, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x65, 0x6c, 0x6c, 0x31, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x32, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x32, 0x12, 0x24, 0x0a, 0x05, 0x73,
	0x65, 0x6c, 0x6c, 0x33, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62,
	0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c,
	0x33, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x34, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x34, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x35,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x35, 0x12, 0x24, 0x0a,
	0x05, 0x73, 0x65, 0x6c, 0x6c, 0x36, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x73, 0x65,
	0x6c, 0x6c, 0x36, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x37, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x37, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x65, 0x6c,
	0x6c, 0x38, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x38, 0x12,
	0x24, 0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x39, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x65, 0x6c, 0x6c, 0x39, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x31, 0x30, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x31, 0x30, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x61, 0x73, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x12,
	0x39, 0x0a, 0x19, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x75, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x16, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x75, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x62, 0x75,
	0x79, 0x31, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x62,
	0x75, 0x79, 0x31, 0x12, 0x22, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x32, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x52, 0x04, 0x62, 0x75, 0x79, 0x32, 0x12, 0x22, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x33, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x62, 0x75, 0x79, 0x33, 0x12, 0x22, 0x0a, 0x04, 0x62,
	0x75, 0x79, 0x34, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75,
	0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x62, 0x75, 0x79, 0x34, 0x12,
	0x22, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x35, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x62,
	0x75, 0x79, 0x35, 0x12, 0x22, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x36, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x52, 0x04, 0x62, 0x75, 0x79, 0x36, 0x12, 0x22, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x37, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x62, 0x75, 0x79, 0x37, 0x12, 0x22, 0x0a, 0x04, 0x62,
	0x75, 0x79, 0x38, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75,
	0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x62, 0x75, 0x79, 0x38, 0x12,
	0x22, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x39, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x62,
	0x75, 0x79, 0x39, 0x12, 0x24, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x31, 0x30, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x52, 0x05, 0x62, 0x75, 0x79, 0x31, 0x30, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x6c, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x75, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x75, 0x79, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x6d,
	0x6d, 0x61, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x74, 0x68, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x65, 0x67, 0x61, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x76, 0x65, 0x67, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22,
	0x38, 0x0a, 0x0e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x39,
	0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x46, 0x0a, 0x11, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x31,
	0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x22, 0x57, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2d, 0x0a, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2a, 0xcf, 0x01, 0x0a, 0x08, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x4f,
	0x55, 0x53, 0x48, 0x4f, 0x55, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x45, 0x49, 0x53, 0x48, 0x4f, 0x55, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x55, 0x4b, 0x55, 0x53, 0x48,
	0x4f, 0x55, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x53, 0x41, 0x54, 0x53, 0x55, 0x53, 0x48, 0x4f, 0x55, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x17,
	0x12, 0x1a, 0x0a, 0x16, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x18, 0x2a, 0x97, 0x02, 0x0a,
	0x0a, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x46,
	0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x55, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4b, 0x32, 0x32, 0x35, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e,
	0x4b, 0x32, 0x32, 0x35, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x46,
	0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x58,
	0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x58, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x53, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x55, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4a, 0x50, 0x58, 0x34, 0x30, 0x30, 0x10, 0x06, 0x12,
	0x13, 0x0a, 0x0f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44,
	0x4f, 0x57, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x56, 0x49, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x55, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x33, 0x30, 0x10, 0x09,
	0x12, 0x14, 0x0a, 0x10, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x52, 0x45, 0x49, 0x54, 0x10, 0x0a, 0x2a, 0x48, 0x0a, 0x07, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x75,
	0x74, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x55, 0x54, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x55, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x55, 0x54, 0x5f, 0x50, 0x55, 0x54, 0x10, 0x02,
	0x32, 0xca, 0x05, 0x0a, 0x0c, 0x4b, 0x61, 0x62, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x34, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x2e,
	0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70,
	0x62, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x12, 0x18, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6b, 0x61,
	0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x5b, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x27, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6b,
	0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x24, 0x2e,
	0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12,
	0x4e, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x12, 0x1f, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12,
	0x52, 0x0a, 0x11, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x12, 0x21, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x55,
	0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x14, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x6c, 0x6c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x24, 0x2e, 0x6b, 0x61,
	0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x6c, 0x6c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x42, 0x0b, 0x5a,
	0x09, 0x2e, 0x3b, 0x6b, 0x61, 0x62, 0x75, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_kabuspb_kabus_proto_rawDescOnce sync.Once
	file_kabuspb_kabus_proto_rawDescData = file_kabuspb_kabus_proto_rawDesc
)

func file_kabuspb_kabus_proto_rawDescGZIP() []byte {
	file_kabuspb_kabus_proto_rawDescOnce.Do(func() {
		file_kabuspb_kabus_proto_rawDescData = protoimpl.X.CompressGZIP(file_kabuspb_kabus_proto_rawDescData)
	})
	return file_kabuspb_kabus_proto_rawDescData
}

var file_kabuspb_kabus_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_kabuspb_kabus_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_kabuspb_kabus_proto_goTypes = []interface{}{
	(Exchange)(0),                          // 0: kabuspb.Exchange
	(FutureCode)(0),                        // 1: kabuspb.FutureCode
	(CallPut)(0),                           // 2: kabuspb.CallPut
	(*GetTokenRequest)(nil),                // 3: kabuspb.GetTokenRequest
	(*RefreshTokenRequest)(nil),            // 4: kabuspb.RefreshTokenRequest
	(*GetBoardRequest)(nil),                // 5: kabuspb.GetBoardRequest
	(*GetFutureSymbolCodeInfoRequest)(nil), // 6: kabuspb.GetFutureSymbolCodeInfoRequest
	(*GetOptionSymbolCodeInfoRequest)(nil), // 7: kabuspb.GetOptionSymbolCodeInfoRequest
	(*GetRegisteredSymbolsRequest)(nil),    // 8: kabuspb.GetRegisteredSymbolsRequest
	(*RegisterSymbolsRequest)(nil),         // 9: kabuspb.RegisterSymbolsRequest
	(*UnregisterSymbolsRequest)(nil),       // 10: kabuspb.UnregisterSymbolsRequest
	(*UnregisterAllSymbolsRequest)(nil),    // 11: kabuspb.UnregisterAllSymbolsRequest
	(*Token)(nil),                          // 12: kabuspb.Token
	(*Board)(nil),                          // 13: kabuspb.Board
	(*SymbolCodeInfo)(nil),                 // 14: kabuspb.SymbolCodeInfo
	(*FirstQuote)(nil),                     // 15: kabuspb.FirstQuote
	(*Quote)(nil),                          // 16: kabuspb.Quote
	(*RegisteredSymbols)(nil),              // 17: kabuspb.RegisteredSymbols
	(*RegisterSymbol)(nil),                 // 18: kabuspb.RegisterSymbol
	(*timestamppb.Timestamp)(nil),          // 19: google.protobuf.Timestamp
}
var file_kabuspb_kabus_proto_depIdxs = []int32{
	0,  // 0: kabuspb.GetBoardRequest.exchange:type_name -> kabuspb.Exchange
	1,  // 1: kabuspb.GetFutureSymbolCodeInfoRequest.future_code:type_name -> kabuspb.FutureCode
	19, // 2: kabuspb.GetFutureSymbolCodeInfoRequest.derivative_month:type_name -> google.protobuf.Timestamp
	19, // 3: kabuspb.GetOptionSymbolCodeInfoRequest.derivative_month:type_name -> google.protobuf.Timestamp
	2,  // 4: kabuspb.GetOptionSymbolCodeInfoRequest.call_or_put:type_name -> kabuspb.CallPut
	18, // 5: kabuspb.RegisterSymbolsRequest.symbols:type_name -> kabuspb.RegisterSymbol
	18, // 6: kabuspb.UnregisterSymbolsRequest.symbols:type_name -> kabuspb.RegisterSymbol
	19, // 7: kabuspb.Token.expired_at:type_name -> google.protobuf.Timestamp
	0,  // 8: kabuspb.Board.exchange:type_name -> kabuspb.Exchange
	19, // 9: kabuspb.Board.current_price_time:type_name -> google.protobuf.Timestamp
	19, // 10: kabuspb.Board.previous_close_time:type_name -> google.protobuf.Timestamp
	19, // 11: kabuspb.Board.opening_price_time:type_name -> google.protobuf.Timestamp
	19, // 12: kabuspb.Board.high_price_time:type_name -> google.protobuf.Timestamp
	19, // 13: kabuspb.Board.low_price_time:type_name -> google.protobuf.Timestamp
	19, // 14: kabuspb.Board.trading_volume_time:type_name -> google.protobuf.Timestamp
	19, // 15: kabuspb.Board.bid_time:type_name -> google.protobuf.Timestamp
	15, // 16: kabuspb.Board.sell1:type_name -> kabuspb.FirstQuote
	16, // 17: kabuspb.Board.sell2:type_name -> kabuspb.Quote
	16, // 18: kabuspb.Board.sell3:type_name -> kabuspb.Quote
	16, // 19: kabuspb.Board.sell4:type_name -> kabuspb.Quote
	16, // 20: kabuspb.Board.sell5:type_name -> kabuspb.Quote
	16, // 21: kabuspb.Board.sell6:type_name -> kabuspb.Quote
	16, // 22: kabuspb.Board.sell7:type_name -> kabuspb.Quote
	16, // 23: kabuspb.Board.sell8:type_name -> kabuspb.Quote
	16, // 24: kabuspb.Board.sell9:type_name -> kabuspb.Quote
	16, // 25: kabuspb.Board.sell10:type_name -> kabuspb.Quote
	19, // 26: kabuspb.Board.ask_time:type_name -> google.protobuf.Timestamp
	15, // 27: kabuspb.Board.buy1:type_name -> kabuspb.FirstQuote
	16, // 28: kabuspb.Board.buy2:type_name -> kabuspb.Quote
	16, // 29: kabuspb.Board.buy3:type_name -> kabuspb.Quote
	16, // 30: kabuspb.Board.buy4:type_name -> kabuspb.Quote
	16, // 31: kabuspb.Board.buy5:type_name -> kabuspb.Quote
	16, // 32: kabuspb.Board.buy6:type_name -> kabuspb.Quote
	16, // 33: kabuspb.Board.buy7:type_name -> kabuspb.Quote
	16, // 34: kabuspb.Board.buy8:type_name -> kabuspb.Quote
	16, // 35: kabuspb.Board.buy9:type_name -> kabuspb.Quote
	16, // 36: kabuspb.Board.buy10:type_name -> kabuspb.Quote
	19, // 37: kabuspb.FirstQuote.time:type_name -> google.protobuf.Timestamp
	18, // 38: kabuspb.RegisteredSymbols.symbols:type_name -> kabuspb.RegisterSymbol
	0,  // 39: kabuspb.RegisterSymbol.exchange:type_name -> kabuspb.Exchange
	3,  // 40: kabuspb.KabusService.GetToken:input_type -> kabuspb.GetTokenRequest
	4,  // 41: kabuspb.KabusService.RefreshToken:input_type -> kabuspb.RefreshTokenRequest
	5,  // 42: kabuspb.KabusService.GetBoard:input_type -> kabuspb.GetBoardRequest
	6,  // 43: kabuspb.KabusService.GetFutureSymbolCodeInfo:input_type -> kabuspb.GetFutureSymbolCodeInfoRequest
	7,  // 44: kabuspb.KabusService.GetOptionSymbolCodeInfo:input_type -> kabuspb.GetOptionSymbolCodeInfoRequest
	8,  // 45: kabuspb.KabusService.GetRegisteredSymbols:input_type -> kabuspb.GetRegisteredSymbolsRequest
	9,  // 46: kabuspb.KabusService.RegisterSymbols:input_type -> kabuspb.RegisterSymbolsRequest
	10, // 47: kabuspb.KabusService.UnregisterSymbols:input_type -> kabuspb.UnregisterSymbolsRequest
	11, // 48: kabuspb.KabusService.UnregisterAllSymbols:input_type -> kabuspb.UnregisterAllSymbolsRequest
	12, // 49: kabuspb.KabusService.GetToken:output_type -> kabuspb.Token
	12, // 50: kabuspb.KabusService.RefreshToken:output_type -> kabuspb.Token
	13, // 51: kabuspb.KabusService.GetBoard:output_type -> kabuspb.Board
	14, // 52: kabuspb.KabusService.GetFutureSymbolCodeInfo:output_type -> kabuspb.SymbolCodeInfo
	14, // 53: kabuspb.KabusService.GetOptionSymbolCodeInfo:output_type -> kabuspb.SymbolCodeInfo
	17, // 54: kabuspb.KabusService.GetRegisteredSymbols:output_type -> kabuspb.RegisteredSymbols
	17, // 55: kabuspb.KabusService.RegisterSymbols:output_type -> kabuspb.RegisteredSymbols
	17, // 56: kabuspb.KabusService.UnregisterSymbols:output_type -> kabuspb.RegisteredSymbols
	17, // 57: kabuspb.KabusService.UnregisterAllSymbols:output_type -> kabuspb.RegisteredSymbols
	49, // [49:58] is the sub-list for method output_type
	40, // [40:49] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_kabuspb_kabus_proto_init() }
func file_kabuspb_kabus_proto_init() {
	if File_kabuspb_kabus_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kabuspb_kabus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBoardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFutureSymbolCodeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOptionSymbolCodeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegisteredSymbolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSymbolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnregisterSymbolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnregisterAllSymbolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Board); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolCodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstQuote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisteredSymbols); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kabuspb_kabus_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kabuspb_kabus_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kabuspb_kabus_proto_goTypes,
		DependencyIndexes: file_kabuspb_kabus_proto_depIdxs,
		EnumInfos:         file_kabuspb_kabus_proto_enumTypes,
		MessageInfos:      file_kabuspb_kabus_proto_msgTypes,
	}.Build()
	File_kabuspb_kabus_proto = out.File
	file_kabuspb_kabus_proto_rawDesc = nil
	file_kabuspb_kabus_proto_goTypes = nil
	file_kabuspb_kabus_proto_depIdxs = nil
}
